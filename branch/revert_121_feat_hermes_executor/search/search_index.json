{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Project Catalyst - Hermes \u00b6 How the docs are built \u00b6 MkDocs Material for MkDocs","title":"Project Catalyst - Hermes"},{"location":"#project-catalyst-hermes","text":"","title":"Project Catalyst - Hermes"},{"location":"#how-the-docs-are-built","text":"MkDocs Material for MkDocs","title":"How the docs are built"},{"location":"api/","text":"Hermes Rust docs \u00b6 OPEN FULL PAGE Workspace Dependency Graph \u00b6 External Dependencies Graph \u00b6 Build and Development Dependencies Graph \u00b6 Module trees \u00b6 hermes crate \u00b6 crate hermes \u251c\u2500\u2500 mod runtime : pub ( crate ) \u2502 \u251c\u2500\u2500 mod extensions : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 struct HermesState : pub ( crate ) \u2502 \u2502 \u2514\u2500\u2500 trait Stateful : pub ( crate ) \u2502 \u2514\u2500\u2500 mod host : pub ( crate ) \u2502 \u251c\u2500\u2500 mod hermes : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 struct State : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 mod binary : pub ( crate ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct State : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 mod cardano : pub ( crate ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct State : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 mod cbor : pub ( crate ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct State : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 mod cron : pub ( crate ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct State : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 mod crypto : pub ( crate ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct State : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 mod hash : pub ( crate ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct State : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 mod init : pub ( crate ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct State : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 mod json : pub ( crate ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct State : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 mod kv_store : pub ( crate ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct State : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 mod localtime : pub ( crate ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct State : pub ( crate ) \u2502 \u2502 \u2514\u2500\u2500 mod logging : pub ( crate ) \u2502 \u2502 \u2514\u2500\u2500 struct State : pub ( crate ) \u2502 \u2514\u2500\u2500 mod wasi : pub ( crate ) \u2502 \u251c\u2500\u2500 struct State : pub ( crate ) \u2502 \u251c\u2500\u2500 mod cli : pub ( crate ) \u2502 \u2502 \u2514\u2500\u2500 struct State : pub ( crate ) \u2502 \u251c\u2500\u2500 mod clocks : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 struct State : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 mod monotonic : pub ( self ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct State : pub ( crate ) \u2502 \u2502 \u2514\u2500\u2500 mod wall : pub ( self ) \u2502 \u2502 \u2514\u2500\u2500 struct State : pub ( crate ) \u2502 \u251c\u2500\u2500 mod filesystem : pub ( crate ) \u2502 \u2502 \u2514\u2500\u2500 struct State : pub ( crate ) \u2502 \u251c\u2500\u2500 mod http : pub ( crate ) \u2502 \u2502 \u2514\u2500\u2500 struct State : pub ( crate ) \u2502 \u251c\u2500\u2500 mod io : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 struct State : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 mod error : pub ( crate ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct State : pub ( crate ) \u2502 \u2502 \u2514\u2500\u2500 mod streams : pub ( crate ) \u2502 \u2502 \u2514\u2500\u2500 struct State : pub ( crate ) \u2502 \u2514\u2500\u2500 mod random : pub ( crate ) \u2502 \u251c\u2500\u2500 struct State : pub ( crate ) \u2502 \u251c\u2500\u2500 mod insecure : pub ( crate ) \u2502 \u2502 \u2514\u2500\u2500 struct State : pub ( crate ) \u2502 \u251c\u2500\u2500 mod insecure_seed : pub ( crate ) \u2502 \u2502 \u2514\u2500\u2500 struct State : pub ( crate ) \u2502 \u2514\u2500\u2500 mod secure : pub ( crate ) \u2502 \u2514\u2500\u2500 struct State : pub ( crate ) \u2514\u2500\u2500 mod wasm : pub ( crate ) \u251c\u2500\u2500 mod context : pub ( crate ) \u2502 \u2514\u2500\u2500 struct Context : pub ( crate ) \u251c\u2500\u2500 mod engine : pub ( self ) \u2502 \u2514\u2500\u2500 struct Engine : pub ( crate ) \u2514\u2500\u2500 mod module : pub ( self ) \u251c\u2500\u2500 trait LinkImport : pub ( crate ) \u2514\u2500\u2500 struct Module : pub ( crate ) cardano-chain-follower crate \u00b6 crate cardano_chain_follower \u251c\u2500\u2500 enum Error : pub \u251c\u2500\u2500 struct MultiEraBlockData : pub \u251c\u2500\u2500 enum Network : pub \u251c\u2500\u2500 enum PointOrTip : pub \u251c\u2500\u2500 type Result : pub \u251c\u2500\u2500 mod follow : pub ( crate ) \u2502 \u251c\u2500\u2500 enum ChainUpdate : pub \u2502 \u251c\u2500\u2500 struct Follower : pub \u2502 \u251c\u2500\u2500 struct FollowerConfig : pub \u2502 \u251c\u2500\u2500 struct FollowerConfigBuilder : pub \u2502 \u2514\u2500\u2500 mod follow_task : pub ( self ) \u2502 \u251c\u2500\u2500 struct MithrilSnapshotState : pub ( self ) \u2502 \u251c\u2500\u2500 enum Request : pub \u2502 \u251c\u2500\u2500 enum Response : pub \u2502 \u2514\u2500\u2500 struct TaskState : pub ( crate ) \u251c\u2500\u2500 mod mithril_snapshot : pub ( crate ) \u2502 \u251c\u2500\u2500 struct MithrilSnapshot : pub ( crate ) \u2502 \u2514\u2500\u2500 struct MithrilSnapshotIterator : pub ( crate ) \u2514\u2500\u2500 mod read : pub ( crate ) \u2514\u2500\u2500 struct Reader : pub Module graphs \u00b6 hermes crate \u00b6 cardano-chain-follower crate \u00b6","title":"Index"},{"location":"api/#hermes-rust-docs","text":"OPEN FULL PAGE","title":"Hermes Rust docs"},{"location":"api/#workspace-dependency-graph","text":"","title":"Workspace Dependency Graph"},{"location":"api/#external-dependencies-graph","text":"","title":"External Dependencies Graph"},{"location":"api/#build-and-development-dependencies-graph","text":"","title":"Build and Development Dependencies Graph"},{"location":"api/#module-trees","text":"","title":"Module trees"},{"location":"api/#hermes-crate","text":"crate hermes \u251c\u2500\u2500 mod runtime : pub ( crate ) \u2502 \u251c\u2500\u2500 mod extensions : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 struct HermesState : pub ( crate ) \u2502 \u2502 \u2514\u2500\u2500 trait Stateful : pub ( crate ) \u2502 \u2514\u2500\u2500 mod host : pub ( crate ) \u2502 \u251c\u2500\u2500 mod hermes : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 struct State : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 mod binary : pub ( crate ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct State : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 mod cardano : pub ( crate ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct State : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 mod cbor : pub ( crate ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct State : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 mod cron : pub ( crate ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct State : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 mod crypto : pub ( crate ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct State : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 mod hash : pub ( crate ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct State : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 mod init : pub ( crate ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct State : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 mod json : pub ( crate ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct State : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 mod kv_store : pub ( crate ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct State : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 mod localtime : pub ( crate ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct State : pub ( crate ) \u2502 \u2502 \u2514\u2500\u2500 mod logging : pub ( crate ) \u2502 \u2502 \u2514\u2500\u2500 struct State : pub ( crate ) \u2502 \u2514\u2500\u2500 mod wasi : pub ( crate ) \u2502 \u251c\u2500\u2500 struct State : pub ( crate ) \u2502 \u251c\u2500\u2500 mod cli : pub ( crate ) \u2502 \u2502 \u2514\u2500\u2500 struct State : pub ( crate ) \u2502 \u251c\u2500\u2500 mod clocks : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 struct State : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 mod monotonic : pub ( self ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct State : pub ( crate ) \u2502 \u2502 \u2514\u2500\u2500 mod wall : pub ( self ) \u2502 \u2502 \u2514\u2500\u2500 struct State : pub ( crate ) \u2502 \u251c\u2500\u2500 mod filesystem : pub ( crate ) \u2502 \u2502 \u2514\u2500\u2500 struct State : pub ( crate ) \u2502 \u251c\u2500\u2500 mod http : pub ( crate ) \u2502 \u2502 \u2514\u2500\u2500 struct State : pub ( crate ) \u2502 \u251c\u2500\u2500 mod io : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 struct State : pub ( crate ) \u2502 \u2502 \u251c\u2500\u2500 mod error : pub ( crate ) \u2502 \u2502 \u2502 \u2514\u2500\u2500 struct State : pub ( crate ) \u2502 \u2502 \u2514\u2500\u2500 mod streams : pub ( crate ) \u2502 \u2502 \u2514\u2500\u2500 struct State : pub ( crate ) \u2502 \u2514\u2500\u2500 mod random : pub ( crate ) \u2502 \u251c\u2500\u2500 struct State : pub ( crate ) \u2502 \u251c\u2500\u2500 mod insecure : pub ( crate ) \u2502 \u2502 \u2514\u2500\u2500 struct State : pub ( crate ) \u2502 \u251c\u2500\u2500 mod insecure_seed : pub ( crate ) \u2502 \u2502 \u2514\u2500\u2500 struct State : pub ( crate ) \u2502 \u2514\u2500\u2500 mod secure : pub ( crate ) \u2502 \u2514\u2500\u2500 struct State : pub ( crate ) \u2514\u2500\u2500 mod wasm : pub ( crate ) \u251c\u2500\u2500 mod context : pub ( crate ) \u2502 \u2514\u2500\u2500 struct Context : pub ( crate ) \u251c\u2500\u2500 mod engine : pub ( self ) \u2502 \u2514\u2500\u2500 struct Engine : pub ( crate ) \u2514\u2500\u2500 mod module : pub ( self ) \u251c\u2500\u2500 trait LinkImport : pub ( crate ) \u2514\u2500\u2500 struct Module : pub ( crate )","title":"hermes crate"},{"location":"api/#cardano-chain-follower-crate","text":"crate cardano_chain_follower \u251c\u2500\u2500 enum Error : pub \u251c\u2500\u2500 struct MultiEraBlockData : pub \u251c\u2500\u2500 enum Network : pub \u251c\u2500\u2500 enum PointOrTip : pub \u251c\u2500\u2500 type Result : pub \u251c\u2500\u2500 mod follow : pub ( crate ) \u2502 \u251c\u2500\u2500 enum ChainUpdate : pub \u2502 \u251c\u2500\u2500 struct Follower : pub \u2502 \u251c\u2500\u2500 struct FollowerConfig : pub \u2502 \u251c\u2500\u2500 struct FollowerConfigBuilder : pub \u2502 \u2514\u2500\u2500 mod follow_task : pub ( self ) \u2502 \u251c\u2500\u2500 struct MithrilSnapshotState : pub ( self ) \u2502 \u251c\u2500\u2500 enum Request : pub \u2502 \u251c\u2500\u2500 enum Response : pub \u2502 \u2514\u2500\u2500 struct TaskState : pub ( crate ) \u251c\u2500\u2500 mod mithril_snapshot : pub ( crate ) \u2502 \u251c\u2500\u2500 struct MithrilSnapshot : pub ( crate ) \u2502 \u2514\u2500\u2500 struct MithrilSnapshotIterator : pub ( crate ) \u2514\u2500\u2500 mod read : pub ( crate ) \u2514\u2500\u2500 struct Reader : pub","title":"cardano-chain-follower crate"},{"location":"api/#module-graphs","text":"","title":"Module graphs"},{"location":"api/#hermes-crate_1","text":"","title":"hermes crate"},{"location":"api/#cardano-chain-follower-crate_1","text":"","title":"cardano-chain-follower crate"},{"location":"api/rust-docs/static.files/SourceSerif4-LICENSE-3bb119e13b1258b7/","text":"Copyright 2014-2021 Adobe (http://www.adobe.com/), with Reserved Font Name 'Source'. All Rights Reserved. Source is a trademark of Adobe in the United States and/or other countries. Copyright 2014 - 2023 Adobe (http://www.adobe.com/), with Reserved Font Name \u2018Source\u2019. All Rights Reserved. Source is a trademark of Adobe in the United States and/or other countries. This Font Software is licensed under the SIL Open Font License, Version 1.1. This license is copied below, and is also available with a FAQ at: http://scripts.sil.org/OFL SIL OPEN FONT LICENSE Version 1.1 - 26 February 2007 \u00b6 PREAMBLE The goals of the Open Font License (OFL) are to stimulate worldwide development of collaborative font projects, to support the font creation efforts of academic and linguistic communities, and to provide a free and open framework in which fonts may be shared and improved in partnership with others. The OFL allows the licensed fonts to be used, studied, modified and redistributed freely as long as they are not sold by themselves. The fonts, including any derivative works, can be bundled, embedded, redistributed and/or sold with any software provided that any reserved names are not used by derivative works. The fonts and derivatives, however, cannot be released under any other type of license. The requirement for fonts to remain under this license does not apply to any document created using the fonts or their derivatives. DEFINITIONS \"Font Software\" refers to the set of files released by the Copyright Holder(s) under this license and clearly marked as such. This may include source files, build scripts and documentation. \"Reserved Font Name\" refers to any names specified as such after the copyright statement(s). \"Original Version\" refers to the collection of Font Software components as distributed by the Copyright Holder(s). \"Modified Version\" refers to any derivative made by adding to, deleting, or substituting -- in part or in whole -- any of the components of the Original Version, by changing formats or by porting the Font Software to a new environment. \"Author\" refers to any designer, engineer, programmer, technical writer or other person who contributed to the Font Software. PERMISSION & CONDITIONS Permission is hereby granted, free of charge, to any person obtaining a copy of the Font Software, to use, study, copy, merge, embed, modify, redistribute, and sell modified and unmodified copies of the Font Software, subject to the following conditions: 1) Neither the Font Software nor any of its individual components, in Original or Modified Versions, may be sold by itself. 2) Original or Modified Versions of the Font Software may be bundled, redistributed and/or sold with any software, provided that each copy contains the above copyright notice and this license. These can be included either as stand-alone text files, human-readable headers or in the appropriate machine-readable metadata fields within text or binary files as long as those fields can be easily viewed by the user. 3) No Modified Version of the Font Software may use the Reserved Font Name(s) unless explicit written permission is granted by the corresponding Copyright Holder. This restriction only applies to the primary font name as presented to the users. 4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font Software shall not be used to promote, endorse or advertise any Modified Version, except to acknowledge the contribution(s) of the Copyright Holder(s) and the Author(s) or with their explicit written permission. 5) The Font Software, modified or unmodified, in part or in whole, must be distributed entirely under this license, and must not be distributed under any other license. The requirement for fonts to remain under this license does not apply to any document created using the Font Software. TERMINATION This license becomes null and void if any of the above conditions are not met. DISCLAIMER THE FONT SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM OTHER DEALINGS IN THE FONT SOFTWARE.","title":"SourceSerif4 LICENSE 3bb119e13b1258b7"},{"location":"api/rust-docs/static.files/SourceSerif4-LICENSE-3bb119e13b1258b7/#sil-open-font-license-version-11-26-february-2007","text":"PREAMBLE The goals of the Open Font License (OFL) are to stimulate worldwide development of collaborative font projects, to support the font creation efforts of academic and linguistic communities, and to provide a free and open framework in which fonts may be shared and improved in partnership with others. The OFL allows the licensed fonts to be used, studied, modified and redistributed freely as long as they are not sold by themselves. The fonts, including any derivative works, can be bundled, embedded, redistributed and/or sold with any software provided that any reserved names are not used by derivative works. The fonts and derivatives, however, cannot be released under any other type of license. The requirement for fonts to remain under this license does not apply to any document created using the fonts or their derivatives. DEFINITIONS \"Font Software\" refers to the set of files released by the Copyright Holder(s) under this license and clearly marked as such. This may include source files, build scripts and documentation. \"Reserved Font Name\" refers to any names specified as such after the copyright statement(s). \"Original Version\" refers to the collection of Font Software components as distributed by the Copyright Holder(s). \"Modified Version\" refers to any derivative made by adding to, deleting, or substituting -- in part or in whole -- any of the components of the Original Version, by changing formats or by porting the Font Software to a new environment. \"Author\" refers to any designer, engineer, programmer, technical writer or other person who contributed to the Font Software. PERMISSION & CONDITIONS Permission is hereby granted, free of charge, to any person obtaining a copy of the Font Software, to use, study, copy, merge, embed, modify, redistribute, and sell modified and unmodified copies of the Font Software, subject to the following conditions: 1) Neither the Font Software nor any of its individual components, in Original or Modified Versions, may be sold by itself. 2) Original or Modified Versions of the Font Software may be bundled, redistributed and/or sold with any software, provided that each copy contains the above copyright notice and this license. These can be included either as stand-alone text files, human-readable headers or in the appropriate machine-readable metadata fields within text or binary files as long as those fields can be easily viewed by the user. 3) No Modified Version of the Font Software may use the Reserved Font Name(s) unless explicit written permission is granted by the corresponding Copyright Holder. This restriction only applies to the primary font name as presented to the users. 4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font Software shall not be used to promote, endorse or advertise any Modified Version, except to acknowledge the contribution(s) of the Copyright Holder(s) and the Author(s) or with their explicit written permission. 5) The Font Software, modified or unmodified, in part or in whole, must be distributed entirely under this license, and must not be distributed under any other license. The requirement for fonts to remain under this license does not apply to any document created using the Font Software. TERMINATION This license becomes null and void if any of the above conditions are not met. DISCLAIMER THE FONT SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM OTHER DEALINGS IN THE FONT SOFTWARE.","title":"SIL OPEN FONT LICENSE Version 1.1 - 26 February 2007"},{"location":"api/wasi-hermes/hermes/","text":"World hermes This import every single API and exports every single entrypoint for a module. Modules ONLY need to import API's they actually use. Modules only need to implement the exports they require. Take note of any permissions attached to a particular API before using it. Imports: interface wasi:cli/environment@0.2.0 interface wasi:io/error@0.2.0 interface wasi:io/streams@0.2.0 interface wasi:cli/stdin@0.2.0 interface wasi:cli/stdout@0.2.0 interface wasi:cli/stderr@0.2.0 interface wasi:clocks/monotonic-clock@0.2.0 interface wasi:clocks/wall-clock@0.2.0 interface wasi:filesystem/types@0.2.0 interface wasi:filesystem/preopens@0.2.0 interface wasi:random/random@0.2.0 interface wasi:random/insecure@0.2.0 interface wasi:random/insecure-seed@0.2.0 interface wasi:http/types@0.2.0 interface wasi:http/outgoing-handler@0.2.0 interface hermes:binary/api interface hermes:cbor/api interface hermes:cardano/api interface hermes:cron/api interface hermes:crypto/api interface hermes:hash/api interface hermes:json/api interface hermes:kv-store/api interface hermes:localtime/api interface hermes:logging/api Exports: interface wasi:http/incoming-handler@0.2.0 interface hermes:cardano/event-on-block interface hermes:cardano/event-on-txn interface hermes:cardano/event-on-rollback interface hermes:cron/event interface hermes:init/event interface hermes:kv-store/event Import interface wasi:cli/environment@0.2.0 Functions get-environment: func Get the POSIX-style environment variables. Each environment variable is provided as a pair of string variable names and string value. Morally, these are a value import, but until value imports are available in the component model, this import function should return the same values each time it is called. Return values list<( string , string )> get-arguments: func Get the POSIX-style arguments to the program. Return values list< string > initial-cwd: func Return a path that programs should use as their initial current working directory, interpreting . as shorthand for this. Return values option< string > Import interface wasi:io/error@0.2.0 Types resource error A resource which represents some error information. The only method provided by this resource is to-debug-string , which provides some human-readable information about the error. In the wasi:io package, this resource is returned through the wasi:io/streams/stream-error type. To provide more specific error information, other interfaces may provide functions to further \"downcast\" this error into more specific error information. For example, error s returned in streams derived from filesystem types to be described using the filesystem's own error-code type, using the function wasi:filesystem/types/filesystem-error-code , which takes a parameter borrow<error> and returns option<wasi:filesystem/types/error-code> . The set of functions which can \"downcast\" an error into a more concrete type is open. Functions [method]error.to-debug-string: func Returns a string that is suitable to assist humans in debugging this error. WARNING: The returned string should not be consumed mechanically! It may change across platforms, hosts, or other implementation details. Parsing this string is a major platform-compatibility hazard. Params self : borrow< error > Return values string Import interface wasi:io/streams@0.2.0 WASI I/O is an I/O abstraction API which is currently focused on providing stream types. In the future, the component model is expected to add built-in stream types; when it does, they are expected to subsume this API. Types type error error #### `variant stream-error` // Hermes does not support poll use poll.{pollable}; */ An error for input-stream and output-stream operations. Variant Cases last-operation-failed : own< error > The last operation (a write or flush) failed before completion. More information is available in the error payload. closed The stream is closed: no more input will be accepted by the stream. A closed output-stream will return this error on all future operations. resource input-stream An input bytestream. input-stream s are non-blocking to the extent practical on underlying platforms. I/O operations always return promptly; if fewer bytes are promptly available than requested, they return the number of bytes promptly available, which could even be zero. To wait for data to be available, use the subscribe function to obtain a pollable which can be polled for using wasi:io/poll . resource output-stream An output bytestream. output-stream s are non-blocking to the extent practical on underlying platforms. Except where specified otherwise, I/O operations also always return promptly, after the number of bytes that can be written promptly, which could even be zero. To wait for the stream to be ready to accept data, the subscribe function to obtain a pollable which can be polled for using wasi:io/poll . Functions [method]input-stream.read: func Perform a non-blocking read from the stream. This function returns a list of bytes containing the read data, when successful. The returned list will contain up to len bytes; it may return fewer than requested, but not more. The list is empty when no bytes are available for reading at this time. The pollable given by subscribe will be ready when more bytes are available. This function fails with a stream-error when the operation encounters an error, giving last-operation-failed , or when the stream is closed, giving closed . When the caller gives a len of 0, it represents a request to read 0 bytes. If the stream is still open, this call should succeed and return an empty list, or otherwise fail with closed . The len parameter is a u64 , which could represent a list of u8 which is not possible to allocate in wasm32, or not desirable to allocate as as a return value by the callee. The callee may return a list of bytes less than len in size while more bytes are available for reading. Params self : borrow< input-stream > len : u64 Return values result<list< u8 >, stream-error > [method]input-stream.blocking-read: func Read bytes from a stream, after blocking until at least one byte can be read. Except for blocking, behavior is identical to read . Params self : borrow< input-stream > len : u64 Return values result<list< u8 >, stream-error > [method]input-stream.skip: func Skip bytes from a stream. Returns number of bytes skipped. Behaves identical to read , except instead of returning a list of bytes, returns the number of bytes consumed from the stream. Params self : borrow< input-stream > len : u64 Return values result< u64 , stream-error > [method]input-stream.blocking-skip: func Skip bytes from a stream, after blocking until at least one byte can be skipped. Except for blocking behavior, identical to skip . Params self : borrow< input-stream > len : u64 Return values result< u64 , stream-error > [method]output-stream.check-write: func Check readiness for writing. This function never blocks. Returns the number of bytes permitted for the next call to write , or an error. Calling write with more bytes than this function has permitted will trap. When this function returns 0 bytes, the subscribe pollable will become ready when this function will report at least 1 byte, or an error. Params self : borrow< output-stream > Return values result< u64 , stream-error > [method]output-stream.write: func Perform a write. This function never blocks. Precondition: check-write gave permit of Ok(n) and contents has a length of less than or equal to n. Otherwise, this function will trap. returns Err(closed) without writing if the stream has closed since the last call to check-write provided a permit. Params self : borrow< output-stream > contents : list< u8 > Return values result<_, stream-error > [method]output-stream.blocking-write-and-flush: func Perform a write of up to 4096 bytes, and then flush the stream. Block until all of these operations are complete, or an error occurs. This is a convenience wrapper around the use of check-write , subscribe , write , and flush , and is implemented with the following pseudo-code: let pollable = this.subscribe(); while !contents.is_empty() { // Wait for the stream to become writable poll-one(pollable); let Ok(n) = this.check-write(); // eliding error handling let len = min(n, contents.len()); let (chunk, rest) = contents.split_at(len); this.write(chunk ); // eliding error handling contents = rest; } this.flush(); // Wait for completion of `flush` poll-one(pollable); // Check for any errors that arose during `flush` let _ = this.check-write(); // eliding error handling Params self : borrow< output-stream > contents : list< u8 > Return values result<_, stream-error > [method]output-stream.flush: func Request to flush buffered output. This function never blocks. This tells the output-stream that the caller intends any buffered output to be flushed. the output which is expected to be flushed is all that has been passed to write prior to this call. Upon calling this function, the output-stream will not accept any writes ( check-write will return ok(0) ) until the flush has completed. The subscribe pollable will become ready when the flush has completed and the stream can accept more writes. Params self : borrow< output-stream > Return values result<_, stream-error > [method]output-stream.blocking-flush: func Request to flush buffered output, and block until flush completes and stream is ready for writing again. Params self : borrow< output-stream > Return values result<_, stream-error > [method]output-stream.write-zeroes: func /// Create a pollable which will resolve once the output-stream /// is ready for more writing, or an error has occured. When this /// pollable is ready, check-write will return ok(n) with n>0, or an /// error. /// /// If the stream is closed, this pollable is always ready immediately. /// /// The created pollable is a child resource of the output-stream . /// Implementations may trap if the output-stream is dropped before /// all derived pollable s created with this function are dropped. subscribe: func() -> pollable; */ Write zeroes to a stream. this should be used precisely like write with the exact same preconditions (must use check-write first), but instead of passing a list of bytes, you simply pass the number of zero-bytes that should be written. Params self : borrow< output-stream > len : u64 Return values result<_, stream-error > [method]output-stream.blocking-write-zeroes-and-flush: func Perform a write of up to 4096 zeroes, and then flush the stream. Block until all of these operations are complete, or an error occurs. This is a convenience wrapper around the use of check-write , subscribe , write-zeroes , and flush , and is implemented with the following pseudo-code: let pollable = this.subscribe(); while num_zeroes != 0 { // Wait for the stream to become writable poll-one(pollable); let Ok(n) = this.check-write(); // eliding error handling let len = min(n, num_zeroes); this.write-zeroes(len); // eliding error handling num_zeroes -= len; } this.flush(); // Wait for completion of `flush` poll-one(pollable); // Check for any errors that arose during `flush` let _ = this.check-write(); // eliding error handling Params self : borrow< output-stream > len : u64 Return values result<_, stream-error > [method]output-stream.splice: func Read from one stream and write to another. The behavior of splice is equivelant to: calling check-write on the output-stream calling read on the input-stream with the smaller of the check-write permitted length and the len provided to splice calling write on the output-stream with that read data. Any error reported by the call to check-write , read , or write ends the splice and reports that error. This function returns the number of bytes transferred; it may be less than len . Params self : borrow< output-stream > src : borrow< input-stream > len : u64 Return values result< u64 , stream-error > [method]output-stream.blocking-splice: func Read from one stream and write to another, with blocking. This is similar to splice , except that it blocks until the output-stream is ready for writing, and the input-stream is ready for reading, before performing the splice . Params self : borrow< output-stream > src : borrow< input-stream > len : u64 Return values result< u64 , stream-error > Import interface wasi:cli/stdin@0.2.0 Types type input-stream input-stream ---- Functions get-stdin: func Return values own< input-stream > Import interface wasi:cli/stdout@0.2.0 Types type output-stream output-stream ---- Functions get-stdout: func Return values own< output-stream > Import interface wasi:cli/stderr@0.2.0 Types type output-stream output-stream ---- Functions get-stderr: func Return values own< output-stream > Import interface wasi:clocks/monotonic-clock@0.2.0 WASI Monotonic Clock is a clock API intended to let users measure elapsed time. It is intended to be portable at least between Unix-family platforms and Windows. A monotonic clock is a clock which has an unspecified initial value, and successive reads of the clock will produce non-decreasing values. It is intended for measuring elapsed time. Types type instant u64 Hermes does not support `poll` use wasi:io/poll@0.2.0.{pollable}; An instant in time, in nanoseconds. An instant is relative to an unspecified initial value, and can only be compared to instances from the same monotonic-clock. type duration u64 A duration of time, in nanoseconds. Functions now: func Read the current value of the clock. The clock is monotonic, therefore calling this function repeatedly will produce a sequence of non-decreasing values. Return values instant resolution: func Query the resolution of the clock. Returns the duration of time corresponding to a clock tick. Return values duration Import interface wasi:clocks/wall-clock@0.2.0 WASI Wall Clock is a clock API intended to let users query the current time. The name \"wall\" makes an analogy to a \"clock on the wall\", which is not necessarily monotonic as it may be reset. It is intended to be portable at least between Unix-family platforms and Windows. A wall clock is a clock which measures the date and time according to some external reference. External references may be reset, so this clock is not necessarily monotonic, making it unsuitable for measuring elapsed time. It is intended for reporting the current date and time for humans. Types record datetime A time and date in seconds plus nanoseconds. Record Fields seconds : u64 nanoseconds : u32 Functions now: func Read the current value of the clock. This clock is not monotonic, therefore calling this function repeatedly will not necessarily produce a sequence of non-decreasing values. The returned timestamps represent the number of seconds since 1970-01-01T00:00:00Z, also known as POSIX's Seconds Since the Epoch , also known as Unix Time . The nanoseconds field of the output is always less than 1000000000. Return values datetime resolution: func Query the resolution of the clock. The nanoseconds field of the output is always less than 1000000000. Return values datetime Import interface wasi:filesystem/types@0.2.0 WASI filesystem is a filesystem API primarily intended to let users run WASI programs that access their files on their existing filesystems, without significant overhead. It is intended to be roughly portable between Unix-family platforms and Windows, though it does not hide many of the major differences. Paths are passed as interface-type string s, meaning they must consist of a sequence of Unicode Scalar Values (USVs). Some filesystems may contain paths which are not accessible by this API. The directory separator in WASI is always the forward-slash ( / ). All paths in WASI are relative paths, and are interpreted relative to a descriptor referring to a base directory. If a path argument to any WASI function starts with / , or if any step of resolving a path , including .. and symbolic link steps, reaches a directory outside of the base directory, or reaches a symlink to an absolute or rooted path in the underlying filesystem, the function fails with error-code::not-permitted . For more information about WASI path resolution and sandboxing, see WASI filesystem path resolution . Types type input-stream input-stream #### `type output-stream` [`output-stream`](#output_stream) #### `type error` [`error`](#error) #### `type datetime` [`datetime`](#datetime) #### `type filesize` `u64` File size or length of a region within a file. enum descriptor-type The type of a filesystem object referenced by a descriptor. Note: This was called filetype in earlier versions of WASI. Enum Cases unknown The type of the descriptor or file is unknown or is different from any of the other types specified. block-device The descriptor refers to a block device inode. character-device The descriptor refers to a character device inode. directory The descriptor refers to a directory inode. fifo The descriptor refers to a named pipe. symbolic-link The file refers to a symbolic link inode. regular-file The descriptor refers to a regular file inode. socket The descriptor refers to a socket. flags descriptor-flags Descriptor flags. Note: This was called fdflags in earlier versions of WASI. Flags members read : Read mode: Data can be read. write : Write mode: Data can be written to. file-integrity-sync : Request that writes be performed according to synchronized I/O file integrity completion. The data stored in the file and the file's metadata are synchronized. This is similar to `O_SYNC` in POSIX. The precise semantics of this operation have not yet been defined for WASI. At this time, it should be interpreted as a request, and not a requirement. data-integrity-sync : Request that writes be performed according to synchronized I/O data integrity completion. Only the data stored in the file is synchronized. This is similar to `O_DSYNC` in POSIX. The precise semantics of this operation have not yet been defined for WASI. At this time, it should be interpreted as a request, and not a requirement. requested-write-sync : Requests that reads be performed at the same level of integrety requested for writes. This is similar to `O_RSYNC` in POSIX. The precise semantics of this operation have not yet been defined for WASI. At this time, it should be interpreted as a request, and not a requirement. mutate-directory : Mutating directories mode: Directory contents may be mutated. When this flag is unset on a descriptor, operations using the descriptor which would create, rename, delete, modify the data or metadata of filesystem objects, or obtain another handle which would permit any of those, shall fail with error-code::read-only if they would otherwise succeed. This may only be set on directories. flags path-flags Flags determining the method of how paths are resolved. Flags members symlink-follow : As long as the resolved path corresponds to a symbolic link, it is expanded. flags open-flags Open flags used by open-at . Flags members create : Create file if it does not exist, similar to `O_CREAT` in POSIX. directory : Fail if not a directory, similar to `O_DIRECTORY` in POSIX. exclusive : Fail if file already exists, similar to `O_EXCL` in POSIX. truncate : Truncate file to size 0, similar to `O_TRUNC` in POSIX. type link-count u64 Number of hard links to an inode. record descriptor-stat File attributes. Note: This was called filestat in earlier versions of WASI. Record Fields type : descriptor-type File type. link-count : link-count Number of hard links to the file. size : filesize For regular files, the file size in bytes. For symbolic links, the length in bytes of the pathname contained in the symbolic link. data-access-timestamp : option< datetime > Last data access timestamp. If the option is none, the platform doesn't maintain an access timestamp for this file. data-modification-timestamp : option< datetime > Last data modification timestamp. If the option is none, the platform doesn't maintain a modification timestamp for this file. status-change-timestamp : option< datetime > Last file status-change timestamp. If the option is none, the platform doesn't maintain a status-change timestamp for this file. variant new-timestamp When setting a timestamp, this gives the value to set it to. Variant Cases no-change Leave the timestamp set to its previous value. now Set the timestamp to the current time of the system clock associated with the filesystem. timestamp : datetime Set the timestamp to the given value. record directory-entry A directory entry. Record Fields type : descriptor-type The type of the file referred to by this directory entry. name : string The name of the object. enum error-code Error codes returned by functions, similar to errno in POSIX. Not all of these error codes are returned by the functions provided by this API; some are used in higher-level library layers, and others are provided merely for alignment with POSIX. Enum Cases access Permission denied, similar to `EACCES` in POSIX. would-block Resource unavailable, or operation would block, similar to `EAGAIN` and `EWOULDBLOCK` in POSIX. already Connection already in progress, similar to `EALREADY` in POSIX. bad-descriptor Bad descriptor, similar to `EBADF` in POSIX. busy Device or resource busy, similar to `EBUSY` in POSIX. deadlock Resource deadlock would occur, similar to `EDEADLK` in POSIX. quota Storage quota exceeded, similar to `EDQUOT` in POSIX. exist File exists, similar to `EEXIST` in POSIX. file-too-large File too large, similar to `EFBIG` in POSIX. illegal-byte-sequence Illegal byte sequence, similar to `EILSEQ` in POSIX. in-progress Operation in progress, similar to `EINPROGRESS` in POSIX. interrupted Interrupted function, similar to `EINTR` in POSIX. invalid Invalid argument, similar to `EINVAL` in POSIX. io I/O error, similar to `EIO` in POSIX. is-directory Is a directory, similar to `EISDIR` in POSIX. loop Too many levels of symbolic links, similar to `ELOOP` in POSIX. too-many-links Too many links, similar to `EMLINK` in POSIX. message-size Message too large, similar to `EMSGSIZE` in POSIX. name-too-long Filename too long, similar to `ENAMETOOLONG` in POSIX. no-device No such device, similar to `ENODEV` in POSIX. no-entry No such file or directory, similar to `ENOENT` in POSIX. no-lock No locks available, similar to `ENOLCK` in POSIX. insufficient-memory Not enough space, similar to `ENOMEM` in POSIX. insufficient-space No space left on device, similar to `ENOSPC` in POSIX. not-directory Not a directory or a symbolic link to a directory, similar to `ENOTDIR` in POSIX. not-empty Directory not empty, similar to `ENOTEMPTY` in POSIX. not-recoverable State not recoverable, similar to `ENOTRECOVERABLE` in POSIX. unsupported Not supported, similar to `ENOTSUP` and `ENOSYS` in POSIX. no-tty Inappropriate I/O control operation, similar to `ENOTTY` in POSIX. no-such-device No such device or address, similar to `ENXIO` in POSIX. overflow Value too large to be stored in data type, similar to `EOVERFLOW` in POSIX. not-permitted Operation not permitted, similar to `EPERM` in POSIX. pipe Broken pipe, similar to `EPIPE` in POSIX. read-only Read-only file system, similar to `EROFS` in POSIX. invalid-seek Invalid seek, similar to `ESPIPE` in POSIX. text-file-busy Text file busy, similar to `ETXTBSY` in POSIX. cross-device Cross-device link, similar to `EXDEV` in POSIX. enum advice File or memory access pattern advisory information. Enum Cases normal The application has no advice to give on its behavior with respect to the specified data. sequential The application expects to access the specified data sequentially from lower offsets to higher offsets. random The application expects to access the specified data in a random order. will-need The application expects to access the specified data in the near future. dont-need The application expects that it will not access the specified data in the near future. no-reuse The application expects to access the specified data once and then not reuse it thereafter. record metadata-hash-value A 128-bit hash value, split into parts because wasm doesn't have a 128-bit integer type. Record Fields lower : u64 64 bits of a 128-bit hash value. upper : u64 Another 64 bits of a 128-bit hash value. resource descriptor A descriptor is a reference to a filesystem object, which may be a file, directory, named pipe, special file, or other object on which filesystem calls may be made. resource directory-entry-stream A stream of directory entries. Functions [method]descriptor.read-via-stream: func Return a stream for reading from a file, if available. May fail with an error-code describing why the file cannot be read. Multiple read, write, and append streams may be active on the same open file and they do not interfere with each other. Note: This allows using read-stream , which is similar to read in POSIX. Params self : borrow< descriptor > offset : filesize Return values result<own< input-stream >, error-code > [method]descriptor.write-via-stream: func Return a stream for writing to a file, if available. May fail with an error-code describing why the file cannot be written. Note: This allows using write-stream , which is similar to write in POSIX. Params self : borrow< descriptor > offset : filesize Return values result<own< output-stream >, error-code > [method]descriptor.append-via-stream: func Return a stream for appending to a file, if available. May fail with an error-code describing why the file cannot be appended. Note: This allows using write-stream , which is similar to write with O_APPEND in in POSIX. Params self : borrow< descriptor > Return values result<own< output-stream >, error-code > [method]descriptor.advise: func Provide file advisory information on a descriptor. This is similar to posix_fadvise in POSIX. Params self : borrow< descriptor > offset : filesize length : filesize advice : advice Return values result<_, error-code > [method]descriptor.sync-data: func Synchronize the data of a file to disk. This function succeeds with no effect if the file descriptor is not opened for writing. Note: This is similar to fdatasync in POSIX. Params self : borrow< descriptor > Return values result<_, error-code > [method]descriptor.get-flags: func Get flags associated with a descriptor. Note: This returns similar flags to fcntl(fd, F_GETFL) in POSIX. Note: This returns the value that was the fs_flags value returned from fdstat_get in earlier versions of WASI. Params self : borrow< descriptor > Return values result< descriptor-flags , error-code > [method]descriptor.get-type: func Get the dynamic type of a descriptor. Note: This returns the same value as the type field of the fd-stat returned by stat , stat-at and similar. Note: This returns similar flags to the st_mode & S_IFMT value provided by fstat in POSIX. Note: This returns the value that was the fs_filetype value returned from fdstat_get in earlier versions of WASI. Params self : borrow< descriptor > Return values result< descriptor-type , error-code > [method]descriptor.set-size: func Adjust the size of an open file. If this increases the file's size, the extra bytes are filled with zeros. Note: This was called fd_filestat_set_size in earlier versions of WASI. Params self : borrow< descriptor > size : filesize Return values result<_, error-code > [method]descriptor.set-times: func Adjust the timestamps of an open file or directory. Note: This is similar to futimens in POSIX. Note: This was called fd_filestat_set_times in earlier versions of WASI. Params self : borrow< descriptor > data-access-timestamp : new-timestamp data-modification-timestamp : new-timestamp Return values result<_, error-code > [method]descriptor.read: func Read from a descriptor, without using and updating the descriptor's offset. This function returns a list of bytes containing the data that was read, along with a bool which, when true, indicates that the end of the file was reached. The returned list will contain up to length bytes; it may return fewer than requested, if the end of the file is reached or if the I/O operation is interrupted. In the future, this may change to return a stream<u8, error-code> . Note: This is similar to pread in POSIX. Params self : borrow< descriptor > length : filesize offset : filesize Return values result<(list< u8 >, bool ), error-code > [method]descriptor.write: func Write to a descriptor, without using and updating the descriptor's offset. It is valid to write past the end of a file; the file is extended to the extent of the write, with bytes between the previous end and the start of the write set to zero. In the future, this may change to take a stream<u8, error-code> . Note: This is similar to pwrite in POSIX. Params self : borrow< descriptor > buffer : list< u8 > offset : filesize Return values result< filesize , error-code > [method]descriptor.read-directory: func Read directory entries from a directory. On filesystems where directories contain entries referring to themselves and their parents, often named . and .. respectively, these entries are omitted. This always returns a new stream which starts at the beginning of the directory. Multiple streams may be active on the same directory, and they do not interfere with each other. Params self : borrow< descriptor > Return values result<own< directory-entry-stream >, error-code > [method]descriptor.sync: func Synchronize the data and metadata of a file to disk. This function succeeds with no effect if the file descriptor is not opened for writing. Note: This is similar to fsync in POSIX. Params self : borrow< descriptor > Return values result<_, error-code > [method]descriptor.create-directory-at: func Create a directory. Note: This is similar to mkdirat in POSIX. Params self : borrow< descriptor > path : string Return values result<_, error-code > [method]descriptor.stat: func Return the attributes of an open file or directory. Note: This is similar to fstat in POSIX, except that it does not return device and inode information. For testing whether two descriptors refer to the same underlying filesystem object, use is-same-object . To obtain additional data that can be used do determine whether a file has been modified, use metadata-hash . Note: This was called fd_filestat_get in earlier versions of WASI. Params self : borrow< descriptor > Return values result< descriptor-stat , error-code > [method]descriptor.stat-at: func Return the attributes of a file or directory. Note: This is similar to fstatat in POSIX, except that it does not return device and inode information. See the stat description for a discussion of alternatives. Note: This was called path_filestat_get in earlier versions of WASI. Params self : borrow< descriptor > path-flags : path-flags path : string Return values result< descriptor-stat , error-code > [method]descriptor.set-times-at: func Adjust the timestamps of a file or directory. Note: This is similar to utimensat in POSIX. Note: This was called path_filestat_set_times in earlier versions of WASI. Params self : borrow< descriptor > path-flags : path-flags path : string data-access-timestamp : new-timestamp data-modification-timestamp : new-timestamp Return values result<_, error-code > [method]descriptor.link-at: func Create a hard link. Note: This is similar to linkat in POSIX. Params self : borrow< descriptor > old-path-flags : path-flags old-path : string new-descriptor : borrow< descriptor > new-path : string Return values result<_, error-code > [method]descriptor.open-at: func Open a file or directory. The returned descriptor is not guaranteed to be the lowest-numbered descriptor not currently open/ it is randomized to prevent applications from depending on making assumptions about indexes, since this is error-prone in multi-threaded contexts. The returned descriptor is guaranteed to be less than 2**31. If flags contains descriptor-flags::mutate-directory , and the base descriptor doesn't have descriptor-flags::mutate-directory set, open-at fails with error-code::read-only . If flags contains write or mutate-directory , or open-flags contains truncate or create , and the base descriptor doesn't have descriptor-flags::mutate-directory set, open-at fails with error-code::read-only . Note: This is similar to openat in POSIX. Params self : borrow< descriptor > path-flags : path-flags path : string open-flags : open-flags flags : descriptor-flags Return values result<own< descriptor >, error-code > [method]descriptor.readlink-at: func Read the contents of a symbolic link. If the contents contain an absolute or rooted path in the underlying filesystem, this function fails with error-code::not-permitted . Note: This is similar to readlinkat in POSIX. Params self : borrow< descriptor > path : string Return values result< string , error-code > [method]descriptor.remove-directory-at: func Remove a directory. Return error-code::not-empty if the directory is not empty. Note: This is similar to unlinkat(fd, path, AT_REMOVEDIR) in POSIX. Params self : borrow< descriptor > path : string Return values result<_, error-code > [method]descriptor.rename-at: func Rename a filesystem object. Note: This is similar to renameat in POSIX. Params self : borrow< descriptor > old-path : string new-descriptor : borrow< descriptor > new-path : string Return values result<_, error-code > [method]descriptor.symlink-at: func Create a symbolic link (also known as a \"symlink\"). If old-path starts with / , the function fails with error-code::not-permitted . Note: This is similar to symlinkat in POSIX. Params self : borrow< descriptor > old-path : string new-path : string Return values result<_, error-code > [method]descriptor.unlink-file-at: func Unlink a filesystem object that is not a directory. Return error-code::is-directory if the path refers to a directory. Note: This is similar to unlinkat(fd, path, 0) in POSIX. Params self : borrow< descriptor > path : string Return values result<_, error-code > [method]descriptor.is-same-object: func Test whether two descriptors refer to the same filesystem object. In POSIX, this corresponds to testing whether the two descriptors have the same device ( st_dev ) and inode ( st_ino or d_ino ) numbers. wasi-filesystem does not expose device and inode numbers, so this function may be used instead. Params self : borrow< descriptor > other : borrow< descriptor > Return values bool [method]descriptor.metadata-hash: func Return a hash of the metadata associated with a filesystem object referred to by a descriptor. This returns a hash of the last-modification timestamp and file size, and may also include the inode number, device number, birth timestamp, and other metadata fields that may change when the file is modified or replaced. It may also include a secret value chosen by the implementation and not otherwise exposed. Implementations are encourated to provide the following properties: If the file is not modified or replaced, the computed hash value should usually not change. If the object is modified or replaced, the computed hash value should usually change. The inputs to the hash should not be easily computable from the computed hash. However, none of these is required. Params self : borrow< descriptor > Return values result< metadata-hash-value , error-code > [method]descriptor.metadata-hash-at: func Return a hash of the metadata associated with a filesystem object referred to by a directory descriptor and a relative path. This performs the same hash computation as metadata-hash . Params self : borrow< descriptor > path-flags : path-flags path : string Return values result< metadata-hash-value , error-code > [method]directory-entry-stream.read-directory-entry: func Read a single directory entry from a directory-entry-stream . Params self : borrow< directory-entry-stream > Return values result<option< directory-entry >, error-code > filesystem-error-code: func Attempts to extract a filesystem-related error-code from the stream error provided. Stream operations which return stream-error::last-operation-failed have a payload with more information about the operation that failed. This payload can be passed through to this function to see if there's filesystem-related information about the error to return. Note that this function is fallible because not all stream-related errors are filesystem-related errors. Params err : borrow< error > Return values option< error-code > Import interface wasi:filesystem/preopens@0.2.0 Types type descriptor descriptor ---- Functions get-directories: func Return the set of preopened directories, and their path. Return values list<(own< descriptor >, string )> Import interface wasi:random/random@0.2.0 WASI Random is a random data API. It is intended to be portable at least between Unix-family platforms and Windows. Functions get-random-bytes: func Return len cryptographically-secure random or pseudo-random bytes. This function must produce data at least as cryptographically secure and fast as an adequately seeded cryptographically-secure pseudo-random number generator (CSPRNG). It must not block, from the perspective of the calling program, under any circumstances, including on the first request and on requests for numbers of bytes. The returned data must always be unpredictable. This function must always return fresh data. Deterministic environments must omit this function, rather than implementing it with deterministic data. Params len : u64 Return values list< u8 > get-random-u64: func Return a cryptographically-secure random or pseudo-random u64 value. This function returns the same type of data as get-random-bytes , represented as a u64 . Return values u64 Import interface wasi:random/insecure@0.2.0 The insecure interface for insecure pseudo-random numbers. It is intended to be portable at least between Unix-family platforms and Windows. Functions get-insecure-random-bytes: func Return len insecure pseudo-random bytes. This function is not cryptographically secure. Do not use it for anything related to security. There are no requirements on the values of the returned bytes, however implementations are encouraged to return evenly distributed values with a long period. Params len : u64 Return values list< u8 > get-insecure-random-u64: func Return an insecure pseudo-random u64 value. This function returns the same type of pseudo-random data as get-insecure-random-bytes , represented as a u64 . Return values u64 Import interface wasi:random/insecure-seed@0.2.0 The insecure-seed interface for seeding hash-map DoS resistance. It is intended to be portable at least between Unix-family platforms and Windows. Functions insecure-seed: func Return a 128-bit value that may contain a pseudo-random value. The returned value is not required to be computed from a CSPRNG, and may even be entirely deterministic. Host implementations are encouraged to provide pseudo-random values to any program exposed to attacker-controlled content, to enable DoS protection built into many languages' hash-map implementations. This function is intended to only be called once, by a source language to initialize Denial Of Service (DoS) protection in its hash-map implementation. Expected future evolution This will likely be changed to a value import, to prevent it from being called multiple times and potentially used for purposes other than DoS protection. Return values ( u64 , u64 ) Import interface wasi:http/types@0.2.0 This interface defines all of the types and methods for implementing HTTP Requests and Responses, both incoming and outgoing, as well as their headers, trailers, and bodies. Types type duration duration #### `type input-stream` [`input-stream`](#input_stream) #### `type output-stream` [`output-stream`](#output_stream) #### `type io-error` [`error`](#error) #### `variant method` Hermes doews not support poll use wasi:io/poll@0.2.0.{pollable}; This type corresponds to HTTP standard Methods. Variant Cases get head post put delete connect options trace patch other : string variant scheme This type corresponds to HTTP standard Related Schemes. Variant Cases HTTP HTTPS other : string record DNS-error-payload Defines the case payload type for DNS-error above: Record Fields rcode : option< string > info-code : option< u16 > record TLS-alert-received-payload Defines the case payload type for TLS-alert-received above: Record Fields alert-id : option< u8 > alert-message : option< string > record field-size-payload Defines the case payload type for HTTP-response-{header,trailer}-size above: Record Fields field-name : option< string > field-size : option< u32 > variant error-code These cases are inspired by the IANA HTTP Proxy Error Types: https://www.iana.org/assignments/http-proxy-status/http-proxy-status.xhtml#table-http-proxy-error-types Variant Cases DNS-timeout DNS-error : DNS-error-payload destination-not-found destination-unavailable destination-IP-prohibited destination-IP-unroutable connection-refused connection-terminated connection-timeout connection-read-timeout connection-write-timeout connection-limit-reached TLS-protocol-error TLS-certificate-error TLS-alert-received : TLS-alert-received-payload HTTP-request-denied HTTP-request-length-required HTTP-request-body-size : option< u64 > HTTP-request-method-invalid HTTP-request-URI-invalid HTTP-request-URI-too-long HTTP-request-header-section-size : option< u32 > HTTP-request-header-size : option< field-size-payload > HTTP-request-trailer-section-size : option< u32 > HTTP-request-trailer-size : field-size-payload HTTP-response-incomplete HTTP-response-header-section-size : option< u32 > HTTP-response-header-size : field-size-payload HTTP-response-body-size : option< u64 > HTTP-response-trailer-section-size : option< u32 > HTTP-response-trailer-size : field-size-payload HTTP-response-transfer-coding : option< string > HTTP-response-content-coding : option< string > HTTP-response-timeout HTTP-upgrade-failed HTTP-protocol-error loop-detected configuration-error internal-error : option< string > This is a catch-all error for anything that doesn't fit cleanly into a more specific case. It also includes an optional string for an unstructured description of the error. Users should not depend on the string for diagnosing errors, as it's not required to be consistent between implementations. variant header-error This type enumerates the different kinds of errors that may occur when setting or appending to a fields resource. Variant Cases invalid-syntax This error indicates that a `field-key` or `field-value` was syntactically invalid when used with an operation that sets headers in a `fields`. forbidden This error indicates that a forbidden `field-key` was used when trying to set a header in a `fields`. immutable This error indicates that the operation on the `fields` was not permitted because the fields are immutable. type field-key string Field keys are always strings. type field-value field-value Field values should always be ASCII strings. However, in reality, HTTP implementations often have to interpret malformed values, so they are provided as a list of bytes. resource fields This following block defines the fields resource which corresponds to HTTP standard Fields. Fields are a common representation used for both Headers and Trailers. A fields may be mutable or immutable. A fields created using the constructor, from-list , or clone will be mutable, but a fields resource given by other means (including, but not limited to, incoming-request.headers , outgoing-request.headers ) might be be immutable. In an immutable fields, the set , append , and delete operations will fail with header-error.immutable . type headers fields Headers is an alias for Fields. type trailers fields Trailers is an alias for Fields. resource incoming-request Represents an incoming HTTP Request. resource outgoing-request Represents an outgoing HTTP Request. resource request-options Parameters for making an HTTP Request. Each of these parameters is currently an optional timeout applicable to the transport layer of the HTTP protocol. These timeouts are separate from any the user may use to bound a blocking call to wasi:io/poll.poll . resource response-outparam Represents the ability to send an HTTP Response. This resource is used by the wasi:http/incoming-handler interface to allow a Response to be sent corresponding to the Request provided as the other argument to incoming-handler.handle . type status-code u16 This type corresponds to the HTTP standard Status Code. resource incoming-response Represents an incoming HTTP Response. resource incoming-body Represents an incoming HTTP Request or Response's Body. A body has both its contents - a stream of bytes - and a (possibly empty) set of trailers, indicating that the full contents of the body have been received. This resource represents the contents as an input-stream and the delivery of trailers as a future-trailers , and ensures that the user of this interface may only be consuming either the body contents or waiting on trailers at any given time. resource future-trailers Represents a future which may eventaully return trailers, or an error. In the case that the incoming HTTP Request or Response did not have any trailers, this future will resolve to the empty set of trailers once the complete Request or Response body has been received. resource outgoing-response Represents an outgoing HTTP Response. resource outgoing-body Represents an outgoing HTTP Request or Response's Body. A body has both its contents - a stream of bytes - and a (possibly empty) set of trailers, inducating the full contents of the body have been sent. This resource represents the contents as an output-stream child resource, and the completion of the body (with optional trailers) with a static function that consumes the outgoing-body resource, and ensures that the user of this interface may not write to the body contents after the body has been finished. If the user code drops this resource, as opposed to calling the static method finish , the implementation should treat the body as incomplete, and that an error has occured. The implementation should propogate this error to the HTTP protocol by whatever means it has available, including: corrupting the body on the wire, aborting the associated Request, or sending a late status code for the Response. resource future-incoming-response Represents a future which may eventaully return an incoming HTTP Response, or an error. This resource is returned by the wasi:http/outgoing-handler interface to provide the HTTP Response corresponding to the sent Request. Functions http-error-code: func Attempts to extract a http-related error from the wasi:io error provided. Stream operations which return wasi:io/stream/stream-error::last-operation-failed have a payload of type wasi:io/error/error with more information about the operation that failed. This payload can be passed through to this function to see if there's http-related information about the error to return. Note that this function is fallible because not all io-errors are http-related errors. Params err : borrow< io-error > Return values option< error-code > [constructor]fields: func Construct an empty HTTP Fields. The resulting fields is mutable. Return values own< fields > [static]fields.from-list: func Construct an HTTP Fields. The resulting fields is mutable. The list represents each key-value pair in the Fields. Keys which have multiple values are represented by multiple entries in this list with the same key. The tuple is a pair of the field key, represented as a string, and Value, represented as a list of bytes. In a valid Fields, all keys and values are valid UTF-8 strings. However, values are not always well-formed, so they are represented as a raw list of bytes. An error result will be returned if any header or value was syntactically invalid, or if a header was forbidden. Params entries : list<( field-key , field-value )> Return values result<own< fields >, header-error > [method]fields.get: func Get all of the values corresponding to a key. If the key is not present in this fields , an empty list is returned. However, if the key is present but empty, this is represented by a list with one or more empty field-values present. Params self : borrow< fields > name : field-key Return values list< field-value > [method]fields.has: func Returns true when the key is present in this fields . If the key is syntactically invalid, false is returned. Params self : borrow< fields > name : field-key Return values bool [method]fields.set: func Set all of the values for a key. Clears any existing values for that key, if they have been set. Fails with header-error.immutable if the fields are immutable. Params self : borrow< fields > name : field-key value : list< field-value > Return values result<_, header-error > [method]fields.delete: func Delete all values for a key. Does nothing if no values for the key exist. Fails with header-error.immutable if the fields are immutable. Params self : borrow< fields > name : field-key Return values result<_, header-error > [method]fields.append: func Append a value for a key. Does not change or delete any existing values for that key. Fails with header-error.immutable if the fields are immutable. Params self : borrow< fields > name : field-key value : field-value Return values result<_, header-error > [method]fields.entries: func Retrieve the full set of keys and values in the Fields. Like the constructor, the list represents each key-value pair. The outer list represents each key-value pair in the Fields. Keys which have multiple values are represented by multiple entries in this list with the same key. Params self : borrow< fields > Return values list<( field-key , field-value )> [method]fields.clone: func Make a deep copy of the Fields. Equivelant in behavior to calling the fields constructor on the return value of entries . The resulting fields is mutable. Params self : borrow< fields > Return values own< fields > [method]incoming-request.method: func Returns the method of the incoming request. Params self : borrow< incoming-request > Return values method [method]incoming-request.path-with-query: func Returns the path with query parameters from the request, as a string. Params self : borrow< incoming-request > Return values option< string > [method]incoming-request.scheme: func Returns the protocol scheme from the request. Params self : borrow< incoming-request > Return values option< scheme > [method]incoming-request.authority: func Returns the authority from the request, if it was present. Params self : borrow< incoming-request > Return values option< string > [method]incoming-request.headers: func Get the headers associated with the request. The returned headers resource is immutable: set , append , and delete operations will fail with header-error.immutable . The headers returned are a child resource: it must be dropped before the parent incoming-request is dropped. Dropping this incoming-request before all children are dropped will trap. Params self : borrow< incoming-request > Return values own< headers > [method]incoming-request.consume: func Gives the incoming-body associated with this request. Will only return success at most once, and subsequent calls will return error. Params self : borrow< incoming-request > Return values result<own< incoming-body >> [constructor]outgoing-request: func Construct a new outgoing-request with a default method of GET , and none values for path-with-query , scheme , and authority . headers is the HTTP Headers for the Request. It is possible to construct, or manipulate with the accessor functions below, an outgoing-request with an invalid combination of scheme and authority , or headers which are not permitted to be sent. It is the obligation of the outgoing-handler.handle implementation to reject invalid constructions of outgoing-request . Params headers : own< headers > Return values own< outgoing-request > [method]outgoing-request.body: func Returns the resource corresponding to the outgoing Body for this Request. Returns success on the first call: the outgoing-body resource for this outgoing-request can be retrieved at most once. Subsequent calls will return error. Params self : borrow< outgoing-request > Return values result<own< outgoing-body >> [method]outgoing-request.method: func Get the Method for the Request. Params self : borrow< outgoing-request > Return values method [method]outgoing-request.set-method: func Set the Method for the Request. Fails if the string present in a method.other argument is not a syntactically valid method. Params self : borrow< outgoing-request > method : method Return values result [method]outgoing-request.path-with-query: func Get the combination of the HTTP Path and Query for the Request. When none , this represents an empty Path and empty Query. Params self : borrow< outgoing-request > Return values option< string > [method]outgoing-request.set-path-with-query: func Set the combination of the HTTP Path and Query for the Request. When none , this represents an empty Path and empty Query. Fails is the string given is not a syntactically valid path and query uri component. Params self : borrow< outgoing-request > path-with-query : option< string > Return values result [method]outgoing-request.scheme: func Get the HTTP Related Scheme for the Request. When none , the implementation may choose an appropriate default scheme. Params self : borrow< outgoing-request > Return values option< scheme > [method]outgoing-request.set-scheme: func Set the HTTP Related Scheme for the Request. When none , the implementation may choose an appropriate default scheme. Fails if the string given is not a syntactically valid uri scheme. Params self : borrow< outgoing-request > scheme : option< scheme > Return values result [method]outgoing-request.authority: func Get the HTTP Authority for the Request. A value of none may be used with Related Schemes which do not require an Authority. The HTTP and HTTPS schemes always require an authority. Params self : borrow< outgoing-request > Return values option< string > [method]outgoing-request.set-authority: func Set the HTTP Authority for the Request. A value of none may be used with Related Schemes which do not require an Authority. The HTTP and HTTPS schemes always require an authority. Fails if the string given is not a syntactically valid uri authority. Params self : borrow< outgoing-request > authority : option< string > Return values result [method]outgoing-request.headers: func Get the headers associated with the Request. The returned headers resource is immutable: set , append , and delete operations will fail with header-error.immutable . This headers resource is a child: it must be dropped before the parent outgoing-request is dropped, or its ownership is transfered to another component by e.g. outgoing-handler.handle . Params self : borrow< outgoing-request > Return values own< headers > [constructor]request-options: func Construct a default request-options value. Return values own< request-options > [method]request-options.connect-timeout: func The timeout for the initial connect to the HTTP Server. Params self : borrow< request-options > Return values option< duration > [method]request-options.set-connect-timeout: func Set the timeout for the initial connect to the HTTP Server. An error return value indicates that this timeout is not supported. Params self : borrow< request-options > duration : option< duration > Return values result [method]request-options.first-byte-timeout: func The timeout for receiving the first byte of the Response body. Params self : borrow< request-options > Return values option< duration > [method]request-options.set-first-byte-timeout: func Set the timeout for receiving the first byte of the Response body. An error return value indicates that this timeout is not supported. Params self : borrow< request-options > duration : option< duration > Return values result [method]request-options.between-bytes-timeout: func The timeout for receiving subsequent chunks of bytes in the Response body stream. Params self : borrow< request-options > Return values option< duration > [method]request-options.set-between-bytes-timeout: func Set the timeout for receiving subsequent chunks of bytes in the Response body stream. An error return value indicates that this timeout is not supported. Params self : borrow< request-options > duration : option< duration > Return values result [static]response-outparam.set: func Set the value of the response-outparam to either send a response, or indicate an error. This method consumes the response-outparam to ensure that it is called at most once. If it is never called, the implementation will respond with an error. The user may provide an error to response to allow the implementation determine how to respond with an HTTP error response. Params param : own< response-outparam > response : result<own< outgoing-response >, error-code > [method]incoming-response.status: func Returns the status code from the incoming response. Params self : borrow< incoming-response > Return values status-code [method]incoming-response.headers: func Returns the headers from the incoming response. The returned headers resource is immutable: set , append , and delete operations will fail with header-error.immutable . This headers resource is a child: it must be dropped before the parent incoming-response is dropped. Params self : borrow< incoming-response > Return values own< headers > [method]incoming-response.consume: func Returns the incoming body. May be called at most once. Returns error if called additional times. Params self : borrow< incoming-response > Return values result<own< incoming-body >> [method]incoming-body.stream: func Returns the contents of the body, as a stream of bytes. Returns success on first call: the stream representing the contents can be retrieved at most once. Subsequent calls will return error. The returned input-stream resource is a child: it must be dropped before the parent incoming-body is dropped, or consumed by incoming-body.finish . This invariant ensures that the implementation can determine whether the user is consuming the contents of the body, waiting on the future-trailers to be ready, or neither. This allows for network backpressure is to be applied when the user is consuming the body, and for that backpressure to not inhibit delivery of the trailers if the user does not read the entire body. Params self : borrow< incoming-body > Return values result<own< input-stream >> [static]incoming-body.finish: func Takes ownership of incoming-body , and returns a future-trailers . This function will trap if the input-stream child is still alive. Params this : own< incoming-body > Return values own< future-trailers > [method]future-trailers.get: func Returns a pollable which becomes ready when either the trailers have been received, or an error has occured. When this pollable is ready, the get method will return some . subscribe: func() -> pollable; // Hermes does NOT support poll Returns the contents of the trailers, or an error which occured, once the future is ready. The outer option represents future readiness. Users can wait on this option to become some using the subscribe method. The outer result is used to retrieve the trailers or error at most once. It will be success on the first call in which the outer option is some , and error on subsequent calls. The inner result represents that either the HTTP Request or Response body, as well as any trailers, were received successfully, or that an error occured receiving them. The optional trailers indicates whether or not trailers were present in the body. When some trailers are returned by this method, the trailers resource is immutable, and a child. Use of the set , append , or delete methods will return an error, and the resource must be dropped before the parent future-trailers is dropped. Params self : borrow< future-trailers > Return values option<result<result<option<own< trailers >>, error-code >>> [constructor]outgoing-response: func Construct an outgoing-response , with a default status-code of 200 . If a different status-code is needed, it must be set via the set-status-code method. headers is the HTTP Headers for the Response. Params headers : own< headers > Return values own< outgoing-response > [method]outgoing-response.status-code: func Get the HTTP Status Code for the Response. Params self : borrow< outgoing-response > Return values status-code [method]outgoing-response.set-status-code: func Set the HTTP Status Code for the Response. Fails if the status-code given is not a valid http status code. Params self : borrow< outgoing-response > status-code : status-code Return values result [method]outgoing-response.headers: func Get the headers associated with the Request. The returned headers resource is immutable: set , append , and delete operations will fail with header-error.immutable . This headers resource is a child: it must be dropped before the parent outgoing-request is dropped, or its ownership is transfered to another component by e.g. outgoing-handler.handle . Params self : borrow< outgoing-response > Return values own< headers > [method]outgoing-response.body: func Returns the resource corresponding to the outgoing Body for this Response. Returns success on the first call: the outgoing-body resource for this outgoing-response can be retrieved at most once. Subsequent calls will return error. Params self : borrow< outgoing-response > Return values result<own< outgoing-body >> [method]outgoing-body.write: func Returns a stream for writing the body contents. The returned output-stream is a child resource: it must be dropped before the parent outgoing-body resource is dropped (or finished), otherwise the outgoing-body drop or finish will trap. Returns success on the first call: the output-stream resource for this outgoing-body may be retrieved at most once. Subsequent calls will return error. Params self : borrow< outgoing-body > Return values result<own< output-stream >> [static]outgoing-body.finish: func Finalize an outgoing body, optionally providing trailers. This must be called to signal that the response is complete. If the outgoing-body is dropped without calling outgoing-body.finalize , the implementation should treat the body as corrupted. Fails if the body's outgoing-request or outgoing-response was constructed with a Content-Length header, and the contents written to the body (via write ) does not match the value given in the Content-Length. Params this : own< outgoing-body > trailers : option<own< trailers >> Return values result<_, error-code > [method]future-incoming-response.get: func /// Returns a pollable which becomes ready when either the Response has /// been received, or an error has occured. When this pollable is ready, /// the get method will return some . subscribe: func() -> pollable; */ Returns the incoming HTTP Response, or an error, once one is ready. The outer option represents future readiness. Users can wait on this option to become some using the subscribe method. The outer result is used to retrieve the response or error at most once. It will be success on the first call in which the outer option is some , and error on subsequent calls. The inner result represents that either the incoming HTTP Response status and headers have recieved successfully, or that an error occured. Errors may also occur while consuming the response body, but those will be reported by the incoming-body and its output-stream child. Params self : borrow< future-incoming-response > Return values option<result<result<own< incoming-response >, error-code >>> Import interface wasi:http/outgoing-handler@0.2.0 This interface defines a handler of outgoing HTTP Requests. It should be imported by components which wish to make HTTP Requests. Types type outgoing-request outgoing-request #### `type request-options` [`request-options`](#request_options) #### `type future-incoming-response` [`future-incoming-response`](#future_incoming_response) #### `type error-code` [`error-code`](#error_code) ---- Functions handle: func This function is invoked with an outgoing HTTP Request, and it returns a resource future-incoming-response which represents an HTTP Response which may arrive in the future. The options argument accepts optional parameters for the HTTP protocol's transport layer. This function may return an error if the outgoing-request is invalid or not allowed to be made. Otherwise, protocol errors are reported through the future-incoming-response . Params request : own< outgoing-request > options : option<own< request-options >> Return values result<own< future-incoming-response >, error-code > Import interface hermes:binary/api Binary Data API Binary Data types and functions. Permissions This API is ALWAYS available. cspell: words Binary API Interface - Imports ONLY Types type bstr bstr Binary String (bstr) is a list of bytes. This type is used to indicate the data is an arbitrary array of bytes. tuple b128 128 bit value Tuple Fields 0 : u64 1 : u64 tuple b256 256 bit value Tuple Fields 0 : u64 1 : u64 2 : u64 3 : u64 tuple b512 512 bit value Tuple Fields 0 : u64 1 : u64 2 : u64 3 : u64 4 : u64 5 : u64 6 : u64 7 : u64 Import interface hermes:cbor/api CBOR API CBOR Data types and functions. Permissions This API is ALWAYS available. cspell: words CBOR API Interface - Imports ONLY Types type bstr bstr #### `type cbor` [`bstr`](#bstr) CBOR is a binary cbor data type. This type is used to indicate the binary array MUST be CBOR data. Import interface hermes:cardano/api Cardano Blockchain API Cardano Blockchain API functionality exposed to the Hermes WASM Modules. Permissions This API is ALWAYS available. Cardano API Interface Types type cbor cbor #### `type cardano-block` [`cbor`](#cbor) Cardano Blocks are CBOR Data type cardano-txn cbor Cardano Transactions are CBOR Data enum cardano-blockchain-id The ID of the blockchain to interact with. Enum Cases mainnet preprod Cardano Mainnet preview Cardano Preprod Network local-test-blockchain Cardano Preview Network variant slot The Slot number to interact with Variant Cases genesis slot-no : u64 The very start of the blockchain. tip A particular slot number. continue The TIP of the blockchain. enum fetch-error Errors that can happen fetching/subscribing to blocks Enum Cases blockchain-not-available invalid-slot The blockchain requested is not available. enum txn-error Errors that can occur when posting transactions. Enum Cases blockchain-not-available malformed-transaction The blockchain requested is not available. post-txn-not-allowed The transaction is not well formed, and can not be posted. flags unsubscribe-options Options used to unsubscribe from the blockchain data flow. Flags members block : transaction : Stop receiving block data rollback : Stop receiving txn data stop : Stop receiving rollback data Functions subscribe-blocks: func Subscribe to the Blockchain block data. Parameters net : The blockchain network to fetch block from, and subscribe to. whence : Where to start fetching blocks from. Returns ok(u64) : The slot we are synching from now. error(fetch-error) : If an error occured. Notes If the blockchain is not yet syncing, it will start, from the requested slot. If the blockchain is not yet syncing, and whence == continue then the blockchain will not be synced from, the calling module will only be subscribed for block events. If the blockchain is already syncing, the sync will stop and restart, unless whence == continue . When whence == continue the blockchain will keep syncing from where it is at, and this module will be subscribed to block updates. whence == stop will prevent the blockchain syncing, and the caller will be unsubscribed. Params net : cardano-blockchain-id whence : slot Return values result< u64 , fetch-error > unsubscribe: func Unsubscribe from the blockchain events listed. Parameters events : The events to unsubscribe from (and optionally stop the blockchain follower). Notes This only unsubscribes from the events. The option stop MUST be set to actually stop fetching data from the blockchain once started. stop can be set without unsubscribing, and this will interrupt the flow of blockchain data. After stop , subscribe-blocks(?, continue) would cause blockchain sync to continue from the last block received. This would result in the last block being sent as an event twice, once before the stop and once after the continue . Params events : unsubscribe-options subscribe-txn: func Subscribe to transaction data events, does not alter the blockchain sync in anyway. Parameters net : The blockchain network to subscribe to txn events from. Params net : cardano-blockchain-id subscribe-rollback: func Subscribe to blockchain rollback events, does not alter the blockchain sync in anyway. Parameters net : The blockchain network to subscribe to txn events from. Notes After a rollback event, the blockchain sync will AUTOMATICALLY start sending block data from the rollback point. No action is required to actually follow the rollback, unless the default behavior is not desired. Params net : cardano-blockchain-id fetch-block: func Fetch a block from the requested blockchain at the requested slot. Parameters net : The blockchain network to get a block from. whence : Which block to get. Returns cardano-block : The block requested. fetch-error : An error if the block can not be fetched. Notes Fetching a block does not require the blockchain to be subscribed, or for blocks to be being followed and generating events. It also will not alter the automatic fetching of blocks in any way, and happens in parallel to automated block fetch. Params net : cardano-blockchain-id whence : slot Return values result< cardano-block , fetch-error > get-txns: func Get transactions from a block. This can be used to easily extract all transactions from a complete block. Parameters block : The blockchain data to extract transactions from. Returns a list of all transactions in the block, in the order they appear in the block. Notes This function exists to support fetch-block . Transactions from subscribed block events, should be processed as transaction events. Params block : cardano-block Return values list< cardano-txn > post-txn: func Post a transactions to the blockchain. This can be used to post a pre-formed transaction to the required blockchain. Parameters net : The blockchain to post the transaction to. txn : The transaction data, ready to submit. Returns An error if the transaction can not be posted. Notes This is proposed functionality, and is not yet active. All calls to this function will return post-txn-not-allowed error. Params net : cardano-blockchain-id txn : cardano-txn Return values result<_, txn-error > Import interface hermes:cron/api Cron API Allow time based scheduling of events. Permissions This API is ALWAYS available. cspell: words crontabs mkcron retrigger retriggering CRON API Interface - Imports ONLY Types type instant instant #### `type cron-event-tag` `string` A Tag used to mark a delivered cron event. type cron-sched string A cron schedule in crontab format. record cron-tagged A tagged crontab entry It is valid for multiple crontab entries at the same time to have different tags. It is valid for crontab entries at different times to have the same tag. BUT there can only ever be 1 crontab entry at a specified time with a specified tag. ie, when + tag is uniquely identifying of every crontab entry. See: crontab.5 man page for details on cron schedule format. Record Fields when : cron-sched The crontab entry in standard cron format. The Time is ALWAYS relative to UTC and does not account for local time. If Localtime adjustment is required it must be handled by the module. tag : cron-event-tag The tag associated with the crontab entry. variant cron-component A discreet time entry used to help convert numeric times into crontab entries. Variant Cases all Maps to `*` in a cron schedule (ie, match all) at : u8 Match an absolute time/date range : ( u8 , u8 ) Match an inclusive list of time/date values. type cron-time cron-time A list of cron time components Functions add: func Schedule Recurrent CRON event Cron events will be delivered to the on-cron event handler. Parameters entry : The crontab entry to add. when : When the event triggers. Standard crontab format. tag : A tag which will accompany the triggered event. retrigger : true : The event will re-trigger every time the crontab entry matches until cancelled. false : The event will automatically cancel after it is generated once. Returns true : Crontab added successfully. (Or the crontab event already exists) false : Crontab failed to be added. Note: If the crontab entry already exists, the retrigger flag can be changed by calling this function. This could be useful where a retriggering crontab event is desired to be stopped, but ONLY after it has triggered once more. Params entry : cron-tagged retrigger : bool Return values bool delay: func Schedule A Single cron event after a fixed delay. Allows for easy timed wait events to be delivered without requiring datetime calculations or formatting cron entries. Parameters duration : How many nanoseconds to delay. The delay will be AT LEAST this long. tag : A tag which will accompany the triggered event. Returns true : Crontab added successfully. false : Crontab failed to be added. Note: This is a convenience function which will automatically calculate the crontab entry needed to trigger the event after the requested duration . It is added as a non-retriggering event. Listing the crontabs after this call will list the delay in addition to all other crontab entries. Params duration : instant tag : cron-event-tag Return values bool ls: func List currently active cron schedule. Allows for management of scheduled cron events. Parameters tag : Optional, the tag to limit the list to. If none then all crons listed. Returns A list of tuples containing the scheduled crontabs and their tags, along with the current retrigger flag. The list is sorted from most crontab that will trigger soonest to latest. Crontabs are only listed once, in the case where a crontab may be scheduled may times before a later one. 0 - cron-tagged - The Tagged crontab event. 1 - bool - The state of the retrigger flag. Params tag : option< cron-event-tag > Return values list<( cron-tagged , bool )> rm: func Remove the requested crontab. Allows for management of scheduled cron events. Parameters when : The crontab entry to add. Standard crontab format. tag : A tag which will accompany the triggered event. Returns true : The requested crontab was deleted and will not trigger. false : The requested crontab does not exist. Params entry : cron-tagged Return values bool mkcron: func Make a crontab entry from individual time values. Crates the properly formatted cron entry from numeric cron time components. Convenience function to make building cron strings simpler when they are calculated from data. Parameters dow - DayOfWeek (0-7, 0 or 7 = Sunday) month - Month of the year (1-12, 1 = January) day - Day in the month (1-31) hour - Hour in the day (0-23) minute - Minute in the hour (0-59) Returns A matching cron-sched ready for use in the cron functions above. Note: No checking is done to determine if the requested date is valid. If a particular component is out of its allowable range it will be silently clamped within the allowable range of each parameter. Redundant entries will be removed. For example specifying a month as 3 and 2-4 will remove the individual month and only produce the range. Params dow : cron-time month : cron-time day : cron-time hour : cron-time minute : cron-time Return values cron-sched Import interface hermes:crypto/api Crypto API Crypto API functionality exposed to the Hermes WASM Modules. Permissions This API is ALWAYS available. Crypto API Interface Types type bstr bstr #### `type b256` [`b256`](#b256) #### `type b512` [`b512`](#b512) #### `type ed25519-bip32-private-key` [`b256`](#b256) ed25519-bip32 Private Key type ed25519-bip32-extended-private-key b512 ed25519-bip32 Extended Private Key type ed25519-bip32-public-key b256 ed25519-bip32 Public Key type ed25519-bip32-signature b256 ed25519-bip32 Signature resource ed25519-bip32 Functions [constructor]ed25519-bip32: func Create a new ED25519-BIP32 Crypto resource Parameters private_key : The key to use, if not supplied one is RANDOMLY generated. Params private-key : option< ed25519-bip32-private-key > Return values own< ed25519-bip32 > [method]ed25519-bip32.public-key: func Get the public key for this private key. Params self : borrow< ed25519-bip32 > Return values ed25519-bip32-public-key [method]ed25519-bip32.sign-data: func Sign data with the Private key, and return it. Parameters data : The data to sign. Params self : borrow< ed25519-bip32 > data : bstr Return values ed25519-bip32-signature [method]ed25519-bip32.check-sig: func Check a signature on a set of data. Parameters data : The data to check. sig : The signature to check. Returns true : Signature checked OK. false : Signature check failed. Params self : borrow< ed25519-bip32 > data : bstr sig : ed25519-bip32-signature Return values bool [method]ed25519-bip32.derive: func Derive a new private key from the current private key. Note: uses BIP32 HD key derivation. Params self : borrow< ed25519-bip32 > Return values own< ed25519-bip32 > [static]ed25519-bip32.gen-private-key: func Create a new RANDOM private key. Note, this does not need to be used, as the constructor will do this automatically. Return values ed25519-bip32-private-key Import interface hermes:hash/api Data Hash API Hashing Data types and functions. Permissions This API is ALWAYS available. Hashing API Interface - Imports ONLY Types type bstr bstr #### `enum errno` Errors that can occur during hashing. Enum Cases key-too-big hash-too-big The ley is larger than supported by the hash function. Functions blake2s: func BLAKE2s Hash Function Hash a binary buffer with BLAKE2s. Parameters buf : The binary data buffer to hash. outlen : Optional. The size of the digest. If the outlen is not defined, it defaults to 32. key : Optional. The key to use with the hash. If not defined, the hash is not keyed. Should not be > 32 bytes. Returns Either a buffer the size requested, with the hash. Or an error: key_too_big if key is specified and is > 32 bytes. hash_too_big if outlen is specified and is > 32 bytes. Note: key length is checked before outlen so if both sizes are invalid, only key_too_big will be returned. Params buf : bstr outlen : option< u8 > key : option< bstr > Return values result< bstr , errno > blake2b: func BLAKE2b Hash Function Hash a binary buffer with BLAKE2b. Parameters buf : The binary data buffer to hash. outlen : Optional. The size of the digest. If the outlen is not defined, it defaults to 64. key : Optional. The key to use with the hash. If not defined, the hash is not keyed. Should not be > 64 bytes. Returns Either a buffer the size requested, with the hash. Or an error: key_too_big if key is specified and is > 64 bytes. hash_too_big if outlen is specified and is > 64 bytes. Note: key length is checked before outlen so if both sizes are invalid, only key_too_big will be returned. Params buf : bstr outlen : option< u8 > key : option< bstr > Return values result< bstr , errno > blake3: func BLAKE3 Hash Function Hash a binary buffer with BLAKE3. Parameters buf : The binary data buffer to hash. outlen : Optional. The size of the digest. If the outlen is not defined, it defaults to 32. key : Optional. The key to use with the hash. If not defined, the hash is not keyed. Should not be > 32 bytes. Returns Either a buffer the size requested, with the hash. Or an error: key_too_big if key is specified and is > 32 bytes. hash_too_big if outlen is specified and is > 32 bytes. Note: key length is checked before outlen so if both sizes are invalid, only key_too_big will be returned. Params buf : bstr outlen : option< u8 > key : option< bstr > Return values result< bstr , errno > Import interface hermes:json/api JSON API JSON Data types and functions. Permissions This API is ALWAYS available. cspell: words JSON API Interface - Imports ONLY Types type json string JSON is just a string. This type is used to indicate the string MUST be properly formatted JSON. Import interface hermes:kv-store/api Interface to local in-memory K-V database instance. This API is atomic. It is safe to call it from multiple wasm modules in the same application. The atomic nature of these calls allows multiple wasm modules to communicate without data race conditions through the KV store. These are primitive operations, and the caller is expected to provide more complex semaphore/mutex logic on top of these building blocks, if required. There is no support for multi-key atomic operations, the application is required to manage multi-key updates given the functionality provided here. For example, a single Key could be used to \"Lock\" a set of other keys. There is no protection against deadlock, if a key is used as a semaphore/mutex then it is the responsibility of the applications modules to properly manage them. Types type bstr bstr #### `type cbor` [`cbor`](#cbor) #### `type json` [`json`](#json) #### `variant kv-values` A time and date in seconds plus nanoseconds. Variant Cases kv-string : string kv-s64 : s64 A String kv-u64 : u64 Just use the largest signed integer type supported kv-f64 : float64 Just use the largest integer type supported kv-bstr : bstr Just use the largest float type supported kv-cbor : cbor A byte string kv-json : json CBOR data Functions kv-set: func Set a value in the local key-value store Setting None will cause the Key to be deleted from the KV store. Params key : string value : option< kv-values > kv-get-default: func Get a value from the local key-value store Returns the default if not set. Params key : string default : option< kv-values > Return values option< kv-values > kv-get: func Get a value from the local key-value store Returns None if the Key does not exist in the KV Store. This is a convenience function, and is equivalent to kv-get-default(key, none) Params key : string Return values option< kv-values > kv-get-set: func Get a value, and then set it (Atomic) Setting None will cause the Key to be deleted from the KV store. Params key : string value : option< kv-values > Return values option< kv-values > kv-add: func Get a value, and then add to it (Atomic) Adding to a string will concatenate the string. String concatenation will only occur up to the maximum possible size of a string value. Concatenation beyond the maximum size will result in truncation. Adding to a numeric will have the expected behavior (rounded to nearest if necessary). The original type does not change, so: float64 + u64 = float64 . s64 + float64 = s64 If the value overflows or under-flows it will saturate at the limit. This behavior allows us to decrement values by using the signed version, so u64(10) + s64(-5) = u64(5)) If a string is added to a numeric, nothing happens. If a numeric is added to a string, it is converted to a string first, and then concatenated Note: There will be no spaces added. So \"My string\" + u32(77) = \"My string77\" Params key : string value : option< kv-values > Return values option< kv-values > kv-cas: func Check if the Key equals a test value (exact match) and if it does, store the new value. In all cases, the current value is returned. If the types are NOT the same, the comparison will fail, even if the values are equivalent. For example: u64(7) != s64(7) , float64(-1) != s64(-1) . Params key : string test : option< kv-values > value : option< kv-values > Return values option< kv-values > kv-subscribe: func Subscribe to any updates made to a particular Key. After this call, this module will receive Key Update events when a key is written. It returns the current value of the Key and None if it is not set. Params key : string Return values option< kv-values > kv-unsubscribe: func Unsubscribe to any updates made to a particular Key. After this call, this module will no longer receive Key Update events when a key is written. It returns the current value of the Key and None if it is not set. Params key : string Return values option< kv-values > Import interface hermes:localtime/api Localtime API Localtime API functionality exposed to the Hermes WASM Modules. Permissions This API is ALWAYS available. Logging API Interface Types type datetime datetime #### `type timezone` `string` The timezone we are localized for. record localtime Time in localtime format. Record Fields year : u64 month : u8 Year dow : u8 Month (0-11) day : u8 Day of week (0-6) hh : u8 Day (1-31) mm : u8 Hour (0-23) ss : u8 Minute (0-59) ns : u32 Second (0-59) tz : timezone Nanoseconds enum errno Errors that can occur converting times Enum Cases invalid-localtime unknown-timezone year-out-of-range Functions get-localtime: func Get localtime from a datetime or now. Parameters when : The datetime we want to convert (Optional, if not set it will convert now ). tz : The timezone to use. (Optional, if not set uses the local machines configured local timezone.) Returns localtime : the converted time. errno : An error indicating why conversion failed. Params when : option< datetime > tz : option< timezone > Return values result< localtime , errno > alt-localtime: func Get a new localtime from a localtime, by recalculating time for a new timezone. Parameters time : The localtime to convert. tz : The timezone to use. (Optional, if not set uses the local machines configured local timezone.) Returns localtime : the converted time. errno : An error indicating why conversion failed. Params time : localtime tz : option< timezone > Return values result< localtime , errno > get-datetime: func Get a datetime from a localtime. Parameters time : The localtime to convert. Returns datetime : the converted time. errno : An error indicating why conversion failed. Params time : localtime Return values result< datetime , errno > Import interface hermes:logging/api Logging API Logging API functionality exposed to the Hermes WASM Modules. Permissions This API is ALWAYS available. Logging API Interface Types type json json #### `enum level` The supported logging levels Enum Cases debug Debug Log Level trace Tracing Log level info General Informational Log Level warn Warning about something that might be a problem. error A very serious error Functions log: func Generate a Log The Hermes API will add extra information to the log, such as the instance of the webasm module being logged. The Webasm module does not need to concern itself with this kind of information, and should log as if it is the only instance. It also should not log any webasm shared context, except where it is relevant to the log message itself. Parameters level : The log level this message is for. file : The name of the src file being logged from. (Optional) fn : The function within the file being logged from. (Optional) line : The line of code the log was generated from. (Optional) col : The column of code the log was generated from. (Optional) ctx : The logging context. (Should have no newlines or formatting). msg : A Single line message to be logged. (Should have no newlines or formatting). data : A Free form json payload that will be logged with the msg. This must be valid JSON. Notes The data parameter may contain a record of the format: { \"bt\" : [ <string> , <string> ] } The logger will interpret this as a backtrace where each entry in the array is one line of the backtrace. The format of the backtrace lines is up to the webasm module generating the log. The individual backtrace entries may contain line breaks if the backtrace entry is multiline. Multiline backtrace entries should be de-dented, relative to the first line. This is to allow the display to properly format multiline entries. This format is designed to keep the broadest flexibility for multiple languages capabilities. The backtrace must be sorted with most recent lines of the backtrace occurring first in the array. Backtrace must be contained in a single log call. Multiple log calls will be considered independent logs. Params level : level file : option< string > fn : option< string > line : option< u32 > col : option< u32 > ctx : option< string > msg : string data : option< json > Export interface wasi:http/incoming-handler@0.2.0 Types type incoming-request incoming-request #### `type response-outparam` [`response-outparam`](#response_outparam) ---- Functions handle: func This function is invoked with an incoming HTTP Request, and a resource response-outparam which provides the capability to reply with an HTTP Response. The response is sent by calling the response-outparam.set method, which allows execution to continue after the response has been sent. This enables both streaming to the response body, and performing other work. The implementor of this function must write a response to the response-outparam before returning, or else the caller will respond with an error on its behalf. Params request : own< incoming-request > response-out : own< response-outparam > Export interface hermes:cardano/event-on-block Types type cardano-blockchain-id cardano-blockchain-id #### `type cardano-block` [`cardano-block`](#cardano_block) #### `flags block-src` Flags members tip : node : mithril : Functions on-cardano-block: func Triggered when a cardano block event fires. The module must export this interface to use it. Parameters blockchain : The blockchain id the block originated from. block : This raw CBOR block data. source : Source information about where the block came from, and if we are at tip or not. Returns: Nothing. Params blockchain : cardano-blockchain-id block : cardano-block source : block-src Export interface hermes:cardano/event-on-txn Types type cardano-blockchain-id cardano-blockchain-id #### `type cardano-txn` [`cardano-txn`](#cardano_txn) ---- Functions on-cardano-txn: func Triggered when a cardano transaction event fires. The module must export this interface to use it. Parameters blockchain : The blockchain id the block originated from. slot : The slot the transaction is in. txn-index : The offset in the block this transaction is at. txn : The raw transaction data itself. Returns: Nothing. Params blockchain : cardano-blockchain-id slot : u64 txn-index : u32 txn : cardano-txn Export interface hermes:cardano/event-on-rollback Types type cardano-blockchain-id cardano-blockchain-id ---- Functions on-cardano-rollback: func Triggered when a cardano rollback event fires. The module must export this interface to use it. Parameters blockchain : The blockchain id the rollback originated from. slot : The slot the rollback is targeting. (The next block event will be from this slot.) Returns: Nothing. Params blockchain : cardano-blockchain-id slot : u64 Export interface hermes:cron/event Types type cron-event-tag cron-event-tag #### `type cron-tagged` [`cron-tagged`](#cron_tagged) ---- Functions on-cron: func Triggered when a cron event fires. This event is only ever generated for the application that added the cron job. The module must export this interface to use it. Parameters event : The tagged cron event that was triggered. last : This cron event will not retrigger. Returns: true - retrigger. (Ignored if the cron event is final ). false - stop the cron. Params event : cron-tagged last : bool Return values bool Export interface hermes:init/event Functions init: func Perform application start up initialization. This will only ever be called once when the application this module is a part of is started. The module must export this interface to use it. Returns: true - Initialization is successful, the application may commence. false - Fatal error during Initialization. DO NOT START APPLICATION. Return values bool Export interface hermes:kv-store/event Types type kv-values kv-values ---- Functions kv-update: func A Subscribed key has updated. This will only ever be called if the module has subscribed to updates using kv-subscribe Returns: Nothing. Params key : string value : kv-values","title":"Hermes"},{"location":"api/wasi-hermes/hermes/binary/","text":"World all Imports: interface hermes:binary/api Import interface hermes:binary/api Binary Data API Binary Data types and functions. Permissions This API is ALWAYS available. cspell: words Binary API Interface - Imports ONLY Types type bstr bstr Binary String (bstr) is a list of bytes. This type is used to indicate the data is an arbitrary array of bytes. tuple b128 128 bit value Tuple Fields 0 : u64 1 : u64 tuple b256 256 bit value Tuple Fields 0 : u64 1 : u64 2 : u64 3 : u64 tuple b512 512 bit value Tuple Fields 0 : u64 1 : u64 2 : u64 3 : u64 4 : u64 5 : u64 6 : u64 7 : u64","title":"Binary"},{"location":"api/wasi-hermes/hermes/cardano/","text":"World all Imports: interface hermes:binary/api interface hermes:cbor/api interface hermes:cardano/api Exports: interface hermes:cardano/event-on-block interface hermes:cardano/event-on-txn interface hermes:cardano/event-on-rollback Import interface hermes:binary/api Binary Data API Binary Data types and functions. Permissions This API is ALWAYS available. cspell: words Binary API Interface - Imports ONLY Types type bstr bstr Binary String (bstr) is a list of bytes. This type is used to indicate the data is an arbitrary array of bytes. tuple b128 128 bit value Tuple Fields 0 : u64 1 : u64 tuple b256 256 bit value Tuple Fields 0 : u64 1 : u64 2 : u64 3 : u64 tuple b512 512 bit value Tuple Fields 0 : u64 1 : u64 2 : u64 3 : u64 4 : u64 5 : u64 6 : u64 7 : u64 Import interface hermes:cbor/api CBOR API CBOR Data types and functions. Permissions This API is ALWAYS available. cspell: words CBOR API Interface - Imports ONLY Types type bstr bstr #### `type cbor` [`bstr`](#bstr) CBOR is a binary cbor data type. This type is used to indicate the binary array MUST be CBOR data. Import interface hermes:cardano/api Cardano Blockchain API Cardano Blockchain API functionality exposed to the Hermes WASM Modules. Permissions This API is ALWAYS available. Cardano API Interface Types type cbor cbor #### `type cardano-block` [`cbor`](#cbor) Cardano Blocks are CBOR Data type cardano-txn cbor Cardano Transactions are CBOR Data enum cardano-blockchain-id The ID of the blockchain to interact with. Enum Cases mainnet preprod Cardano Mainnet preview Cardano Preprod Network local-test-blockchain Cardano Preview Network variant slot The Slot number to interact with Variant Cases genesis slot-no : u64 The very start of the blockchain. tip A particular slot number. continue The TIP of the blockchain. enum fetch-error Errors that can happen fetching/subscribing to blocks Enum Cases blockchain-not-available invalid-slot The blockchain requested is not available. enum txn-error Errors that can occur when posting transactions. Enum Cases blockchain-not-available malformed-transaction The blockchain requested is not available. post-txn-not-allowed The transaction is not well formed, and can not be posted. flags unsubscribe-options Options used to unsubscribe from the blockchain data flow. Flags members block : transaction : Stop receiving block data rollback : Stop receiving txn data stop : Stop receiving rollback data Functions subscribe-blocks: func Subscribe to the Blockchain block data. Parameters net : The blockchain network to fetch block from, and subscribe to. whence : Where to start fetching blocks from. Returns ok(u64) : The slot we are synching from now. error(fetch-error) : If an error occured. Notes If the blockchain is not yet syncing, it will start, from the requested slot. If the blockchain is not yet syncing, and whence == continue then the blockchain will not be synced from, the calling module will only be subscribed for block events. If the blockchain is already syncing, the sync will stop and restart, unless whence == continue . When whence == continue the blockchain will keep syncing from where it is at, and this module will be subscribed to block updates. whence == stop will prevent the blockchain syncing, and the caller will be unsubscribed. Params net : cardano-blockchain-id whence : slot Return values result< u64 , fetch-error > unsubscribe: func Unsubscribe from the blockchain events listed. Parameters events : The events to unsubscribe from (and optionally stop the blockchain follower). Notes This only unsubscribes from the events. The option stop MUST be set to actually stop fetching data from the blockchain once started. stop can be set without unsubscribing, and this will interrupt the flow of blockchain data. After stop , subscribe-blocks(?, continue) would cause blockchain sync to continue from the last block received. This would result in the last block being sent as an event twice, once before the stop and once after the continue . Params events : unsubscribe-options subscribe-txn: func Subscribe to transaction data events, does not alter the blockchain sync in anyway. Parameters net : The blockchain network to subscribe to txn events from. Params net : cardano-blockchain-id subscribe-rollback: func Subscribe to blockchain rollback events, does not alter the blockchain sync in anyway. Parameters net : The blockchain network to subscribe to txn events from. Notes After a rollback event, the blockchain sync will AUTOMATICALLY start sending block data from the rollback point. No action is required to actually follow the rollback, unless the default behavior is not desired. Params net : cardano-blockchain-id fetch-block: func Fetch a block from the requested blockchain at the requested slot. Parameters net : The blockchain network to get a block from. whence : Which block to get. Returns cardano-block : The block requested. fetch-error : An error if the block can not be fetched. Notes Fetching a block does not require the blockchain to be subscribed, or for blocks to be being followed and generating events. It also will not alter the automatic fetching of blocks in any way, and happens in parallel to automated block fetch. Params net : cardano-blockchain-id whence : slot Return values result< cardano-block , fetch-error > get-txns: func Get transactions from a block. This can be used to easily extract all transactions from a complete block. Parameters block : The blockchain data to extract transactions from. Returns a list of all transactions in the block, in the order they appear in the block. Notes This function exists to support fetch-block . Transactions from subscribed block events, should be processed as transaction events. Params block : cardano-block Return values list< cardano-txn > post-txn: func Post a transactions to the blockchain. This can be used to post a pre-formed transaction to the required blockchain. Parameters net : The blockchain to post the transaction to. txn : The transaction data, ready to submit. Returns An error if the transaction can not be posted. Notes This is proposed functionality, and is not yet active. All calls to this function will return post-txn-not-allowed error. Params net : cardano-blockchain-id txn : cardano-txn Return values result<_, txn-error > Export interface hermes:cardano/event-on-block Types type cardano-blockchain-id cardano-blockchain-id #### `type cardano-block` [`cardano-block`](#cardano_block) #### `flags block-src` Flags members tip : node : mithril : Functions on-cardano-block: func Triggered when a cardano block event fires. The module must export this interface to use it. Parameters blockchain : The blockchain id the block originated from. block : This raw CBOR block data. source : Source information about where the block came from, and if we are at tip or not. Returns: Nothing. Params blockchain : cardano-blockchain-id block : cardano-block source : block-src Export interface hermes:cardano/event-on-txn Types type cardano-blockchain-id cardano-blockchain-id #### `type cardano-txn` [`cardano-txn`](#cardano_txn) ---- Functions on-cardano-txn: func Triggered when a cardano transaction event fires. The module must export this interface to use it. Parameters blockchain : The blockchain id the block originated from. slot : The slot the transaction is in. txn-index : The offset in the block this transaction is at. txn : The raw transaction data itself. Returns: Nothing. Params blockchain : cardano-blockchain-id slot : u64 txn-index : u32 txn : cardano-txn Export interface hermes:cardano/event-on-rollback Types type cardano-blockchain-id cardano-blockchain-id ---- Functions on-cardano-rollback: func Triggered when a cardano rollback event fires. The module must export this interface to use it. Parameters blockchain : The blockchain id the rollback originated from. slot : The slot the rollback is targeting. (The next block event will be from this slot.) Returns: Nothing. Params blockchain : cardano-blockchain-id slot : u64","title":"Cardano"},{"location":"api/wasi-hermes/hermes/cbor/","text":"World all Imports: interface hermes:binary/api interface hermes:cbor/api Import interface hermes:binary/api Binary Data API Binary Data types and functions. Permissions This API is ALWAYS available. cspell: words Binary API Interface - Imports ONLY Types type bstr bstr Binary String (bstr) is a list of bytes. This type is used to indicate the data is an arbitrary array of bytes. tuple b128 128 bit value Tuple Fields 0 : u64 1 : u64 tuple b256 256 bit value Tuple Fields 0 : u64 1 : u64 2 : u64 3 : u64 tuple b512 512 bit value Tuple Fields 0 : u64 1 : u64 2 : u64 3 : u64 4 : u64 5 : u64 6 : u64 7 : u64 Import interface hermes:cbor/api CBOR API CBOR Data types and functions. Permissions This API is ALWAYS available. cspell: words CBOR API Interface - Imports ONLY Types type bstr bstr #### `type cbor` [`bstr`](#bstr) CBOR is a binary cbor data type. This type is used to indicate the binary array MUST be CBOR data.","title":"Cbor"},{"location":"api/wasi-hermes/hermes/cron/","text":"World all Imports: interface wasi:clocks/monotonic-clock@0.2.0 interface hermes:cron/api Exports: interface hermes:cron/event Import interface wasi:clocks/monotonic-clock@0.2.0 WASI Monotonic Clock is a clock API intended to let users measure elapsed time. It is intended to be portable at least between Unix-family platforms and Windows. A monotonic clock is a clock which has an unspecified initial value, and successive reads of the clock will produce non-decreasing values. It is intended for measuring elapsed time. Types type instant u64 Hermes does not support `poll` use wasi:io/poll@0.2.0.{pollable}; An instant in time, in nanoseconds. An instant is relative to an unspecified initial value, and can only be compared to instances from the same monotonic-clock. type duration u64 A duration of time, in nanoseconds. Functions now: func Read the current value of the clock. The clock is monotonic, therefore calling this function repeatedly will produce a sequence of non-decreasing values. Return values instant resolution: func Query the resolution of the clock. Returns the duration of time corresponding to a clock tick. Return values duration Import interface hermes:cron/api Cron API Allow time based scheduling of events. Permissions This API is ALWAYS available. cspell: words crontabs mkcron retrigger retriggering CRON API Interface - Imports ONLY Types type instant instant #### `type cron-event-tag` `string` A Tag used to mark a delivered cron event. type cron-sched string A cron schedule in crontab format. record cron-tagged A tagged crontab entry It is valid for multiple crontab entries at the same time to have different tags. It is valid for crontab entries at different times to have the same tag. BUT there can only ever be 1 crontab entry at a specified time with a specified tag. ie, when + tag is uniquely identifying of every crontab entry. See: crontab.5 man page for details on cron schedule format. Record Fields when : cron-sched The crontab entry in standard cron format. The Time is ALWAYS relative to UTC and does not account for local time. If Localtime adjustment is required it must be handled by the module. tag : cron-event-tag The tag associated with the crontab entry. variant cron-component A discreet time entry used to help convert numeric times into crontab entries. Variant Cases all Maps to `*` in a cron schedule (ie, match all) at : u8 Match an absolute time/date range : ( u8 , u8 ) Match an inclusive list of time/date values. type cron-time cron-time A list of cron time components Functions add: func Schedule Recurrent CRON event Cron events will be delivered to the on-cron event handler. Parameters entry : The crontab entry to add. when : When the event triggers. Standard crontab format. tag : A tag which will accompany the triggered event. retrigger : true : The event will re-trigger every time the crontab entry matches until cancelled. false : The event will automatically cancel after it is generated once. Returns true : Crontab added successfully. (Or the crontab event already exists) false : Crontab failed to be added. Note: If the crontab entry already exists, the retrigger flag can be changed by calling this function. This could be useful where a retriggering crontab event is desired to be stopped, but ONLY after it has triggered once more. Params entry : cron-tagged retrigger : bool Return values bool delay: func Schedule A Single cron event after a fixed delay. Allows for easy timed wait events to be delivered without requiring datetime calculations or formatting cron entries. Parameters duration : How many nanoseconds to delay. The delay will be AT LEAST this long. tag : A tag which will accompany the triggered event. Returns true : Crontab added successfully. false : Crontab failed to be added. Note: This is a convenience function which will automatically calculate the crontab entry needed to trigger the event after the requested duration . It is added as a non-retriggering event. Listing the crontabs after this call will list the delay in addition to all other crontab entries. Params duration : instant tag : cron-event-tag Return values bool ls: func List currently active cron schedule. Allows for management of scheduled cron events. Parameters tag : Optional, the tag to limit the list to. If none then all crons listed. Returns A list of tuples containing the scheduled crontabs and their tags, along with the current retrigger flag. The list is sorted from most crontab that will trigger soonest to latest. Crontabs are only listed once, in the case where a crontab may be scheduled may times before a later one. 0 - cron-tagged - The Tagged crontab event. 1 - bool - The state of the retrigger flag. Params tag : option< cron-event-tag > Return values list<( cron-tagged , bool )> rm: func Remove the requested crontab. Allows for management of scheduled cron events. Parameters when : The crontab entry to add. Standard crontab format. tag : A tag which will accompany the triggered event. Returns true : The requested crontab was deleted and will not trigger. false : The requested crontab does not exist. Params entry : cron-tagged Return values bool mkcron: func Make a crontab entry from individual time values. Crates the properly formatted cron entry from numeric cron time components. Convenience function to make building cron strings simpler when they are calculated from data. Parameters dow - DayOfWeek (0-7, 0 or 7 = Sunday) month - Month of the year (1-12, 1 = January) day - Day in the month (1-31) hour - Hour in the day (0-23) minute - Minute in the hour (0-59) Returns A matching cron-sched ready for use in the cron functions above. Note: No checking is done to determine if the requested date is valid. If a particular component is out of its allowable range it will be silently clamped within the allowable range of each parameter. Redundant entries will be removed. For example specifying a month as 3 and 2-4 will remove the individual month and only produce the range. Params dow : cron-time month : cron-time day : cron-time hour : cron-time minute : cron-time Return values cron-sched Export interface hermes:cron/event Types type cron-event-tag cron-event-tag #### `type cron-tagged` [`cron-tagged`](#cron_tagged) ---- Functions on-cron: func Triggered when a cron event fires. This event is only ever generated for the application that added the cron job. The module must export this interface to use it. Parameters event : The tagged cron event that was triggered. last : This cron event will not retrigger. Returns: true - retrigger. (Ignored if the cron event is final ). false - stop the cron. Params event : cron-tagged last : bool Return values bool","title":"Cron"},{"location":"api/wasi-hermes/hermes/crypto/","text":"World all Imports: interface hermes:binary/api interface hermes:crypto/api Import interface hermes:binary/api Binary Data API Binary Data types and functions. Permissions This API is ALWAYS available. cspell: words Binary API Interface - Imports ONLY Types type bstr bstr Binary String (bstr) is a list of bytes. This type is used to indicate the data is an arbitrary array of bytes. tuple b128 128 bit value Tuple Fields 0 : u64 1 : u64 tuple b256 256 bit value Tuple Fields 0 : u64 1 : u64 2 : u64 3 : u64 tuple b512 512 bit value Tuple Fields 0 : u64 1 : u64 2 : u64 3 : u64 4 : u64 5 : u64 6 : u64 7 : u64 Import interface hermes:crypto/api Crypto API Crypto API functionality exposed to the Hermes WASM Modules. Permissions This API is ALWAYS available. Crypto API Interface Types type bstr bstr #### `type b256` [`b256`](#b256) #### `type b512` [`b512`](#b512) #### `type ed25519-bip32-private-key` [`b256`](#b256) ed25519-bip32 Private Key type ed25519-bip32-extended-private-key b512 ed25519-bip32 Extended Private Key type ed25519-bip32-public-key b256 ed25519-bip32 Public Key type ed25519-bip32-signature b256 ed25519-bip32 Signature resource ed25519-bip32 Functions [constructor]ed25519-bip32: func Create a new ED25519-BIP32 Crypto resource Parameters private_key : The key to use, if not supplied one is RANDOMLY generated. Params private-key : option< ed25519-bip32-private-key > Return values own< ed25519-bip32 > [method]ed25519-bip32.public-key: func Get the public key for this private key. Params self : borrow< ed25519-bip32 > Return values ed25519-bip32-public-key [method]ed25519-bip32.sign-data: func Sign data with the Private key, and return it. Parameters data : The data to sign. Params self : borrow< ed25519-bip32 > data : bstr Return values ed25519-bip32-signature [method]ed25519-bip32.check-sig: func Check a signature on a set of data. Parameters data : The data to check. sig : The signature to check. Returns true : Signature checked OK. false : Signature check failed. Params self : borrow< ed25519-bip32 > data : bstr sig : ed25519-bip32-signature Return values bool [method]ed25519-bip32.derive: func Derive a new private key from the current private key. Note: uses BIP32 HD key derivation. Params self : borrow< ed25519-bip32 > Return values own< ed25519-bip32 > [static]ed25519-bip32.gen-private-key: func Create a new RANDOM private key. Note, this does not need to be used, as the constructor will do this automatically. Return values ed25519-bip32-private-key","title":"Crypto"},{"location":"api/wasi-hermes/hermes/hash/","text":"World all Imports: interface hermes:binary/api interface hermes:hash/api Import interface hermes:binary/api Binary Data API Binary Data types and functions. Permissions This API is ALWAYS available. cspell: words Binary API Interface - Imports ONLY Types type bstr bstr Binary String (bstr) is a list of bytes. This type is used to indicate the data is an arbitrary array of bytes. tuple b128 128 bit value Tuple Fields 0 : u64 1 : u64 tuple b256 256 bit value Tuple Fields 0 : u64 1 : u64 2 : u64 3 : u64 tuple b512 512 bit value Tuple Fields 0 : u64 1 : u64 2 : u64 3 : u64 4 : u64 5 : u64 6 : u64 7 : u64 Import interface hermes:hash/api Data Hash API Hashing Data types and functions. Permissions This API is ALWAYS available. Hashing API Interface - Imports ONLY Types type bstr bstr #### `enum errno` Errors that can occur during hashing. Enum Cases key-too-big hash-too-big The ley is larger than supported by the hash function. Functions blake2s: func BLAKE2s Hash Function Hash a binary buffer with BLAKE2s. Parameters buf : The binary data buffer to hash. outlen : Optional. The size of the digest. If the outlen is not defined, it defaults to 32. key : Optional. The key to use with the hash. If not defined, the hash is not keyed. Should not be > 32 bytes. Returns Either a buffer the size requested, with the hash. Or an error: key_too_big if key is specified and is > 32 bytes. hash_too_big if outlen is specified and is > 32 bytes. Note: key length is checked before outlen so if both sizes are invalid, only key_too_big will be returned. Params buf : bstr outlen : option< u8 > key : option< bstr > Return values result< bstr , errno > blake2b: func BLAKE2b Hash Function Hash a binary buffer with BLAKE2b. Parameters buf : The binary data buffer to hash. outlen : Optional. The size of the digest. If the outlen is not defined, it defaults to 64. key : Optional. The key to use with the hash. If not defined, the hash is not keyed. Should not be > 64 bytes. Returns Either a buffer the size requested, with the hash. Or an error: key_too_big if key is specified and is > 64 bytes. hash_too_big if outlen is specified and is > 64 bytes. Note: key length is checked before outlen so if both sizes are invalid, only key_too_big will be returned. Params buf : bstr outlen : option< u8 > key : option< bstr > Return values result< bstr , errno > blake3: func BLAKE3 Hash Function Hash a binary buffer with BLAKE3. Parameters buf : The binary data buffer to hash. outlen : Optional. The size of the digest. If the outlen is not defined, it defaults to 32. key : Optional. The key to use with the hash. If not defined, the hash is not keyed. Should not be > 32 bytes. Returns Either a buffer the size requested, with the hash. Or an error: key_too_big if key is specified and is > 32 bytes. hash_too_big if outlen is specified and is > 32 bytes. Note: key length is checked before outlen so if both sizes are invalid, only key_too_big will be returned. Params buf : bstr outlen : option< u8 > key : option< bstr > Return values result< bstr , errno >","title":"Hash"},{"location":"api/wasi-hermes/hermes/init/","text":"World all Exports: interface hermes:init/event Export interface hermes:init/event Functions init: func Perform application start up initialization. This will only ever be called once when the application this module is a part of is started. The module must export this interface to use it. Returns: true - Initialization is successful, the application may commence. false - Fatal error during Initialization. DO NOT START APPLICATION. Return values bool","title":"Init"},{"location":"api/wasi-hermes/hermes/json/","text":"World all Imports: interface hermes:json/api Import interface hermes:json/api JSON API JSON Data types and functions. Permissions This API is ALWAYS available. cspell: words JSON API Interface - Imports ONLY Types type json string JSON is just a string. This type is used to indicate the string MUST be properly formatted JSON.","title":"Json"},{"location":"api/wasi-hermes/hermes/kv-store/","text":"World all Imports: interface hermes:binary/api interface hermes:cbor/api interface hermes:json/api interface hermes:kv-store/api Exports: interface hermes:kv-store/event Import interface hermes:binary/api Binary Data API Binary Data types and functions. Permissions This API is ALWAYS available. cspell: words Binary API Interface - Imports ONLY Types type bstr bstr Binary String (bstr) is a list of bytes. This type is used to indicate the data is an arbitrary array of bytes. tuple b128 128 bit value Tuple Fields 0 : u64 1 : u64 tuple b256 256 bit value Tuple Fields 0 : u64 1 : u64 2 : u64 3 : u64 tuple b512 512 bit value Tuple Fields 0 : u64 1 : u64 2 : u64 3 : u64 4 : u64 5 : u64 6 : u64 7 : u64 Import interface hermes:cbor/api CBOR API CBOR Data types and functions. Permissions This API is ALWAYS available. cspell: words CBOR API Interface - Imports ONLY Types type bstr bstr #### `type cbor` [`bstr`](#bstr) CBOR is a binary cbor data type. This type is used to indicate the binary array MUST be CBOR data. Import interface hermes:json/api JSON API JSON Data types and functions. Permissions This API is ALWAYS available. cspell: words JSON API Interface - Imports ONLY Types type json string JSON is just a string. This type is used to indicate the string MUST be properly formatted JSON. Import interface hermes:kv-store/api Interface to local in-memory K-V database instance. This API is atomic. It is safe to call it from multiple wasm modules in the same application. The atomic nature of these calls allows multiple wasm modules to communicate without data race conditions through the KV store. These are primitive operations, and the caller is expected to provide more complex semaphore/mutex logic on top of these building blocks, if required. There is no support for multi-key atomic operations, the application is required to manage multi-key updates given the functionality provided here. For example, a single Key could be used to \"Lock\" a set of other keys. There is no protection against deadlock, if a key is used as a semaphore/mutex then it is the responsibility of the applications modules to properly manage them. Types type bstr bstr #### `type cbor` [`cbor`](#cbor) #### `type json` [`json`](#json) #### `variant kv-values` A time and date in seconds plus nanoseconds. Variant Cases kv-string : string kv-s64 : s64 A String kv-u64 : u64 Just use the largest signed integer type supported kv-f64 : float64 Just use the largest integer type supported kv-bstr : bstr Just use the largest float type supported kv-cbor : cbor A byte string kv-json : json CBOR data Functions kv-set: func Set a value in the local key-value store Setting None will cause the Key to be deleted from the KV store. Params key : string value : option< kv-values > kv-get-default: func Get a value from the local key-value store Returns the default if not set. Params key : string default : option< kv-values > Return values option< kv-values > kv-get: func Get a value from the local key-value store Returns None if the Key does not exist in the KV Store. This is a convenience function, and is equivalent to kv-get-default(key, none) Params key : string Return values option< kv-values > kv-get-set: func Get a value, and then set it (Atomic) Setting None will cause the Key to be deleted from the KV store. Params key : string value : option< kv-values > Return values option< kv-values > kv-add: func Get a value, and then add to it (Atomic) Adding to a string will concatenate the string. String concatenation will only occur up to the maximum possible size of a string value. Concatenation beyond the maximum size will result in truncation. Adding to a numeric will have the expected behavior (rounded to nearest if necessary). The original type does not change, so: float64 + u64 = float64 . s64 + float64 = s64 If the value overflows or under-flows it will saturate at the limit. This behavior allows us to decrement values by using the signed version, so u64(10) + s64(-5) = u64(5)) If a string is added to a numeric, nothing happens. If a numeric is added to a string, it is converted to a string first, and then concatenated Note: There will be no spaces added. So \"My string\" + u32(77) = \"My string77\" Params key : string value : option< kv-values > Return values option< kv-values > kv-cas: func Check if the Key equals a test value (exact match) and if it does, store the new value. In all cases, the current value is returned. If the types are NOT the same, the comparison will fail, even if the values are equivalent. For example: u64(7) != s64(7) , float64(-1) != s64(-1) . Params key : string test : option< kv-values > value : option< kv-values > Return values option< kv-values > kv-subscribe: func Subscribe to any updates made to a particular Key. After this call, this module will receive Key Update events when a key is written. It returns the current value of the Key and None if it is not set. Params key : string Return values option< kv-values > kv-unsubscribe: func Unsubscribe to any updates made to a particular Key. After this call, this module will no longer receive Key Update events when a key is written. It returns the current value of the Key and None if it is not set. Params key : string Return values option< kv-values > Export interface hermes:kv-store/event Types type kv-values kv-values ---- Functions kv-update: func A Subscribed key has updated. This will only ever be called if the module has subscribed to updates using kv-subscribe Returns: Nothing. Params key : string value : kv-values","title":"Kv store"},{"location":"api/wasi-hermes/hermes/localtime/","text":"World all API localtime struct timezone string dd(u8 1-31) mm(u8 1-12) yy (s16 -32677 - +32767) hh(u8 0-11) mm(u8 0-59) ss(u8 0-59) Get localized time (optional secs since 1970 UTC time) (optional timezone string) localtime to UTC time Imports: interface wasi:clocks/wall-clock@0.2.0 interface hermes:localtime/api Import interface wasi:clocks/wall-clock@0.2.0 WASI Wall Clock is a clock API intended to let users query the current time. The name \"wall\" makes an analogy to a \"clock on the wall\", which is not necessarily monotonic as it may be reset. It is intended to be portable at least between Unix-family platforms and Windows. A wall clock is a clock which measures the date and time according to some external reference. External references may be reset, so this clock is not necessarily monotonic, making it unsuitable for measuring elapsed time. It is intended for reporting the current date and time for humans. Types record datetime A time and date in seconds plus nanoseconds. Record Fields seconds : u64 nanoseconds : u32 Functions now: func Read the current value of the clock. This clock is not monotonic, therefore calling this function repeatedly will not necessarily produce a sequence of non-decreasing values. The returned timestamps represent the number of seconds since 1970-01-01T00:00:00Z, also known as POSIX's Seconds Since the Epoch , also known as Unix Time . The nanoseconds field of the output is always less than 1000000000. Return values datetime resolution: func Query the resolution of the clock. The nanoseconds field of the output is always less than 1000000000. Return values datetime Import interface hermes:localtime/api Localtime API Localtime API functionality exposed to the Hermes WASM Modules. Permissions This API is ALWAYS available. Logging API Interface Types type datetime datetime #### `type timezone` `string` The timezone we are localized for. record localtime Time in localtime format. Record Fields year : u64 month : u8 Year dow : u8 Month (0-11) day : u8 Day of week (0-6) hh : u8 Day (1-31) mm : u8 Hour (0-23) ss : u8 Minute (0-59) ns : u32 Second (0-59) tz : timezone Nanoseconds enum errno Errors that can occur converting times Enum Cases invalid-localtime unknown-timezone year-out-of-range Functions get-localtime: func Get localtime from a datetime or now. Parameters when : The datetime we want to convert (Optional, if not set it will convert now ). tz : The timezone to use. (Optional, if not set uses the local machines configured local timezone.) Returns localtime : the converted time. errno : An error indicating why conversion failed. Params when : option< datetime > tz : option< timezone > Return values result< localtime , errno > alt-localtime: func Get a new localtime from a localtime, by recalculating time for a new timezone. Parameters time : The localtime to convert. tz : The timezone to use. (Optional, if not set uses the local machines configured local timezone.) Returns localtime : the converted time. errno : An error indicating why conversion failed. Params time : localtime tz : option< timezone > Return values result< localtime , errno > get-datetime: func Get a datetime from a localtime. Parameters time : The localtime to convert. Returns datetime : the converted time. errno : An error indicating why conversion failed. Params time : localtime Return values result< datetime , errno >","title":"Localtime"},{"location":"api/wasi-hermes/hermes/logging/","text":"World all Imports: interface hermes:json/api interface hermes:logging/api Import interface hermes:json/api JSON API JSON Data types and functions. Permissions This API is ALWAYS available. cspell: words JSON API Interface - Imports ONLY Types type json string JSON is just a string. This type is used to indicate the string MUST be properly formatted JSON. Import interface hermes:logging/api Logging API Logging API functionality exposed to the Hermes WASM Modules. Permissions This API is ALWAYS available. Logging API Interface Types type json json #### `enum level` The supported logging levels Enum Cases debug Debug Log Level trace Tracing Log level info General Informational Log Level warn Warning about something that might be a problem. error A very serious error Functions log: func Generate a Log The Hermes API will add extra information to the log, such as the instance of the webasm module being logged. The Webasm module does not need to concern itself with this kind of information, and should log as if it is the only instance. It also should not log any webasm shared context, except where it is relevant to the log message itself. Parameters level : The log level this message is for. file : The name of the src file being logged from. (Optional) fn : The function within the file being logged from. (Optional) line : The line of code the log was generated from. (Optional) col : The column of code the log was generated from. (Optional) ctx : The logging context. (Should have no newlines or formatting). msg : A Single line message to be logged. (Should have no newlines or formatting). data : A Free form json payload that will be logged with the msg. This must be valid JSON. Notes The data parameter may contain a record of the format: { \"bt\" : [ <string> , <string> ] } The logger will interpret this as a backtrace where each entry in the array is one line of the backtrace. The format of the backtrace lines is up to the webasm module generating the log. The individual backtrace entries may contain line breaks if the backtrace entry is multiline. Multiline backtrace entries should be de-dented, relative to the first line. This is to allow the display to properly format multiline entries. This format is designed to keep the broadest flexibility for multiple languages capabilities. The backtrace must be sorted with most recent lines of the backtrace occurring first in the array. Backtrace must be contained in a single log call. Multiple log calls will be considered independent logs. Params level : level file : option< string > fn : option< string > line : option< u32 > col : option< u32 > ctx : option< string > msg : string data : option< json >","title":"Logging"},{"location":"api/wasi-hermes/wasi/cli/","text":"World imports Imports: interface wasi:cli/environment@0.2.0 interface wasi:io/error@0.2.0 interface wasi:io/streams@0.2.0 interface wasi:cli/stdin@0.2.0 interface wasi:cli/stdout@0.2.0 interface wasi:cli/stderr@0.2.0 interface wasi:clocks/monotonic-clock@0.2.0 interface wasi:clocks/wall-clock@0.2.0 interface wasi:filesystem/types@0.2.0 interface wasi:filesystem/preopens@0.2.0 interface wasi:random/random@0.2.0 interface wasi:random/insecure@0.2.0 interface wasi:random/insecure-seed@0.2.0 Import interface wasi:cli/environment@0.2.0 Functions get-environment: func Get the POSIX-style environment variables. Each environment variable is provided as a pair of string variable names and string value. Morally, these are a value import, but until value imports are available in the component model, this import function should return the same values each time it is called. Return values list<( string , string )> get-arguments: func Get the POSIX-style arguments to the program. Return values list< string > initial-cwd: func Return a path that programs should use as their initial current working directory, interpreting . as shorthand for this. Return values option< string > Import interface wasi:io/error@0.2.0 Types resource error A resource which represents some error information. The only method provided by this resource is to-debug-string , which provides some human-readable information about the error. In the wasi:io package, this resource is returned through the wasi:io/streams/stream-error type. To provide more specific error information, other interfaces may provide functions to further \"downcast\" this error into more specific error information. For example, error s returned in streams derived from filesystem types to be described using the filesystem's own error-code type, using the function wasi:filesystem/types/filesystem-error-code , which takes a parameter borrow<error> and returns option<wasi:filesystem/types/error-code> . The set of functions which can \"downcast\" an error into a more concrete type is open. Functions [method]error.to-debug-string: func Returns a string that is suitable to assist humans in debugging this error. WARNING: The returned string should not be consumed mechanically! It may change across platforms, hosts, or other implementation details. Parsing this string is a major platform-compatibility hazard. Params self : borrow< error > Return values string Import interface wasi:io/streams@0.2.0 WASI I/O is an I/O abstraction API which is currently focused on providing stream types. In the future, the component model is expected to add built-in stream types; when it does, they are expected to subsume this API. Types type error error #### `variant stream-error` // Hermes does not support poll use poll.{pollable}; */ An error for input-stream and output-stream operations. Variant Cases last-operation-failed : own< error > The last operation (a write or flush) failed before completion. More information is available in the error payload. closed The stream is closed: no more input will be accepted by the stream. A closed output-stream will return this error on all future operations. resource input-stream An input bytestream. input-stream s are non-blocking to the extent practical on underlying platforms. I/O operations always return promptly; if fewer bytes are promptly available than requested, they return the number of bytes promptly available, which could even be zero. To wait for data to be available, use the subscribe function to obtain a pollable which can be polled for using wasi:io/poll . resource output-stream An output bytestream. output-stream s are non-blocking to the extent practical on underlying platforms. Except where specified otherwise, I/O operations also always return promptly, after the number of bytes that can be written promptly, which could even be zero. To wait for the stream to be ready to accept data, the subscribe function to obtain a pollable which can be polled for using wasi:io/poll . Functions [method]input-stream.read: func Perform a non-blocking read from the stream. This function returns a list of bytes containing the read data, when successful. The returned list will contain up to len bytes; it may return fewer than requested, but not more. The list is empty when no bytes are available for reading at this time. The pollable given by subscribe will be ready when more bytes are available. This function fails with a stream-error when the operation encounters an error, giving last-operation-failed , or when the stream is closed, giving closed . When the caller gives a len of 0, it represents a request to read 0 bytes. If the stream is still open, this call should succeed and return an empty list, or otherwise fail with closed . The len parameter is a u64 , which could represent a list of u8 which is not possible to allocate in wasm32, or not desirable to allocate as as a return value by the callee. The callee may return a list of bytes less than len in size while more bytes are available for reading. Params self : borrow< input-stream > len : u64 Return values result<list< u8 >, stream-error > [method]input-stream.blocking-read: func Read bytes from a stream, after blocking until at least one byte can be read. Except for blocking, behavior is identical to read . Params self : borrow< input-stream > len : u64 Return values result<list< u8 >, stream-error > [method]input-stream.skip: func Skip bytes from a stream. Returns number of bytes skipped. Behaves identical to read , except instead of returning a list of bytes, returns the number of bytes consumed from the stream. Params self : borrow< input-stream > len : u64 Return values result< u64 , stream-error > [method]input-stream.blocking-skip: func Skip bytes from a stream, after blocking until at least one byte can be skipped. Except for blocking behavior, identical to skip . Params self : borrow< input-stream > len : u64 Return values result< u64 , stream-error > [method]output-stream.check-write: func Check readiness for writing. This function never blocks. Returns the number of bytes permitted for the next call to write , or an error. Calling write with more bytes than this function has permitted will trap. When this function returns 0 bytes, the subscribe pollable will become ready when this function will report at least 1 byte, or an error. Params self : borrow< output-stream > Return values result< u64 , stream-error > [method]output-stream.write: func Perform a write. This function never blocks. Precondition: check-write gave permit of Ok(n) and contents has a length of less than or equal to n. Otherwise, this function will trap. returns Err(closed) without writing if the stream has closed since the last call to check-write provided a permit. Params self : borrow< output-stream > contents : list< u8 > Return values result<_, stream-error > [method]output-stream.blocking-write-and-flush: func Perform a write of up to 4096 bytes, and then flush the stream. Block until all of these operations are complete, or an error occurs. This is a convenience wrapper around the use of check-write , subscribe , write , and flush , and is implemented with the following pseudo-code: let pollable = this.subscribe(); while !contents.is_empty() { // Wait for the stream to become writable poll-one(pollable); let Ok(n) = this.check-write(); // eliding error handling let len = min(n, contents.len()); let (chunk, rest) = contents.split_at(len); this.write(chunk ); // eliding error handling contents = rest; } this.flush(); // Wait for completion of `flush` poll-one(pollable); // Check for any errors that arose during `flush` let _ = this.check-write(); // eliding error handling Params self : borrow< output-stream > contents : list< u8 > Return values result<_, stream-error > [method]output-stream.flush: func Request to flush buffered output. This function never blocks. This tells the output-stream that the caller intends any buffered output to be flushed. the output which is expected to be flushed is all that has been passed to write prior to this call. Upon calling this function, the output-stream will not accept any writes ( check-write will return ok(0) ) until the flush has completed. The subscribe pollable will become ready when the flush has completed and the stream can accept more writes. Params self : borrow< output-stream > Return values result<_, stream-error > [method]output-stream.blocking-flush: func Request to flush buffered output, and block until flush completes and stream is ready for writing again. Params self : borrow< output-stream > Return values result<_, stream-error > [method]output-stream.write-zeroes: func /// Create a pollable which will resolve once the output-stream /// is ready for more writing, or an error has occured. When this /// pollable is ready, check-write will return ok(n) with n>0, or an /// error. /// /// If the stream is closed, this pollable is always ready immediately. /// /// The created pollable is a child resource of the output-stream . /// Implementations may trap if the output-stream is dropped before /// all derived pollable s created with this function are dropped. subscribe: func() -> pollable; */ Write zeroes to a stream. this should be used precisely like write with the exact same preconditions (must use check-write first), but instead of passing a list of bytes, you simply pass the number of zero-bytes that should be written. Params self : borrow< output-stream > len : u64 Return values result<_, stream-error > [method]output-stream.blocking-write-zeroes-and-flush: func Perform a write of up to 4096 zeroes, and then flush the stream. Block until all of these operations are complete, or an error occurs. This is a convenience wrapper around the use of check-write , subscribe , write-zeroes , and flush , and is implemented with the following pseudo-code: let pollable = this.subscribe(); while num_zeroes != 0 { // Wait for the stream to become writable poll-one(pollable); let Ok(n) = this.check-write(); // eliding error handling let len = min(n, num_zeroes); this.write-zeroes(len); // eliding error handling num_zeroes -= len; } this.flush(); // Wait for completion of `flush` poll-one(pollable); // Check for any errors that arose during `flush` let _ = this.check-write(); // eliding error handling Params self : borrow< output-stream > len : u64 Return values result<_, stream-error > [method]output-stream.splice: func Read from one stream and write to another. The behavior of splice is equivelant to: calling check-write on the output-stream calling read on the input-stream with the smaller of the check-write permitted length and the len provided to splice calling write on the output-stream with that read data. Any error reported by the call to check-write , read , or write ends the splice and reports that error. This function returns the number of bytes transferred; it may be less than len . Params self : borrow< output-stream > src : borrow< input-stream > len : u64 Return values result< u64 , stream-error > [method]output-stream.blocking-splice: func Read from one stream and write to another, with blocking. This is similar to splice , except that it blocks until the output-stream is ready for writing, and the input-stream is ready for reading, before performing the splice . Params self : borrow< output-stream > src : borrow< input-stream > len : u64 Return values result< u64 , stream-error > Import interface wasi:cli/stdin@0.2.0 Types type input-stream input-stream ---- Functions get-stdin: func Return values own< input-stream > Import interface wasi:cli/stdout@0.2.0 Types type output-stream output-stream ---- Functions get-stdout: func Return values own< output-stream > Import interface wasi:cli/stderr@0.2.0 Types type output-stream output-stream ---- Functions get-stderr: func Return values own< output-stream > Import interface wasi:clocks/monotonic-clock@0.2.0 WASI Monotonic Clock is a clock API intended to let users measure elapsed time. It is intended to be portable at least between Unix-family platforms and Windows. A monotonic clock is a clock which has an unspecified initial value, and successive reads of the clock will produce non-decreasing values. It is intended for measuring elapsed time. Types type instant u64 Hermes does not support `poll` use wasi:io/poll@0.2.0.{pollable}; An instant in time, in nanoseconds. An instant is relative to an unspecified initial value, and can only be compared to instances from the same monotonic-clock. type duration u64 A duration of time, in nanoseconds. Functions now: func Read the current value of the clock. The clock is monotonic, therefore calling this function repeatedly will produce a sequence of non-decreasing values. Return values instant resolution: func Query the resolution of the clock. Returns the duration of time corresponding to a clock tick. Return values duration Import interface wasi:clocks/wall-clock@0.2.0 WASI Wall Clock is a clock API intended to let users query the current time. The name \"wall\" makes an analogy to a \"clock on the wall\", which is not necessarily monotonic as it may be reset. It is intended to be portable at least between Unix-family platforms and Windows. A wall clock is a clock which measures the date and time according to some external reference. External references may be reset, so this clock is not necessarily monotonic, making it unsuitable for measuring elapsed time. It is intended for reporting the current date and time for humans. Types record datetime A time and date in seconds plus nanoseconds. Record Fields seconds : u64 nanoseconds : u32 Functions now: func Read the current value of the clock. This clock is not monotonic, therefore calling this function repeatedly will not necessarily produce a sequence of non-decreasing values. The returned timestamps represent the number of seconds since 1970-01-01T00:00:00Z, also known as POSIX's Seconds Since the Epoch , also known as Unix Time . The nanoseconds field of the output is always less than 1000000000. Return values datetime resolution: func Query the resolution of the clock. The nanoseconds field of the output is always less than 1000000000. Return values datetime Import interface wasi:filesystem/types@0.2.0 WASI filesystem is a filesystem API primarily intended to let users run WASI programs that access their files on their existing filesystems, without significant overhead. It is intended to be roughly portable between Unix-family platforms and Windows, though it does not hide many of the major differences. Paths are passed as interface-type string s, meaning they must consist of a sequence of Unicode Scalar Values (USVs). Some filesystems may contain paths which are not accessible by this API. The directory separator in WASI is always the forward-slash ( / ). All paths in WASI are relative paths, and are interpreted relative to a descriptor referring to a base directory. If a path argument to any WASI function starts with / , or if any step of resolving a path , including .. and symbolic link steps, reaches a directory outside of the base directory, or reaches a symlink to an absolute or rooted path in the underlying filesystem, the function fails with error-code::not-permitted . For more information about WASI path resolution and sandboxing, see WASI filesystem path resolution . Types type input-stream input-stream #### `type output-stream` [`output-stream`](#output_stream) #### `type error` [`error`](#error) #### `type datetime` [`datetime`](#datetime) #### `type filesize` `u64` File size or length of a region within a file. enum descriptor-type The type of a filesystem object referenced by a descriptor. Note: This was called filetype in earlier versions of WASI. Enum Cases unknown The type of the descriptor or file is unknown or is different from any of the other types specified. block-device The descriptor refers to a block device inode. character-device The descriptor refers to a character device inode. directory The descriptor refers to a directory inode. fifo The descriptor refers to a named pipe. symbolic-link The file refers to a symbolic link inode. regular-file The descriptor refers to a regular file inode. socket The descriptor refers to a socket. flags descriptor-flags Descriptor flags. Note: This was called fdflags in earlier versions of WASI. Flags members read : Read mode: Data can be read. write : Write mode: Data can be written to. file-integrity-sync : Request that writes be performed according to synchronized I/O file integrity completion. The data stored in the file and the file's metadata are synchronized. This is similar to `O_SYNC` in POSIX. The precise semantics of this operation have not yet been defined for WASI. At this time, it should be interpreted as a request, and not a requirement. data-integrity-sync : Request that writes be performed according to synchronized I/O data integrity completion. Only the data stored in the file is synchronized. This is similar to `O_DSYNC` in POSIX. The precise semantics of this operation have not yet been defined for WASI. At this time, it should be interpreted as a request, and not a requirement. requested-write-sync : Requests that reads be performed at the same level of integrety requested for writes. This is similar to `O_RSYNC` in POSIX. The precise semantics of this operation have not yet been defined for WASI. At this time, it should be interpreted as a request, and not a requirement. mutate-directory : Mutating directories mode: Directory contents may be mutated. When this flag is unset on a descriptor, operations using the descriptor which would create, rename, delete, modify the data or metadata of filesystem objects, or obtain another handle which would permit any of those, shall fail with error-code::read-only if they would otherwise succeed. This may only be set on directories. flags path-flags Flags determining the method of how paths are resolved. Flags members symlink-follow : As long as the resolved path corresponds to a symbolic link, it is expanded. flags open-flags Open flags used by open-at . Flags members create : Create file if it does not exist, similar to `O_CREAT` in POSIX. directory : Fail if not a directory, similar to `O_DIRECTORY` in POSIX. exclusive : Fail if file already exists, similar to `O_EXCL` in POSIX. truncate : Truncate file to size 0, similar to `O_TRUNC` in POSIX. type link-count u64 Number of hard links to an inode. record descriptor-stat File attributes. Note: This was called filestat in earlier versions of WASI. Record Fields type : descriptor-type File type. link-count : link-count Number of hard links to the file. size : filesize For regular files, the file size in bytes. For symbolic links, the length in bytes of the pathname contained in the symbolic link. data-access-timestamp : option< datetime > Last data access timestamp. If the option is none, the platform doesn't maintain an access timestamp for this file. data-modification-timestamp : option< datetime > Last data modification timestamp. If the option is none, the platform doesn't maintain a modification timestamp for this file. status-change-timestamp : option< datetime > Last file status-change timestamp. If the option is none, the platform doesn't maintain a status-change timestamp for this file. variant new-timestamp When setting a timestamp, this gives the value to set it to. Variant Cases no-change Leave the timestamp set to its previous value. now Set the timestamp to the current time of the system clock associated with the filesystem. timestamp : datetime Set the timestamp to the given value. record directory-entry A directory entry. Record Fields type : descriptor-type The type of the file referred to by this directory entry. name : string The name of the object. enum error-code Error codes returned by functions, similar to errno in POSIX. Not all of these error codes are returned by the functions provided by this API; some are used in higher-level library layers, and others are provided merely for alignment with POSIX. Enum Cases access Permission denied, similar to `EACCES` in POSIX. would-block Resource unavailable, or operation would block, similar to `EAGAIN` and `EWOULDBLOCK` in POSIX. already Connection already in progress, similar to `EALREADY` in POSIX. bad-descriptor Bad descriptor, similar to `EBADF` in POSIX. busy Device or resource busy, similar to `EBUSY` in POSIX. deadlock Resource deadlock would occur, similar to `EDEADLK` in POSIX. quota Storage quota exceeded, similar to `EDQUOT` in POSIX. exist File exists, similar to `EEXIST` in POSIX. file-too-large File too large, similar to `EFBIG` in POSIX. illegal-byte-sequence Illegal byte sequence, similar to `EILSEQ` in POSIX. in-progress Operation in progress, similar to `EINPROGRESS` in POSIX. interrupted Interrupted function, similar to `EINTR` in POSIX. invalid Invalid argument, similar to `EINVAL` in POSIX. io I/O error, similar to `EIO` in POSIX. is-directory Is a directory, similar to `EISDIR` in POSIX. loop Too many levels of symbolic links, similar to `ELOOP` in POSIX. too-many-links Too many links, similar to `EMLINK` in POSIX. message-size Message too large, similar to `EMSGSIZE` in POSIX. name-too-long Filename too long, similar to `ENAMETOOLONG` in POSIX. no-device No such device, similar to `ENODEV` in POSIX. no-entry No such file or directory, similar to `ENOENT` in POSIX. no-lock No locks available, similar to `ENOLCK` in POSIX. insufficient-memory Not enough space, similar to `ENOMEM` in POSIX. insufficient-space No space left on device, similar to `ENOSPC` in POSIX. not-directory Not a directory or a symbolic link to a directory, similar to `ENOTDIR` in POSIX. not-empty Directory not empty, similar to `ENOTEMPTY` in POSIX. not-recoverable State not recoverable, similar to `ENOTRECOVERABLE` in POSIX. unsupported Not supported, similar to `ENOTSUP` and `ENOSYS` in POSIX. no-tty Inappropriate I/O control operation, similar to `ENOTTY` in POSIX. no-such-device No such device or address, similar to `ENXIO` in POSIX. overflow Value too large to be stored in data type, similar to `EOVERFLOW` in POSIX. not-permitted Operation not permitted, similar to `EPERM` in POSIX. pipe Broken pipe, similar to `EPIPE` in POSIX. read-only Read-only file system, similar to `EROFS` in POSIX. invalid-seek Invalid seek, similar to `ESPIPE` in POSIX. text-file-busy Text file busy, similar to `ETXTBSY` in POSIX. cross-device Cross-device link, similar to `EXDEV` in POSIX. enum advice File or memory access pattern advisory information. Enum Cases normal The application has no advice to give on its behavior with respect to the specified data. sequential The application expects to access the specified data sequentially from lower offsets to higher offsets. random The application expects to access the specified data in a random order. will-need The application expects to access the specified data in the near future. dont-need The application expects that it will not access the specified data in the near future. no-reuse The application expects to access the specified data once and then not reuse it thereafter. record metadata-hash-value A 128-bit hash value, split into parts because wasm doesn't have a 128-bit integer type. Record Fields lower : u64 64 bits of a 128-bit hash value. upper : u64 Another 64 bits of a 128-bit hash value. resource descriptor A descriptor is a reference to a filesystem object, which may be a file, directory, named pipe, special file, or other object on which filesystem calls may be made. resource directory-entry-stream A stream of directory entries. Functions [method]descriptor.read-via-stream: func Return a stream for reading from a file, if available. May fail with an error-code describing why the file cannot be read. Multiple read, write, and append streams may be active on the same open file and they do not interfere with each other. Note: This allows using read-stream , which is similar to read in POSIX. Params self : borrow< descriptor > offset : filesize Return values result<own< input-stream >, error-code > [method]descriptor.write-via-stream: func Return a stream for writing to a file, if available. May fail with an error-code describing why the file cannot be written. Note: This allows using write-stream , which is similar to write in POSIX. Params self : borrow< descriptor > offset : filesize Return values result<own< output-stream >, error-code > [method]descriptor.append-via-stream: func Return a stream for appending to a file, if available. May fail with an error-code describing why the file cannot be appended. Note: This allows using write-stream , which is similar to write with O_APPEND in in POSIX. Params self : borrow< descriptor > Return values result<own< output-stream >, error-code > [method]descriptor.advise: func Provide file advisory information on a descriptor. This is similar to posix_fadvise in POSIX. Params self : borrow< descriptor > offset : filesize length : filesize advice : advice Return values result<_, error-code > [method]descriptor.sync-data: func Synchronize the data of a file to disk. This function succeeds with no effect if the file descriptor is not opened for writing. Note: This is similar to fdatasync in POSIX. Params self : borrow< descriptor > Return values result<_, error-code > [method]descriptor.get-flags: func Get flags associated with a descriptor. Note: This returns similar flags to fcntl(fd, F_GETFL) in POSIX. Note: This returns the value that was the fs_flags value returned from fdstat_get in earlier versions of WASI. Params self : borrow< descriptor > Return values result< descriptor-flags , error-code > [method]descriptor.get-type: func Get the dynamic type of a descriptor. Note: This returns the same value as the type field of the fd-stat returned by stat , stat-at and similar. Note: This returns similar flags to the st_mode & S_IFMT value provided by fstat in POSIX. Note: This returns the value that was the fs_filetype value returned from fdstat_get in earlier versions of WASI. Params self : borrow< descriptor > Return values result< descriptor-type , error-code > [method]descriptor.set-size: func Adjust the size of an open file. If this increases the file's size, the extra bytes are filled with zeros. Note: This was called fd_filestat_set_size in earlier versions of WASI. Params self : borrow< descriptor > size : filesize Return values result<_, error-code > [method]descriptor.set-times: func Adjust the timestamps of an open file or directory. Note: This is similar to futimens in POSIX. Note: This was called fd_filestat_set_times in earlier versions of WASI. Params self : borrow< descriptor > data-access-timestamp : new-timestamp data-modification-timestamp : new-timestamp Return values result<_, error-code > [method]descriptor.read: func Read from a descriptor, without using and updating the descriptor's offset. This function returns a list of bytes containing the data that was read, along with a bool which, when true, indicates that the end of the file was reached. The returned list will contain up to length bytes; it may return fewer than requested, if the end of the file is reached or if the I/O operation is interrupted. In the future, this may change to return a stream<u8, error-code> . Note: This is similar to pread in POSIX. Params self : borrow< descriptor > length : filesize offset : filesize Return values result<(list< u8 >, bool ), error-code > [method]descriptor.write: func Write to a descriptor, without using and updating the descriptor's offset. It is valid to write past the end of a file; the file is extended to the extent of the write, with bytes between the previous end and the start of the write set to zero. In the future, this may change to take a stream<u8, error-code> . Note: This is similar to pwrite in POSIX. Params self : borrow< descriptor > buffer : list< u8 > offset : filesize Return values result< filesize , error-code > [method]descriptor.read-directory: func Read directory entries from a directory. On filesystems where directories contain entries referring to themselves and their parents, often named . and .. respectively, these entries are omitted. This always returns a new stream which starts at the beginning of the directory. Multiple streams may be active on the same directory, and they do not interfere with each other. Params self : borrow< descriptor > Return values result<own< directory-entry-stream >, error-code > [method]descriptor.sync: func Synchronize the data and metadata of a file to disk. This function succeeds with no effect if the file descriptor is not opened for writing. Note: This is similar to fsync in POSIX. Params self : borrow< descriptor > Return values result<_, error-code > [method]descriptor.create-directory-at: func Create a directory. Note: This is similar to mkdirat in POSIX. Params self : borrow< descriptor > path : string Return values result<_, error-code > [method]descriptor.stat: func Return the attributes of an open file or directory. Note: This is similar to fstat in POSIX, except that it does not return device and inode information. For testing whether two descriptors refer to the same underlying filesystem object, use is-same-object . To obtain additional data that can be used do determine whether a file has been modified, use metadata-hash . Note: This was called fd_filestat_get in earlier versions of WASI. Params self : borrow< descriptor > Return values result< descriptor-stat , error-code > [method]descriptor.stat-at: func Return the attributes of a file or directory. Note: This is similar to fstatat in POSIX, except that it does not return device and inode information. See the stat description for a discussion of alternatives. Note: This was called path_filestat_get in earlier versions of WASI. Params self : borrow< descriptor > path-flags : path-flags path : string Return values result< descriptor-stat , error-code > [method]descriptor.set-times-at: func Adjust the timestamps of a file or directory. Note: This is similar to utimensat in POSIX. Note: This was called path_filestat_set_times in earlier versions of WASI. Params self : borrow< descriptor > path-flags : path-flags path : string data-access-timestamp : new-timestamp data-modification-timestamp : new-timestamp Return values result<_, error-code > [method]descriptor.link-at: func Create a hard link. Note: This is similar to linkat in POSIX. Params self : borrow< descriptor > old-path-flags : path-flags old-path : string new-descriptor : borrow< descriptor > new-path : string Return values result<_, error-code > [method]descriptor.open-at: func Open a file or directory. The returned descriptor is not guaranteed to be the lowest-numbered descriptor not currently open/ it is randomized to prevent applications from depending on making assumptions about indexes, since this is error-prone in multi-threaded contexts. The returned descriptor is guaranteed to be less than 2**31. If flags contains descriptor-flags::mutate-directory , and the base descriptor doesn't have descriptor-flags::mutate-directory set, open-at fails with error-code::read-only . If flags contains write or mutate-directory , or open-flags contains truncate or create , and the base descriptor doesn't have descriptor-flags::mutate-directory set, open-at fails with error-code::read-only . Note: This is similar to openat in POSIX. Params self : borrow< descriptor > path-flags : path-flags path : string open-flags : open-flags flags : descriptor-flags Return values result<own< descriptor >, error-code > [method]descriptor.readlink-at: func Read the contents of a symbolic link. If the contents contain an absolute or rooted path in the underlying filesystem, this function fails with error-code::not-permitted . Note: This is similar to readlinkat in POSIX. Params self : borrow< descriptor > path : string Return values result< string , error-code > [method]descriptor.remove-directory-at: func Remove a directory. Return error-code::not-empty if the directory is not empty. Note: This is similar to unlinkat(fd, path, AT_REMOVEDIR) in POSIX. Params self : borrow< descriptor > path : string Return values result<_, error-code > [method]descriptor.rename-at: func Rename a filesystem object. Note: This is similar to renameat in POSIX. Params self : borrow< descriptor > old-path : string new-descriptor : borrow< descriptor > new-path : string Return values result<_, error-code > [method]descriptor.symlink-at: func Create a symbolic link (also known as a \"symlink\"). If old-path starts with / , the function fails with error-code::not-permitted . Note: This is similar to symlinkat in POSIX. Params self : borrow< descriptor > old-path : string new-path : string Return values result<_, error-code > [method]descriptor.unlink-file-at: func Unlink a filesystem object that is not a directory. Return error-code::is-directory if the path refers to a directory. Note: This is similar to unlinkat(fd, path, 0) in POSIX. Params self : borrow< descriptor > path : string Return values result<_, error-code > [method]descriptor.is-same-object: func Test whether two descriptors refer to the same filesystem object. In POSIX, this corresponds to testing whether the two descriptors have the same device ( st_dev ) and inode ( st_ino or d_ino ) numbers. wasi-filesystem does not expose device and inode numbers, so this function may be used instead. Params self : borrow< descriptor > other : borrow< descriptor > Return values bool [method]descriptor.metadata-hash: func Return a hash of the metadata associated with a filesystem object referred to by a descriptor. This returns a hash of the last-modification timestamp and file size, and may also include the inode number, device number, birth timestamp, and other metadata fields that may change when the file is modified or replaced. It may also include a secret value chosen by the implementation and not otherwise exposed. Implementations are encourated to provide the following properties: If the file is not modified or replaced, the computed hash value should usually not change. If the object is modified or replaced, the computed hash value should usually change. The inputs to the hash should not be easily computable from the computed hash. However, none of these is required. Params self : borrow< descriptor > Return values result< metadata-hash-value , error-code > [method]descriptor.metadata-hash-at: func Return a hash of the metadata associated with a filesystem object referred to by a directory descriptor and a relative path. This performs the same hash computation as metadata-hash . Params self : borrow< descriptor > path-flags : path-flags path : string Return values result< metadata-hash-value , error-code > [method]directory-entry-stream.read-directory-entry: func Read a single directory entry from a directory-entry-stream . Params self : borrow< directory-entry-stream > Return values result<option< directory-entry >, error-code > filesystem-error-code: func Attempts to extract a filesystem-related error-code from the stream error provided. Stream operations which return stream-error::last-operation-failed have a payload with more information about the operation that failed. This payload can be passed through to this function to see if there's filesystem-related information about the error to return. Note that this function is fallible because not all stream-related errors are filesystem-related errors. Params err : borrow< error > Return values option< error-code > Import interface wasi:filesystem/preopens@0.2.0 Types type descriptor descriptor ---- Functions get-directories: func Return the set of preopened directories, and their path. Return values list<(own< descriptor >, string )> Import interface wasi:random/random@0.2.0 WASI Random is a random data API. It is intended to be portable at least between Unix-family platforms and Windows. Functions get-random-bytes: func Return len cryptographically-secure random or pseudo-random bytes. This function must produce data at least as cryptographically secure and fast as an adequately seeded cryptographically-secure pseudo-random number generator (CSPRNG). It must not block, from the perspective of the calling program, under any circumstances, including on the first request and on requests for numbers of bytes. The returned data must always be unpredictable. This function must always return fresh data. Deterministic environments must omit this function, rather than implementing it with deterministic data. Params len : u64 Return values list< u8 > get-random-u64: func Return a cryptographically-secure random or pseudo-random u64 value. This function returns the same type of data as get-random-bytes , represented as a u64 . Return values u64 Import interface wasi:random/insecure@0.2.0 The insecure interface for insecure pseudo-random numbers. It is intended to be portable at least between Unix-family platforms and Windows. Functions get-insecure-random-bytes: func Return len insecure pseudo-random bytes. This function is not cryptographically secure. Do not use it for anything related to security. There are no requirements on the values of the returned bytes, however implementations are encouraged to return evenly distributed values with a long period. Params len : u64 Return values list< u8 > get-insecure-random-u64: func Return an insecure pseudo-random u64 value. This function returns the same type of pseudo-random data as get-insecure-random-bytes , represented as a u64 . Return values u64 Import interface wasi:random/insecure-seed@0.2.0 The insecure-seed interface for seeding hash-map DoS resistance. It is intended to be portable at least between Unix-family platforms and Windows. Functions insecure-seed: func Return a 128-bit value that may contain a pseudo-random value. The returned value is not required to be computed from a CSPRNG, and may even be entirely deterministic. Host implementations are encouraged to provide pseudo-random values to any program exposed to attacker-controlled content, to enable DoS protection built into many languages' hash-map implementations. This function is intended to only be called once, by a source language to initialize Denial Of Service (DoS) protection in its hash-map implementation. Expected future evolution This will likely be changed to a value import, to prevent it from being called multiple times and potentially used for purposes other than DoS protection. Return values ( u64 , u64 )","title":"Cli"},{"location":"api/wasi-hermes/wasi/clock/","text":"World imports Imports: interface wasi:clocks/monotonic-clock@0.2.0 interface wasi:clocks/wall-clock@0.2.0 Import interface wasi:clocks/monotonic-clock@0.2.0 WASI Monotonic Clock is a clock API intended to let users measure elapsed time. It is intended to be portable at least between Unix-family platforms and Windows. A monotonic clock is a clock which has an unspecified initial value, and successive reads of the clock will produce non-decreasing values. It is intended for measuring elapsed time. Types type instant u64 Hermes does not support `poll` use wasi:io/poll@0.2.0.{pollable}; An instant in time, in nanoseconds. An instant is relative to an unspecified initial value, and can only be compared to instances from the same monotonic-clock. type duration u64 A duration of time, in nanoseconds. Functions now: func Read the current value of the clock. The clock is monotonic, therefore calling this function repeatedly will produce a sequence of non-decreasing values. Return values instant resolution: func Query the resolution of the clock. Returns the duration of time corresponding to a clock tick. Return values duration Import interface wasi:clocks/wall-clock@0.2.0 WASI Wall Clock is a clock API intended to let users query the current time. The name \"wall\" makes an analogy to a \"clock on the wall\", which is not necessarily monotonic as it may be reset. It is intended to be portable at least between Unix-family platforms and Windows. A wall clock is a clock which measures the date and time according to some external reference. External references may be reset, so this clock is not necessarily monotonic, making it unsuitable for measuring elapsed time. It is intended for reporting the current date and time for humans. Types record datetime A time and date in seconds plus nanoseconds. Record Fields seconds : u64 nanoseconds : u32 Functions now: func Read the current value of the clock. This clock is not monotonic, therefore calling this function repeatedly will not necessarily produce a sequence of non-decreasing values. The returned timestamps represent the number of seconds since 1970-01-01T00:00:00Z, also known as POSIX's Seconds Since the Epoch , also known as Unix Time . The nanoseconds field of the output is always less than 1000000000. Return values datetime resolution: func Query the resolution of the clock. The nanoseconds field of the output is always less than 1000000000. Return values datetime","title":"Clock"},{"location":"api/wasi-hermes/wasi/filesystem/","text":"World imports Imports: interface wasi:io/error@0.2.0 interface wasi:io/streams@0.2.0 interface wasi:clocks/wall-clock@0.2.0 interface wasi:filesystem/types@0.2.0 interface wasi:filesystem/preopens@0.2.0 Import interface wasi:io/error@0.2.0 Types resource error A resource which represents some error information. The only method provided by this resource is to-debug-string , which provides some human-readable information about the error. In the wasi:io package, this resource is returned through the wasi:io/streams/stream-error type. To provide more specific error information, other interfaces may provide functions to further \"downcast\" this error into more specific error information. For example, error s returned in streams derived from filesystem types to be described using the filesystem's own error-code type, using the function wasi:filesystem/types/filesystem-error-code , which takes a parameter borrow<error> and returns option<wasi:filesystem/types/error-code> . The set of functions which can \"downcast\" an error into a more concrete type is open. Functions [method]error.to-debug-string: func Returns a string that is suitable to assist humans in debugging this error. WARNING: The returned string should not be consumed mechanically! It may change across platforms, hosts, or other implementation details. Parsing this string is a major platform-compatibility hazard. Params self : borrow< error > Return values string Import interface wasi:io/streams@0.2.0 WASI I/O is an I/O abstraction API which is currently focused on providing stream types. In the future, the component model is expected to add built-in stream types; when it does, they are expected to subsume this API. Types type error error #### `variant stream-error` // Hermes does not support poll use poll.{pollable}; */ An error for input-stream and output-stream operations. Variant Cases last-operation-failed : own< error > The last operation (a write or flush) failed before completion. More information is available in the error payload. closed The stream is closed: no more input will be accepted by the stream. A closed output-stream will return this error on all future operations. resource input-stream An input bytestream. input-stream s are non-blocking to the extent practical on underlying platforms. I/O operations always return promptly; if fewer bytes are promptly available than requested, they return the number of bytes promptly available, which could even be zero. To wait for data to be available, use the subscribe function to obtain a pollable which can be polled for using wasi:io/poll . resource output-stream An output bytestream. output-stream s are non-blocking to the extent practical on underlying platforms. Except where specified otherwise, I/O operations also always return promptly, after the number of bytes that can be written promptly, which could even be zero. To wait for the stream to be ready to accept data, the subscribe function to obtain a pollable which can be polled for using wasi:io/poll . Functions [method]input-stream.read: func Perform a non-blocking read from the stream. This function returns a list of bytes containing the read data, when successful. The returned list will contain up to len bytes; it may return fewer than requested, but not more. The list is empty when no bytes are available for reading at this time. The pollable given by subscribe will be ready when more bytes are available. This function fails with a stream-error when the operation encounters an error, giving last-operation-failed , or when the stream is closed, giving closed . When the caller gives a len of 0, it represents a request to read 0 bytes. If the stream is still open, this call should succeed and return an empty list, or otherwise fail with closed . The len parameter is a u64 , which could represent a list of u8 which is not possible to allocate in wasm32, or not desirable to allocate as as a return value by the callee. The callee may return a list of bytes less than len in size while more bytes are available for reading. Params self : borrow< input-stream > len : u64 Return values result<list< u8 >, stream-error > [method]input-stream.blocking-read: func Read bytes from a stream, after blocking until at least one byte can be read. Except for blocking, behavior is identical to read . Params self : borrow< input-stream > len : u64 Return values result<list< u8 >, stream-error > [method]input-stream.skip: func Skip bytes from a stream. Returns number of bytes skipped. Behaves identical to read , except instead of returning a list of bytes, returns the number of bytes consumed from the stream. Params self : borrow< input-stream > len : u64 Return values result< u64 , stream-error > [method]input-stream.blocking-skip: func Skip bytes from a stream, after blocking until at least one byte can be skipped. Except for blocking behavior, identical to skip . Params self : borrow< input-stream > len : u64 Return values result< u64 , stream-error > [method]output-stream.check-write: func Check readiness for writing. This function never blocks. Returns the number of bytes permitted for the next call to write , or an error. Calling write with more bytes than this function has permitted will trap. When this function returns 0 bytes, the subscribe pollable will become ready when this function will report at least 1 byte, or an error. Params self : borrow< output-stream > Return values result< u64 , stream-error > [method]output-stream.write: func Perform a write. This function never blocks. Precondition: check-write gave permit of Ok(n) and contents has a length of less than or equal to n. Otherwise, this function will trap. returns Err(closed) without writing if the stream has closed since the last call to check-write provided a permit. Params self : borrow< output-stream > contents : list< u8 > Return values result<_, stream-error > [method]output-stream.blocking-write-and-flush: func Perform a write of up to 4096 bytes, and then flush the stream. Block until all of these operations are complete, or an error occurs. This is a convenience wrapper around the use of check-write , subscribe , write , and flush , and is implemented with the following pseudo-code: let pollable = this.subscribe(); while !contents.is_empty() { // Wait for the stream to become writable poll-one(pollable); let Ok(n) = this.check-write(); // eliding error handling let len = min(n, contents.len()); let (chunk, rest) = contents.split_at(len); this.write(chunk ); // eliding error handling contents = rest; } this.flush(); // Wait for completion of `flush` poll-one(pollable); // Check for any errors that arose during `flush` let _ = this.check-write(); // eliding error handling Params self : borrow< output-stream > contents : list< u8 > Return values result<_, stream-error > [method]output-stream.flush: func Request to flush buffered output. This function never blocks. This tells the output-stream that the caller intends any buffered output to be flushed. the output which is expected to be flushed is all that has been passed to write prior to this call. Upon calling this function, the output-stream will not accept any writes ( check-write will return ok(0) ) until the flush has completed. The subscribe pollable will become ready when the flush has completed and the stream can accept more writes. Params self : borrow< output-stream > Return values result<_, stream-error > [method]output-stream.blocking-flush: func Request to flush buffered output, and block until flush completes and stream is ready for writing again. Params self : borrow< output-stream > Return values result<_, stream-error > [method]output-stream.write-zeroes: func /// Create a pollable which will resolve once the output-stream /// is ready for more writing, or an error has occured. When this /// pollable is ready, check-write will return ok(n) with n>0, or an /// error. /// /// If the stream is closed, this pollable is always ready immediately. /// /// The created pollable is a child resource of the output-stream . /// Implementations may trap if the output-stream is dropped before /// all derived pollable s created with this function are dropped. subscribe: func() -> pollable; */ Write zeroes to a stream. this should be used precisely like write with the exact same preconditions (must use check-write first), but instead of passing a list of bytes, you simply pass the number of zero-bytes that should be written. Params self : borrow< output-stream > len : u64 Return values result<_, stream-error > [method]output-stream.blocking-write-zeroes-and-flush: func Perform a write of up to 4096 zeroes, and then flush the stream. Block until all of these operations are complete, or an error occurs. This is a convenience wrapper around the use of check-write , subscribe , write-zeroes , and flush , and is implemented with the following pseudo-code: let pollable = this.subscribe(); while num_zeroes != 0 { // Wait for the stream to become writable poll-one(pollable); let Ok(n) = this.check-write(); // eliding error handling let len = min(n, num_zeroes); this.write-zeroes(len); // eliding error handling num_zeroes -= len; } this.flush(); // Wait for completion of `flush` poll-one(pollable); // Check for any errors that arose during `flush` let _ = this.check-write(); // eliding error handling Params self : borrow< output-stream > len : u64 Return values result<_, stream-error > [method]output-stream.splice: func Read from one stream and write to another. The behavior of splice is equivelant to: calling check-write on the output-stream calling read on the input-stream with the smaller of the check-write permitted length and the len provided to splice calling write on the output-stream with that read data. Any error reported by the call to check-write , read , or write ends the splice and reports that error. This function returns the number of bytes transferred; it may be less than len . Params self : borrow< output-stream > src : borrow< input-stream > len : u64 Return values result< u64 , stream-error > [method]output-stream.blocking-splice: func Read from one stream and write to another, with blocking. This is similar to splice , except that it blocks until the output-stream is ready for writing, and the input-stream is ready for reading, before performing the splice . Params self : borrow< output-stream > src : borrow< input-stream > len : u64 Return values result< u64 , stream-error > Import interface wasi:clocks/wall-clock@0.2.0 WASI Wall Clock is a clock API intended to let users query the current time. The name \"wall\" makes an analogy to a \"clock on the wall\", which is not necessarily monotonic as it may be reset. It is intended to be portable at least between Unix-family platforms and Windows. A wall clock is a clock which measures the date and time according to some external reference. External references may be reset, so this clock is not necessarily monotonic, making it unsuitable for measuring elapsed time. It is intended for reporting the current date and time for humans. Types record datetime A time and date in seconds plus nanoseconds. Record Fields seconds : u64 nanoseconds : u32 Functions now: func Read the current value of the clock. This clock is not monotonic, therefore calling this function repeatedly will not necessarily produce a sequence of non-decreasing values. The returned timestamps represent the number of seconds since 1970-01-01T00:00:00Z, also known as POSIX's Seconds Since the Epoch , also known as Unix Time . The nanoseconds field of the output is always less than 1000000000. Return values datetime resolution: func Query the resolution of the clock. The nanoseconds field of the output is always less than 1000000000. Return values datetime Import interface wasi:filesystem/types@0.2.0 WASI filesystem is a filesystem API primarily intended to let users run WASI programs that access their files on their existing filesystems, without significant overhead. It is intended to be roughly portable between Unix-family platforms and Windows, though it does not hide many of the major differences. Paths are passed as interface-type string s, meaning they must consist of a sequence of Unicode Scalar Values (USVs). Some filesystems may contain paths which are not accessible by this API. The directory separator in WASI is always the forward-slash ( / ). All paths in WASI are relative paths, and are interpreted relative to a descriptor referring to a base directory. If a path argument to any WASI function starts with / , or if any step of resolving a path , including .. and symbolic link steps, reaches a directory outside of the base directory, or reaches a symlink to an absolute or rooted path in the underlying filesystem, the function fails with error-code::not-permitted . For more information about WASI path resolution and sandboxing, see WASI filesystem path resolution . Types type input-stream input-stream #### `type output-stream` [`output-stream`](#output_stream) #### `type error` [`error`](#error) #### `type datetime` [`datetime`](#datetime) #### `type filesize` `u64` File size or length of a region within a file. enum descriptor-type The type of a filesystem object referenced by a descriptor. Note: This was called filetype in earlier versions of WASI. Enum Cases unknown The type of the descriptor or file is unknown or is different from any of the other types specified. block-device The descriptor refers to a block device inode. character-device The descriptor refers to a character device inode. directory The descriptor refers to a directory inode. fifo The descriptor refers to a named pipe. symbolic-link The file refers to a symbolic link inode. regular-file The descriptor refers to a regular file inode. socket The descriptor refers to a socket. flags descriptor-flags Descriptor flags. Note: This was called fdflags in earlier versions of WASI. Flags members read : Read mode: Data can be read. write : Write mode: Data can be written to. file-integrity-sync : Request that writes be performed according to synchronized I/O file integrity completion. The data stored in the file and the file's metadata are synchronized. This is similar to `O_SYNC` in POSIX. The precise semantics of this operation have not yet been defined for WASI. At this time, it should be interpreted as a request, and not a requirement. data-integrity-sync : Request that writes be performed according to synchronized I/O data integrity completion. Only the data stored in the file is synchronized. This is similar to `O_DSYNC` in POSIX. The precise semantics of this operation have not yet been defined for WASI. At this time, it should be interpreted as a request, and not a requirement. requested-write-sync : Requests that reads be performed at the same level of integrety requested for writes. This is similar to `O_RSYNC` in POSIX. The precise semantics of this operation have not yet been defined for WASI. At this time, it should be interpreted as a request, and not a requirement. mutate-directory : Mutating directories mode: Directory contents may be mutated. When this flag is unset on a descriptor, operations using the descriptor which would create, rename, delete, modify the data or metadata of filesystem objects, or obtain another handle which would permit any of those, shall fail with error-code::read-only if they would otherwise succeed. This may only be set on directories. flags path-flags Flags determining the method of how paths are resolved. Flags members symlink-follow : As long as the resolved path corresponds to a symbolic link, it is expanded. flags open-flags Open flags used by open-at . Flags members create : Create file if it does not exist, similar to `O_CREAT` in POSIX. directory : Fail if not a directory, similar to `O_DIRECTORY` in POSIX. exclusive : Fail if file already exists, similar to `O_EXCL` in POSIX. truncate : Truncate file to size 0, similar to `O_TRUNC` in POSIX. type link-count u64 Number of hard links to an inode. record descriptor-stat File attributes. Note: This was called filestat in earlier versions of WASI. Record Fields type : descriptor-type File type. link-count : link-count Number of hard links to the file. size : filesize For regular files, the file size in bytes. For symbolic links, the length in bytes of the pathname contained in the symbolic link. data-access-timestamp : option< datetime > Last data access timestamp. If the option is none, the platform doesn't maintain an access timestamp for this file. data-modification-timestamp : option< datetime > Last data modification timestamp. If the option is none, the platform doesn't maintain a modification timestamp for this file. status-change-timestamp : option< datetime > Last file status-change timestamp. If the option is none, the platform doesn't maintain a status-change timestamp for this file. variant new-timestamp When setting a timestamp, this gives the value to set it to. Variant Cases no-change Leave the timestamp set to its previous value. now Set the timestamp to the current time of the system clock associated with the filesystem. timestamp : datetime Set the timestamp to the given value. record directory-entry A directory entry. Record Fields type : descriptor-type The type of the file referred to by this directory entry. name : string The name of the object. enum error-code Error codes returned by functions, similar to errno in POSIX. Not all of these error codes are returned by the functions provided by this API; some are used in higher-level library layers, and others are provided merely for alignment with POSIX. Enum Cases access Permission denied, similar to `EACCES` in POSIX. would-block Resource unavailable, or operation would block, similar to `EAGAIN` and `EWOULDBLOCK` in POSIX. already Connection already in progress, similar to `EALREADY` in POSIX. bad-descriptor Bad descriptor, similar to `EBADF` in POSIX. busy Device or resource busy, similar to `EBUSY` in POSIX. deadlock Resource deadlock would occur, similar to `EDEADLK` in POSIX. quota Storage quota exceeded, similar to `EDQUOT` in POSIX. exist File exists, similar to `EEXIST` in POSIX. file-too-large File too large, similar to `EFBIG` in POSIX. illegal-byte-sequence Illegal byte sequence, similar to `EILSEQ` in POSIX. in-progress Operation in progress, similar to `EINPROGRESS` in POSIX. interrupted Interrupted function, similar to `EINTR` in POSIX. invalid Invalid argument, similar to `EINVAL` in POSIX. io I/O error, similar to `EIO` in POSIX. is-directory Is a directory, similar to `EISDIR` in POSIX. loop Too many levels of symbolic links, similar to `ELOOP` in POSIX. too-many-links Too many links, similar to `EMLINK` in POSIX. message-size Message too large, similar to `EMSGSIZE` in POSIX. name-too-long Filename too long, similar to `ENAMETOOLONG` in POSIX. no-device No such device, similar to `ENODEV` in POSIX. no-entry No such file or directory, similar to `ENOENT` in POSIX. no-lock No locks available, similar to `ENOLCK` in POSIX. insufficient-memory Not enough space, similar to `ENOMEM` in POSIX. insufficient-space No space left on device, similar to `ENOSPC` in POSIX. not-directory Not a directory or a symbolic link to a directory, similar to `ENOTDIR` in POSIX. not-empty Directory not empty, similar to `ENOTEMPTY` in POSIX. not-recoverable State not recoverable, similar to `ENOTRECOVERABLE` in POSIX. unsupported Not supported, similar to `ENOTSUP` and `ENOSYS` in POSIX. no-tty Inappropriate I/O control operation, similar to `ENOTTY` in POSIX. no-such-device No such device or address, similar to `ENXIO` in POSIX. overflow Value too large to be stored in data type, similar to `EOVERFLOW` in POSIX. not-permitted Operation not permitted, similar to `EPERM` in POSIX. pipe Broken pipe, similar to `EPIPE` in POSIX. read-only Read-only file system, similar to `EROFS` in POSIX. invalid-seek Invalid seek, similar to `ESPIPE` in POSIX. text-file-busy Text file busy, similar to `ETXTBSY` in POSIX. cross-device Cross-device link, similar to `EXDEV` in POSIX. enum advice File or memory access pattern advisory information. Enum Cases normal The application has no advice to give on its behavior with respect to the specified data. sequential The application expects to access the specified data sequentially from lower offsets to higher offsets. random The application expects to access the specified data in a random order. will-need The application expects to access the specified data in the near future. dont-need The application expects that it will not access the specified data in the near future. no-reuse The application expects to access the specified data once and then not reuse it thereafter. record metadata-hash-value A 128-bit hash value, split into parts because wasm doesn't have a 128-bit integer type. Record Fields lower : u64 64 bits of a 128-bit hash value. upper : u64 Another 64 bits of a 128-bit hash value. resource descriptor A descriptor is a reference to a filesystem object, which may be a file, directory, named pipe, special file, or other object on which filesystem calls may be made. resource directory-entry-stream A stream of directory entries. Functions [method]descriptor.read-via-stream: func Return a stream for reading from a file, if available. May fail with an error-code describing why the file cannot be read. Multiple read, write, and append streams may be active on the same open file and they do not interfere with each other. Note: This allows using read-stream , which is similar to read in POSIX. Params self : borrow< descriptor > offset : filesize Return values result<own< input-stream >, error-code > [method]descriptor.write-via-stream: func Return a stream for writing to a file, if available. May fail with an error-code describing why the file cannot be written. Note: This allows using write-stream , which is similar to write in POSIX. Params self : borrow< descriptor > offset : filesize Return values result<own< output-stream >, error-code > [method]descriptor.append-via-stream: func Return a stream for appending to a file, if available. May fail with an error-code describing why the file cannot be appended. Note: This allows using write-stream , which is similar to write with O_APPEND in in POSIX. Params self : borrow< descriptor > Return values result<own< output-stream >, error-code > [method]descriptor.advise: func Provide file advisory information on a descriptor. This is similar to posix_fadvise in POSIX. Params self : borrow< descriptor > offset : filesize length : filesize advice : advice Return values result<_, error-code > [method]descriptor.sync-data: func Synchronize the data of a file to disk. This function succeeds with no effect if the file descriptor is not opened for writing. Note: This is similar to fdatasync in POSIX. Params self : borrow< descriptor > Return values result<_, error-code > [method]descriptor.get-flags: func Get flags associated with a descriptor. Note: This returns similar flags to fcntl(fd, F_GETFL) in POSIX. Note: This returns the value that was the fs_flags value returned from fdstat_get in earlier versions of WASI. Params self : borrow< descriptor > Return values result< descriptor-flags , error-code > [method]descriptor.get-type: func Get the dynamic type of a descriptor. Note: This returns the same value as the type field of the fd-stat returned by stat , stat-at and similar. Note: This returns similar flags to the st_mode & S_IFMT value provided by fstat in POSIX. Note: This returns the value that was the fs_filetype value returned from fdstat_get in earlier versions of WASI. Params self : borrow< descriptor > Return values result< descriptor-type , error-code > [method]descriptor.set-size: func Adjust the size of an open file. If this increases the file's size, the extra bytes are filled with zeros. Note: This was called fd_filestat_set_size in earlier versions of WASI. Params self : borrow< descriptor > size : filesize Return values result<_, error-code > [method]descriptor.set-times: func Adjust the timestamps of an open file or directory. Note: This is similar to futimens in POSIX. Note: This was called fd_filestat_set_times in earlier versions of WASI. Params self : borrow< descriptor > data-access-timestamp : new-timestamp data-modification-timestamp : new-timestamp Return values result<_, error-code > [method]descriptor.read: func Read from a descriptor, without using and updating the descriptor's offset. This function returns a list of bytes containing the data that was read, along with a bool which, when true, indicates that the end of the file was reached. The returned list will contain up to length bytes; it may return fewer than requested, if the end of the file is reached or if the I/O operation is interrupted. In the future, this may change to return a stream<u8, error-code> . Note: This is similar to pread in POSIX. Params self : borrow< descriptor > length : filesize offset : filesize Return values result<(list< u8 >, bool ), error-code > [method]descriptor.write: func Write to a descriptor, without using and updating the descriptor's offset. It is valid to write past the end of a file; the file is extended to the extent of the write, with bytes between the previous end and the start of the write set to zero. In the future, this may change to take a stream<u8, error-code> . Note: This is similar to pwrite in POSIX. Params self : borrow< descriptor > buffer : list< u8 > offset : filesize Return values result< filesize , error-code > [method]descriptor.read-directory: func Read directory entries from a directory. On filesystems where directories contain entries referring to themselves and their parents, often named . and .. respectively, these entries are omitted. This always returns a new stream which starts at the beginning of the directory. Multiple streams may be active on the same directory, and they do not interfere with each other. Params self : borrow< descriptor > Return values result<own< directory-entry-stream >, error-code > [method]descriptor.sync: func Synchronize the data and metadata of a file to disk. This function succeeds with no effect if the file descriptor is not opened for writing. Note: This is similar to fsync in POSIX. Params self : borrow< descriptor > Return values result<_, error-code > [method]descriptor.create-directory-at: func Create a directory. Note: This is similar to mkdirat in POSIX. Params self : borrow< descriptor > path : string Return values result<_, error-code > [method]descriptor.stat: func Return the attributes of an open file or directory. Note: This is similar to fstat in POSIX, except that it does not return device and inode information. For testing whether two descriptors refer to the same underlying filesystem object, use is-same-object . To obtain additional data that can be used do determine whether a file has been modified, use metadata-hash . Note: This was called fd_filestat_get in earlier versions of WASI. Params self : borrow< descriptor > Return values result< descriptor-stat , error-code > [method]descriptor.stat-at: func Return the attributes of a file or directory. Note: This is similar to fstatat in POSIX, except that it does not return device and inode information. See the stat description for a discussion of alternatives. Note: This was called path_filestat_get in earlier versions of WASI. Params self : borrow< descriptor > path-flags : path-flags path : string Return values result< descriptor-stat , error-code > [method]descriptor.set-times-at: func Adjust the timestamps of a file or directory. Note: This is similar to utimensat in POSIX. Note: This was called path_filestat_set_times in earlier versions of WASI. Params self : borrow< descriptor > path-flags : path-flags path : string data-access-timestamp : new-timestamp data-modification-timestamp : new-timestamp Return values result<_, error-code > [method]descriptor.link-at: func Create a hard link. Note: This is similar to linkat in POSIX. Params self : borrow< descriptor > old-path-flags : path-flags old-path : string new-descriptor : borrow< descriptor > new-path : string Return values result<_, error-code > [method]descriptor.open-at: func Open a file or directory. The returned descriptor is not guaranteed to be the lowest-numbered descriptor not currently open/ it is randomized to prevent applications from depending on making assumptions about indexes, since this is error-prone in multi-threaded contexts. The returned descriptor is guaranteed to be less than 2**31. If flags contains descriptor-flags::mutate-directory , and the base descriptor doesn't have descriptor-flags::mutate-directory set, open-at fails with error-code::read-only . If flags contains write or mutate-directory , or open-flags contains truncate or create , and the base descriptor doesn't have descriptor-flags::mutate-directory set, open-at fails with error-code::read-only . Note: This is similar to openat in POSIX. Params self : borrow< descriptor > path-flags : path-flags path : string open-flags : open-flags flags : descriptor-flags Return values result<own< descriptor >, error-code > [method]descriptor.readlink-at: func Read the contents of a symbolic link. If the contents contain an absolute or rooted path in the underlying filesystem, this function fails with error-code::not-permitted . Note: This is similar to readlinkat in POSIX. Params self : borrow< descriptor > path : string Return values result< string , error-code > [method]descriptor.remove-directory-at: func Remove a directory. Return error-code::not-empty if the directory is not empty. Note: This is similar to unlinkat(fd, path, AT_REMOVEDIR) in POSIX. Params self : borrow< descriptor > path : string Return values result<_, error-code > [method]descriptor.rename-at: func Rename a filesystem object. Note: This is similar to renameat in POSIX. Params self : borrow< descriptor > old-path : string new-descriptor : borrow< descriptor > new-path : string Return values result<_, error-code > [method]descriptor.symlink-at: func Create a symbolic link (also known as a \"symlink\"). If old-path starts with / , the function fails with error-code::not-permitted . Note: This is similar to symlinkat in POSIX. Params self : borrow< descriptor > old-path : string new-path : string Return values result<_, error-code > [method]descriptor.unlink-file-at: func Unlink a filesystem object that is not a directory. Return error-code::is-directory if the path refers to a directory. Note: This is similar to unlinkat(fd, path, 0) in POSIX. Params self : borrow< descriptor > path : string Return values result<_, error-code > [method]descriptor.is-same-object: func Test whether two descriptors refer to the same filesystem object. In POSIX, this corresponds to testing whether the two descriptors have the same device ( st_dev ) and inode ( st_ino or d_ino ) numbers. wasi-filesystem does not expose device and inode numbers, so this function may be used instead. Params self : borrow< descriptor > other : borrow< descriptor > Return values bool [method]descriptor.metadata-hash: func Return a hash of the metadata associated with a filesystem object referred to by a descriptor. This returns a hash of the last-modification timestamp and file size, and may also include the inode number, device number, birth timestamp, and other metadata fields that may change when the file is modified or replaced. It may also include a secret value chosen by the implementation and not otherwise exposed. Implementations are encourated to provide the following properties: If the file is not modified or replaced, the computed hash value should usually not change. If the object is modified or replaced, the computed hash value should usually change. The inputs to the hash should not be easily computable from the computed hash. However, none of these is required. Params self : borrow< descriptor > Return values result< metadata-hash-value , error-code > [method]descriptor.metadata-hash-at: func Return a hash of the metadata associated with a filesystem object referred to by a directory descriptor and a relative path. This performs the same hash computation as metadata-hash . Params self : borrow< descriptor > path-flags : path-flags path : string Return values result< metadata-hash-value , error-code > [method]directory-entry-stream.read-directory-entry: func Read a single directory entry from a directory-entry-stream . Params self : borrow< directory-entry-stream > Return values result<option< directory-entry >, error-code > filesystem-error-code: func Attempts to extract a filesystem-related error-code from the stream error provided. Stream operations which return stream-error::last-operation-failed have a payload with more information about the operation that failed. This payload can be passed through to this function to see if there's filesystem-related information about the error to return. Note that this function is fallible because not all stream-related errors are filesystem-related errors. Params err : borrow< error > Return values option< error-code > Import interface wasi:filesystem/preopens@0.2.0 Types type descriptor descriptor ---- Functions get-directories: func Return the set of preopened directories, and their path. Return values list<(own< descriptor >, string )>","title":"Filesystem"},{"location":"api/wasi-hermes/wasi/http/","text":"World proxy The wasi:http/proxy world captures a widely-implementable intersection of hosts that includes HTTP forward and reverse proxies. Components targeting this world may concurrently stream in and out any number of incoming and outgoing HTTP requests. Imports: interface wasi:random/random@0.2.0 interface wasi:io/error@0.2.0 interface wasi:io/streams@0.2.0 interface wasi:cli/stdout@0.2.0 interface wasi:cli/stderr@0.2.0 interface wasi:cli/stdin@0.2.0 interface wasi:clocks/monotonic-clock@0.2.0 interface wasi:http/types@0.2.0 interface wasi:http/outgoing-handler@0.2.0 interface wasi:clocks/wall-clock@0.2.0 Exports: interface wasi:http/incoming-handler@0.2.0 Import interface wasi:random/random@0.2.0 WASI Random is a random data API. It is intended to be portable at least between Unix-family platforms and Windows. Functions get-random-bytes: func Return len cryptographically-secure random or pseudo-random bytes. This function must produce data at least as cryptographically secure and fast as an adequately seeded cryptographically-secure pseudo-random number generator (CSPRNG). It must not block, from the perspective of the calling program, under any circumstances, including on the first request and on requests for numbers of bytes. The returned data must always be unpredictable. This function must always return fresh data. Deterministic environments must omit this function, rather than implementing it with deterministic data. Params len : u64 Return values list< u8 > get-random-u64: func Return a cryptographically-secure random or pseudo-random u64 value. This function returns the same type of data as get-random-bytes , represented as a u64 . Return values u64 Import interface wasi:io/error@0.2.0 Types resource error A resource which represents some error information. The only method provided by this resource is to-debug-string , which provides some human-readable information about the error. In the wasi:io package, this resource is returned through the wasi:io/streams/stream-error type. To provide more specific error information, other interfaces may provide functions to further \"downcast\" this error into more specific error information. For example, error s returned in streams derived from filesystem types to be described using the filesystem's own error-code type, using the function wasi:filesystem/types/filesystem-error-code , which takes a parameter borrow<error> and returns option<wasi:filesystem/types/error-code> . The set of functions which can \"downcast\" an error into a more concrete type is open. Functions [method]error.to-debug-string: func Returns a string that is suitable to assist humans in debugging this error. WARNING: The returned string should not be consumed mechanically! It may change across platforms, hosts, or other implementation details. Parsing this string is a major platform-compatibility hazard. Params self : borrow< error > Return values string Import interface wasi:io/streams@0.2.0 WASI I/O is an I/O abstraction API which is currently focused on providing stream types. In the future, the component model is expected to add built-in stream types; when it does, they are expected to subsume this API. Types type error error #### `variant stream-error` // Hermes does not support poll use poll.{pollable}; */ An error for input-stream and output-stream operations. Variant Cases last-operation-failed : own< error > The last operation (a write or flush) failed before completion. More information is available in the error payload. closed The stream is closed: no more input will be accepted by the stream. A closed output-stream will return this error on all future operations. resource input-stream An input bytestream. input-stream s are non-blocking to the extent practical on underlying platforms. I/O operations always return promptly; if fewer bytes are promptly available than requested, they return the number of bytes promptly available, which could even be zero. To wait for data to be available, use the subscribe function to obtain a pollable which can be polled for using wasi:io/poll . resource output-stream An output bytestream. output-stream s are non-blocking to the extent practical on underlying platforms. Except where specified otherwise, I/O operations also always return promptly, after the number of bytes that can be written promptly, which could even be zero. To wait for the stream to be ready to accept data, the subscribe function to obtain a pollable which can be polled for using wasi:io/poll . Functions [method]input-stream.read: func Perform a non-blocking read from the stream. This function returns a list of bytes containing the read data, when successful. The returned list will contain up to len bytes; it may return fewer than requested, but not more. The list is empty when no bytes are available for reading at this time. The pollable given by subscribe will be ready when more bytes are available. This function fails with a stream-error when the operation encounters an error, giving last-operation-failed , or when the stream is closed, giving closed . When the caller gives a len of 0, it represents a request to read 0 bytes. If the stream is still open, this call should succeed and return an empty list, or otherwise fail with closed . The len parameter is a u64 , which could represent a list of u8 which is not possible to allocate in wasm32, or not desirable to allocate as as a return value by the callee. The callee may return a list of bytes less than len in size while more bytes are available for reading. Params self : borrow< input-stream > len : u64 Return values result<list< u8 >, stream-error > [method]input-stream.blocking-read: func Read bytes from a stream, after blocking until at least one byte can be read. Except for blocking, behavior is identical to read . Params self : borrow< input-stream > len : u64 Return values result<list< u8 >, stream-error > [method]input-stream.skip: func Skip bytes from a stream. Returns number of bytes skipped. Behaves identical to read , except instead of returning a list of bytes, returns the number of bytes consumed from the stream. Params self : borrow< input-stream > len : u64 Return values result< u64 , stream-error > [method]input-stream.blocking-skip: func Skip bytes from a stream, after blocking until at least one byte can be skipped. Except for blocking behavior, identical to skip . Params self : borrow< input-stream > len : u64 Return values result< u64 , stream-error > [method]output-stream.check-write: func Check readiness for writing. This function never blocks. Returns the number of bytes permitted for the next call to write , or an error. Calling write with more bytes than this function has permitted will trap. When this function returns 0 bytes, the subscribe pollable will become ready when this function will report at least 1 byte, or an error. Params self : borrow< output-stream > Return values result< u64 , stream-error > [method]output-stream.write: func Perform a write. This function never blocks. Precondition: check-write gave permit of Ok(n) and contents has a length of less than or equal to n. Otherwise, this function will trap. returns Err(closed) without writing if the stream has closed since the last call to check-write provided a permit. Params self : borrow< output-stream > contents : list< u8 > Return values result<_, stream-error > [method]output-stream.blocking-write-and-flush: func Perform a write of up to 4096 bytes, and then flush the stream. Block until all of these operations are complete, or an error occurs. This is a convenience wrapper around the use of check-write , subscribe , write , and flush , and is implemented with the following pseudo-code: let pollable = this.subscribe(); while !contents.is_empty() { // Wait for the stream to become writable poll-one(pollable); let Ok(n) = this.check-write(); // eliding error handling let len = min(n, contents.len()); let (chunk, rest) = contents.split_at(len); this.write(chunk ); // eliding error handling contents = rest; } this.flush(); // Wait for completion of `flush` poll-one(pollable); // Check for any errors that arose during `flush` let _ = this.check-write(); // eliding error handling Params self : borrow< output-stream > contents : list< u8 > Return values result<_, stream-error > [method]output-stream.flush: func Request to flush buffered output. This function never blocks. This tells the output-stream that the caller intends any buffered output to be flushed. the output which is expected to be flushed is all that has been passed to write prior to this call. Upon calling this function, the output-stream will not accept any writes ( check-write will return ok(0) ) until the flush has completed. The subscribe pollable will become ready when the flush has completed and the stream can accept more writes. Params self : borrow< output-stream > Return values result<_, stream-error > [method]output-stream.blocking-flush: func Request to flush buffered output, and block until flush completes and stream is ready for writing again. Params self : borrow< output-stream > Return values result<_, stream-error > [method]output-stream.write-zeroes: func /// Create a pollable which will resolve once the output-stream /// is ready for more writing, or an error has occured. When this /// pollable is ready, check-write will return ok(n) with n>0, or an /// error. /// /// If the stream is closed, this pollable is always ready immediately. /// /// The created pollable is a child resource of the output-stream . /// Implementations may trap if the output-stream is dropped before /// all derived pollable s created with this function are dropped. subscribe: func() -> pollable; */ Write zeroes to a stream. this should be used precisely like write with the exact same preconditions (must use check-write first), but instead of passing a list of bytes, you simply pass the number of zero-bytes that should be written. Params self : borrow< output-stream > len : u64 Return values result<_, stream-error > [method]output-stream.blocking-write-zeroes-and-flush: func Perform a write of up to 4096 zeroes, and then flush the stream. Block until all of these operations are complete, or an error occurs. This is a convenience wrapper around the use of check-write , subscribe , write-zeroes , and flush , and is implemented with the following pseudo-code: let pollable = this.subscribe(); while num_zeroes != 0 { // Wait for the stream to become writable poll-one(pollable); let Ok(n) = this.check-write(); // eliding error handling let len = min(n, num_zeroes); this.write-zeroes(len); // eliding error handling num_zeroes -= len; } this.flush(); // Wait for completion of `flush` poll-one(pollable); // Check for any errors that arose during `flush` let _ = this.check-write(); // eliding error handling Params self : borrow< output-stream > len : u64 Return values result<_, stream-error > [method]output-stream.splice: func Read from one stream and write to another. The behavior of splice is equivelant to: calling check-write on the output-stream calling read on the input-stream with the smaller of the check-write permitted length and the len provided to splice calling write on the output-stream with that read data. Any error reported by the call to check-write , read , or write ends the splice and reports that error. This function returns the number of bytes transferred; it may be less than len . Params self : borrow< output-stream > src : borrow< input-stream > len : u64 Return values result< u64 , stream-error > [method]output-stream.blocking-splice: func Read from one stream and write to another, with blocking. This is similar to splice , except that it blocks until the output-stream is ready for writing, and the input-stream is ready for reading, before performing the splice . Params self : borrow< output-stream > src : borrow< input-stream > len : u64 Return values result< u64 , stream-error > Import interface wasi:cli/stdout@0.2.0 Types type output-stream output-stream ---- Functions get-stdout: func Return values own< output-stream > Import interface wasi:cli/stderr@0.2.0 Types type output-stream output-stream ---- Functions get-stderr: func Return values own< output-stream > Import interface wasi:cli/stdin@0.2.0 Types type input-stream input-stream ---- Functions get-stdin: func Return values own< input-stream > Import interface wasi:clocks/monotonic-clock@0.2.0 WASI Monotonic Clock is a clock API intended to let users measure elapsed time. It is intended to be portable at least between Unix-family platforms and Windows. A monotonic clock is a clock which has an unspecified initial value, and successive reads of the clock will produce non-decreasing values. It is intended for measuring elapsed time. Types type instant u64 Hermes does not support `poll` use wasi:io/poll@0.2.0.{pollable}; An instant in time, in nanoseconds. An instant is relative to an unspecified initial value, and can only be compared to instances from the same monotonic-clock. type duration u64 A duration of time, in nanoseconds. Functions now: func Read the current value of the clock. The clock is monotonic, therefore calling this function repeatedly will produce a sequence of non-decreasing values. Return values instant resolution: func Query the resolution of the clock. Returns the duration of time corresponding to a clock tick. Return values duration Import interface wasi:http/types@0.2.0 This interface defines all of the types and methods for implementing HTTP Requests and Responses, both incoming and outgoing, as well as their headers, trailers, and bodies. Types type duration duration #### `type input-stream` [`input-stream`](#input_stream) #### `type output-stream` [`output-stream`](#output_stream) #### `type io-error` [`error`](#error) #### `variant method` Hermes doews not support poll use wasi:io/poll@0.2.0.{pollable}; This type corresponds to HTTP standard Methods. Variant Cases get head post put delete connect options trace patch other : string variant scheme This type corresponds to HTTP standard Related Schemes. Variant Cases HTTP HTTPS other : string record DNS-error-payload Defines the case payload type for DNS-error above: Record Fields rcode : option< string > info-code : option< u16 > record TLS-alert-received-payload Defines the case payload type for TLS-alert-received above: Record Fields alert-id : option< u8 > alert-message : option< string > record field-size-payload Defines the case payload type for HTTP-response-{header,trailer}-size above: Record Fields field-name : option< string > field-size : option< u32 > variant error-code These cases are inspired by the IANA HTTP Proxy Error Types: https://www.iana.org/assignments/http-proxy-status/http-proxy-status.xhtml#table-http-proxy-error-types Variant Cases DNS-timeout DNS-error : DNS-error-payload destination-not-found destination-unavailable destination-IP-prohibited destination-IP-unroutable connection-refused connection-terminated connection-timeout connection-read-timeout connection-write-timeout connection-limit-reached TLS-protocol-error TLS-certificate-error TLS-alert-received : TLS-alert-received-payload HTTP-request-denied HTTP-request-length-required HTTP-request-body-size : option< u64 > HTTP-request-method-invalid HTTP-request-URI-invalid HTTP-request-URI-too-long HTTP-request-header-section-size : option< u32 > HTTP-request-header-size : option< field-size-payload > HTTP-request-trailer-section-size : option< u32 > HTTP-request-trailer-size : field-size-payload HTTP-response-incomplete HTTP-response-header-section-size : option< u32 > HTTP-response-header-size : field-size-payload HTTP-response-body-size : option< u64 > HTTP-response-trailer-section-size : option< u32 > HTTP-response-trailer-size : field-size-payload HTTP-response-transfer-coding : option< string > HTTP-response-content-coding : option< string > HTTP-response-timeout HTTP-upgrade-failed HTTP-protocol-error loop-detected configuration-error internal-error : option< string > This is a catch-all error for anything that doesn't fit cleanly into a more specific case. It also includes an optional string for an unstructured description of the error. Users should not depend on the string for diagnosing errors, as it's not required to be consistent between implementations. variant header-error This type enumerates the different kinds of errors that may occur when setting or appending to a fields resource. Variant Cases invalid-syntax This error indicates that a `field-key` or `field-value` was syntactically invalid when used with an operation that sets headers in a `fields`. forbidden This error indicates that a forbidden `field-key` was used when trying to set a header in a `fields`. immutable This error indicates that the operation on the `fields` was not permitted because the fields are immutable. type field-key string Field keys are always strings. type field-value field-value Field values should always be ASCII strings. However, in reality, HTTP implementations often have to interpret malformed values, so they are provided as a list of bytes. resource fields This following block defines the fields resource which corresponds to HTTP standard Fields. Fields are a common representation used for both Headers and Trailers. A fields may be mutable or immutable. A fields created using the constructor, from-list , or clone will be mutable, but a fields resource given by other means (including, but not limited to, incoming-request.headers , outgoing-request.headers ) might be be immutable. In an immutable fields, the set , append , and delete operations will fail with header-error.immutable . type headers fields Headers is an alias for Fields. type trailers fields Trailers is an alias for Fields. resource incoming-request Represents an incoming HTTP Request. resource outgoing-request Represents an outgoing HTTP Request. resource request-options Parameters for making an HTTP Request. Each of these parameters is currently an optional timeout applicable to the transport layer of the HTTP protocol. These timeouts are separate from any the user may use to bound a blocking call to wasi:io/poll.poll . resource response-outparam Represents the ability to send an HTTP Response. This resource is used by the wasi:http/incoming-handler interface to allow a Response to be sent corresponding to the Request provided as the other argument to incoming-handler.handle . type status-code u16 This type corresponds to the HTTP standard Status Code. resource incoming-response Represents an incoming HTTP Response. resource incoming-body Represents an incoming HTTP Request or Response's Body. A body has both its contents - a stream of bytes - and a (possibly empty) set of trailers, indicating that the full contents of the body have been received. This resource represents the contents as an input-stream and the delivery of trailers as a future-trailers , and ensures that the user of this interface may only be consuming either the body contents or waiting on trailers at any given time. resource future-trailers Represents a future which may eventaully return trailers, or an error. In the case that the incoming HTTP Request or Response did not have any trailers, this future will resolve to the empty set of trailers once the complete Request or Response body has been received. resource outgoing-response Represents an outgoing HTTP Response. resource outgoing-body Represents an outgoing HTTP Request or Response's Body. A body has both its contents - a stream of bytes - and a (possibly empty) set of trailers, inducating the full contents of the body have been sent. This resource represents the contents as an output-stream child resource, and the completion of the body (with optional trailers) with a static function that consumes the outgoing-body resource, and ensures that the user of this interface may not write to the body contents after the body has been finished. If the user code drops this resource, as opposed to calling the static method finish , the implementation should treat the body as incomplete, and that an error has occured. The implementation should propogate this error to the HTTP protocol by whatever means it has available, including: corrupting the body on the wire, aborting the associated Request, or sending a late status code for the Response. resource future-incoming-response Represents a future which may eventaully return an incoming HTTP Response, or an error. This resource is returned by the wasi:http/outgoing-handler interface to provide the HTTP Response corresponding to the sent Request. Functions http-error-code: func Attempts to extract a http-related error from the wasi:io error provided. Stream operations which return wasi:io/stream/stream-error::last-operation-failed have a payload of type wasi:io/error/error with more information about the operation that failed. This payload can be passed through to this function to see if there's http-related information about the error to return. Note that this function is fallible because not all io-errors are http-related errors. Params err : borrow< io-error > Return values option< error-code > [constructor]fields: func Construct an empty HTTP Fields. The resulting fields is mutable. Return values own< fields > [static]fields.from-list: func Construct an HTTP Fields. The resulting fields is mutable. The list represents each key-value pair in the Fields. Keys which have multiple values are represented by multiple entries in this list with the same key. The tuple is a pair of the field key, represented as a string, and Value, represented as a list of bytes. In a valid Fields, all keys and values are valid UTF-8 strings. However, values are not always well-formed, so they are represented as a raw list of bytes. An error result will be returned if any header or value was syntactically invalid, or if a header was forbidden. Params entries : list<( field-key , field-value )> Return values result<own< fields >, header-error > [method]fields.get: func Get all of the values corresponding to a key. If the key is not present in this fields , an empty list is returned. However, if the key is present but empty, this is represented by a list with one or more empty field-values present. Params self : borrow< fields > name : field-key Return values list< field-value > [method]fields.has: func Returns true when the key is present in this fields . If the key is syntactically invalid, false is returned. Params self : borrow< fields > name : field-key Return values bool [method]fields.set: func Set all of the values for a key. Clears any existing values for that key, if they have been set. Fails with header-error.immutable if the fields are immutable. Params self : borrow< fields > name : field-key value : list< field-value > Return values result<_, header-error > [method]fields.delete: func Delete all values for a key. Does nothing if no values for the key exist. Fails with header-error.immutable if the fields are immutable. Params self : borrow< fields > name : field-key Return values result<_, header-error > [method]fields.append: func Append a value for a key. Does not change or delete any existing values for that key. Fails with header-error.immutable if the fields are immutable. Params self : borrow< fields > name : field-key value : field-value Return values result<_, header-error > [method]fields.entries: func Retrieve the full set of keys and values in the Fields. Like the constructor, the list represents each key-value pair. The outer list represents each key-value pair in the Fields. Keys which have multiple values are represented by multiple entries in this list with the same key. Params self : borrow< fields > Return values list<( field-key , field-value )> [method]fields.clone: func Make a deep copy of the Fields. Equivelant in behavior to calling the fields constructor on the return value of entries . The resulting fields is mutable. Params self : borrow< fields > Return values own< fields > [method]incoming-request.method: func Returns the method of the incoming request. Params self : borrow< incoming-request > Return values method [method]incoming-request.path-with-query: func Returns the path with query parameters from the request, as a string. Params self : borrow< incoming-request > Return values option< string > [method]incoming-request.scheme: func Returns the protocol scheme from the request. Params self : borrow< incoming-request > Return values option< scheme > [method]incoming-request.authority: func Returns the authority from the request, if it was present. Params self : borrow< incoming-request > Return values option< string > [method]incoming-request.headers: func Get the headers associated with the request. The returned headers resource is immutable: set , append , and delete operations will fail with header-error.immutable . The headers returned are a child resource: it must be dropped before the parent incoming-request is dropped. Dropping this incoming-request before all children are dropped will trap. Params self : borrow< incoming-request > Return values own< headers > [method]incoming-request.consume: func Gives the incoming-body associated with this request. Will only return success at most once, and subsequent calls will return error. Params self : borrow< incoming-request > Return values result<own< incoming-body >> [constructor]outgoing-request: func Construct a new outgoing-request with a default method of GET , and none values for path-with-query , scheme , and authority . headers is the HTTP Headers for the Request. It is possible to construct, or manipulate with the accessor functions below, an outgoing-request with an invalid combination of scheme and authority , or headers which are not permitted to be sent. It is the obligation of the outgoing-handler.handle implementation to reject invalid constructions of outgoing-request . Params headers : own< headers > Return values own< outgoing-request > [method]outgoing-request.body: func Returns the resource corresponding to the outgoing Body for this Request. Returns success on the first call: the outgoing-body resource for this outgoing-request can be retrieved at most once. Subsequent calls will return error. Params self : borrow< outgoing-request > Return values result<own< outgoing-body >> [method]outgoing-request.method: func Get the Method for the Request. Params self : borrow< outgoing-request > Return values method [method]outgoing-request.set-method: func Set the Method for the Request. Fails if the string present in a method.other argument is not a syntactically valid method. Params self : borrow< outgoing-request > method : method Return values result [method]outgoing-request.path-with-query: func Get the combination of the HTTP Path and Query for the Request. When none , this represents an empty Path and empty Query. Params self : borrow< outgoing-request > Return values option< string > [method]outgoing-request.set-path-with-query: func Set the combination of the HTTP Path and Query for the Request. When none , this represents an empty Path and empty Query. Fails is the string given is not a syntactically valid path and query uri component. Params self : borrow< outgoing-request > path-with-query : option< string > Return values result [method]outgoing-request.scheme: func Get the HTTP Related Scheme for the Request. When none , the implementation may choose an appropriate default scheme. Params self : borrow< outgoing-request > Return values option< scheme > [method]outgoing-request.set-scheme: func Set the HTTP Related Scheme for the Request. When none , the implementation may choose an appropriate default scheme. Fails if the string given is not a syntactically valid uri scheme. Params self : borrow< outgoing-request > scheme : option< scheme > Return values result [method]outgoing-request.authority: func Get the HTTP Authority for the Request. A value of none may be used with Related Schemes which do not require an Authority. The HTTP and HTTPS schemes always require an authority. Params self : borrow< outgoing-request > Return values option< string > [method]outgoing-request.set-authority: func Set the HTTP Authority for the Request. A value of none may be used with Related Schemes which do not require an Authority. The HTTP and HTTPS schemes always require an authority. Fails if the string given is not a syntactically valid uri authority. Params self : borrow< outgoing-request > authority : option< string > Return values result [method]outgoing-request.headers: func Get the headers associated with the Request. The returned headers resource is immutable: set , append , and delete operations will fail with header-error.immutable . This headers resource is a child: it must be dropped before the parent outgoing-request is dropped, or its ownership is transfered to another component by e.g. outgoing-handler.handle . Params self : borrow< outgoing-request > Return values own< headers > [constructor]request-options: func Construct a default request-options value. Return values own< request-options > [method]request-options.connect-timeout: func The timeout for the initial connect to the HTTP Server. Params self : borrow< request-options > Return values option< duration > [method]request-options.set-connect-timeout: func Set the timeout for the initial connect to the HTTP Server. An error return value indicates that this timeout is not supported. Params self : borrow< request-options > duration : option< duration > Return values result [method]request-options.first-byte-timeout: func The timeout for receiving the first byte of the Response body. Params self : borrow< request-options > Return values option< duration > [method]request-options.set-first-byte-timeout: func Set the timeout for receiving the first byte of the Response body. An error return value indicates that this timeout is not supported. Params self : borrow< request-options > duration : option< duration > Return values result [method]request-options.between-bytes-timeout: func The timeout for receiving subsequent chunks of bytes in the Response body stream. Params self : borrow< request-options > Return values option< duration > [method]request-options.set-between-bytes-timeout: func Set the timeout for receiving subsequent chunks of bytes in the Response body stream. An error return value indicates that this timeout is not supported. Params self : borrow< request-options > duration : option< duration > Return values result [static]response-outparam.set: func Set the value of the response-outparam to either send a response, or indicate an error. This method consumes the response-outparam to ensure that it is called at most once. If it is never called, the implementation will respond with an error. The user may provide an error to response to allow the implementation determine how to respond with an HTTP error response. Params param : own< response-outparam > response : result<own< outgoing-response >, error-code > [method]incoming-response.status: func Returns the status code from the incoming response. Params self : borrow< incoming-response > Return values status-code [method]incoming-response.headers: func Returns the headers from the incoming response. The returned headers resource is immutable: set , append , and delete operations will fail with header-error.immutable . This headers resource is a child: it must be dropped before the parent incoming-response is dropped. Params self : borrow< incoming-response > Return values own< headers > [method]incoming-response.consume: func Returns the incoming body. May be called at most once. Returns error if called additional times. Params self : borrow< incoming-response > Return values result<own< incoming-body >> [method]incoming-body.stream: func Returns the contents of the body, as a stream of bytes. Returns success on first call: the stream representing the contents can be retrieved at most once. Subsequent calls will return error. The returned input-stream resource is a child: it must be dropped before the parent incoming-body is dropped, or consumed by incoming-body.finish . This invariant ensures that the implementation can determine whether the user is consuming the contents of the body, waiting on the future-trailers to be ready, or neither. This allows for network backpressure is to be applied when the user is consuming the body, and for that backpressure to not inhibit delivery of the trailers if the user does not read the entire body. Params self : borrow< incoming-body > Return values result<own< input-stream >> [static]incoming-body.finish: func Takes ownership of incoming-body , and returns a future-trailers . This function will trap if the input-stream child is still alive. Params this : own< incoming-body > Return values own< future-trailers > [method]future-trailers.get: func Returns a pollable which becomes ready when either the trailers have been received, or an error has occured. When this pollable is ready, the get method will return some . subscribe: func() -> pollable; // Hermes does NOT support poll Returns the contents of the trailers, or an error which occured, once the future is ready. The outer option represents future readiness. Users can wait on this option to become some using the subscribe method. The outer result is used to retrieve the trailers or error at most once. It will be success on the first call in which the outer option is some , and error on subsequent calls. The inner result represents that either the HTTP Request or Response body, as well as any trailers, were received successfully, or that an error occured receiving them. The optional trailers indicates whether or not trailers were present in the body. When some trailers are returned by this method, the trailers resource is immutable, and a child. Use of the set , append , or delete methods will return an error, and the resource must be dropped before the parent future-trailers is dropped. Params self : borrow< future-trailers > Return values option<result<result<option<own< trailers >>, error-code >>> [constructor]outgoing-response: func Construct an outgoing-response , with a default status-code of 200 . If a different status-code is needed, it must be set via the set-status-code method. headers is the HTTP Headers for the Response. Params headers : own< headers > Return values own< outgoing-response > [method]outgoing-response.status-code: func Get the HTTP Status Code for the Response. Params self : borrow< outgoing-response > Return values status-code [method]outgoing-response.set-status-code: func Set the HTTP Status Code for the Response. Fails if the status-code given is not a valid http status code. Params self : borrow< outgoing-response > status-code : status-code Return values result [method]outgoing-response.headers: func Get the headers associated with the Request. The returned headers resource is immutable: set , append , and delete operations will fail with header-error.immutable . This headers resource is a child: it must be dropped before the parent outgoing-request is dropped, or its ownership is transfered to another component by e.g. outgoing-handler.handle . Params self : borrow< outgoing-response > Return values own< headers > [method]outgoing-response.body: func Returns the resource corresponding to the outgoing Body for this Response. Returns success on the first call: the outgoing-body resource for this outgoing-response can be retrieved at most once. Subsequent calls will return error. Params self : borrow< outgoing-response > Return values result<own< outgoing-body >> [method]outgoing-body.write: func Returns a stream for writing the body contents. The returned output-stream is a child resource: it must be dropped before the parent outgoing-body resource is dropped (or finished), otherwise the outgoing-body drop or finish will trap. Returns success on the first call: the output-stream resource for this outgoing-body may be retrieved at most once. Subsequent calls will return error. Params self : borrow< outgoing-body > Return values result<own< output-stream >> [static]outgoing-body.finish: func Finalize an outgoing body, optionally providing trailers. This must be called to signal that the response is complete. If the outgoing-body is dropped without calling outgoing-body.finalize , the implementation should treat the body as corrupted. Fails if the body's outgoing-request or outgoing-response was constructed with a Content-Length header, and the contents written to the body (via write ) does not match the value given in the Content-Length. Params this : own< outgoing-body > trailers : option<own< trailers >> Return values result<_, error-code > [method]future-incoming-response.get: func /// Returns a pollable which becomes ready when either the Response has /// been received, or an error has occured. When this pollable is ready, /// the get method will return some . subscribe: func() -> pollable; */ Returns the incoming HTTP Response, or an error, once one is ready. The outer option represents future readiness. Users can wait on this option to become some using the subscribe method. The outer result is used to retrieve the response or error at most once. It will be success on the first call in which the outer option is some , and error on subsequent calls. The inner result represents that either the incoming HTTP Response status and headers have recieved successfully, or that an error occured. Errors may also occur while consuming the response body, but those will be reported by the incoming-body and its output-stream child. Params self : borrow< future-incoming-response > Return values option<result<result<own< incoming-response >, error-code >>> Import interface wasi:http/outgoing-handler@0.2.0 This interface defines a handler of outgoing HTTP Requests. It should be imported by components which wish to make HTTP Requests. Types type outgoing-request outgoing-request #### `type request-options` [`request-options`](#request_options) #### `type future-incoming-response` [`future-incoming-response`](#future_incoming_response) #### `type error-code` [`error-code`](#error_code) ---- Functions handle: func This function is invoked with an outgoing HTTP Request, and it returns a resource future-incoming-response which represents an HTTP Response which may arrive in the future. The options argument accepts optional parameters for the HTTP protocol's transport layer. This function may return an error if the outgoing-request is invalid or not allowed to be made. Otherwise, protocol errors are reported through the future-incoming-response . Params request : own< outgoing-request > options : option<own< request-options >> Return values result<own< future-incoming-response >, error-code > Import interface wasi:clocks/wall-clock@0.2.0 WASI Wall Clock is a clock API intended to let users query the current time. The name \"wall\" makes an analogy to a \"clock on the wall\", which is not necessarily monotonic as it may be reset. It is intended to be portable at least between Unix-family platforms and Windows. A wall clock is a clock which measures the date and time according to some external reference. External references may be reset, so this clock is not necessarily monotonic, making it unsuitable for measuring elapsed time. It is intended for reporting the current date and time for humans. Types record datetime A time and date in seconds plus nanoseconds. Record Fields seconds : u64 nanoseconds : u32 Functions now: func Read the current value of the clock. This clock is not monotonic, therefore calling this function repeatedly will not necessarily produce a sequence of non-decreasing values. The returned timestamps represent the number of seconds since 1970-01-01T00:00:00Z, also known as POSIX's Seconds Since the Epoch , also known as Unix Time . The nanoseconds field of the output is always less than 1000000000. Return values datetime resolution: func Query the resolution of the clock. The nanoseconds field of the output is always less than 1000000000. Return values datetime Export interface wasi:http/incoming-handler@0.2.0 Types type incoming-request incoming-request #### `type response-outparam` [`response-outparam`](#response_outparam) ---- Functions handle: func This function is invoked with an incoming HTTP Request, and a resource response-outparam which provides the capability to reply with an HTTP Response. The response is sent by calling the response-outparam.set method, which allows execution to continue after the response has been sent. This enables both streaming to the response body, and performing other work. The implementor of this function must write a response to the response-outparam before returning, or else the caller will respond with an error on its behalf. Params request : own< incoming-request > response-out : own< response-outparam >","title":"Http"},{"location":"api/wasi-hermes/wasi/io/","text":"World imports Imports: interface wasi:io/error@0.2.0 interface wasi:io/streams@0.2.0 Import interface wasi:io/error@0.2.0 Types resource error A resource which represents some error information. The only method provided by this resource is to-debug-string , which provides some human-readable information about the error. In the wasi:io package, this resource is returned through the wasi:io/streams/stream-error type. To provide more specific error information, other interfaces may provide functions to further \"downcast\" this error into more specific error information. For example, error s returned in streams derived from filesystem types to be described using the filesystem's own error-code type, using the function wasi:filesystem/types/filesystem-error-code , which takes a parameter borrow<error> and returns option<wasi:filesystem/types/error-code> . The set of functions which can \"downcast\" an error into a more concrete type is open. Functions [method]error.to-debug-string: func Returns a string that is suitable to assist humans in debugging this error. WARNING: The returned string should not be consumed mechanically! It may change across platforms, hosts, or other implementation details. Parsing this string is a major platform-compatibility hazard. Params self : borrow< error > Return values string Import interface wasi:io/streams@0.2.0 WASI I/O is an I/O abstraction API which is currently focused on providing stream types. In the future, the component model is expected to add built-in stream types; when it does, they are expected to subsume this API. Types type error error #### `variant stream-error` // Hermes does not support poll use poll.{pollable}; */ An error for input-stream and output-stream operations. Variant Cases last-operation-failed : own< error > The last operation (a write or flush) failed before completion. More information is available in the error payload. closed The stream is closed: no more input will be accepted by the stream. A closed output-stream will return this error on all future operations. resource input-stream An input bytestream. input-stream s are non-blocking to the extent practical on underlying platforms. I/O operations always return promptly; if fewer bytes are promptly available than requested, they return the number of bytes promptly available, which could even be zero. To wait for data to be available, use the subscribe function to obtain a pollable which can be polled for using wasi:io/poll . resource output-stream An output bytestream. output-stream s are non-blocking to the extent practical on underlying platforms. Except where specified otherwise, I/O operations also always return promptly, after the number of bytes that can be written promptly, which could even be zero. To wait for the stream to be ready to accept data, the subscribe function to obtain a pollable which can be polled for using wasi:io/poll . Functions [method]input-stream.read: func Perform a non-blocking read from the stream. This function returns a list of bytes containing the read data, when successful. The returned list will contain up to len bytes; it may return fewer than requested, but not more. The list is empty when no bytes are available for reading at this time. The pollable given by subscribe will be ready when more bytes are available. This function fails with a stream-error when the operation encounters an error, giving last-operation-failed , or when the stream is closed, giving closed . When the caller gives a len of 0, it represents a request to read 0 bytes. If the stream is still open, this call should succeed and return an empty list, or otherwise fail with closed . The len parameter is a u64 , which could represent a list of u8 which is not possible to allocate in wasm32, or not desirable to allocate as as a return value by the callee. The callee may return a list of bytes less than len in size while more bytes are available for reading. Params self : borrow< input-stream > len : u64 Return values result<list< u8 >, stream-error > [method]input-stream.blocking-read: func Read bytes from a stream, after blocking until at least one byte can be read. Except for blocking, behavior is identical to read . Params self : borrow< input-stream > len : u64 Return values result<list< u8 >, stream-error > [method]input-stream.skip: func Skip bytes from a stream. Returns number of bytes skipped. Behaves identical to read , except instead of returning a list of bytes, returns the number of bytes consumed from the stream. Params self : borrow< input-stream > len : u64 Return values result< u64 , stream-error > [method]input-stream.blocking-skip: func Skip bytes from a stream, after blocking until at least one byte can be skipped. Except for blocking behavior, identical to skip . Params self : borrow< input-stream > len : u64 Return values result< u64 , stream-error > [method]output-stream.check-write: func Check readiness for writing. This function never blocks. Returns the number of bytes permitted for the next call to write , or an error. Calling write with more bytes than this function has permitted will trap. When this function returns 0 bytes, the subscribe pollable will become ready when this function will report at least 1 byte, or an error. Params self : borrow< output-stream > Return values result< u64 , stream-error > [method]output-stream.write: func Perform a write. This function never blocks. Precondition: check-write gave permit of Ok(n) and contents has a length of less than or equal to n. Otherwise, this function will trap. returns Err(closed) without writing if the stream has closed since the last call to check-write provided a permit. Params self : borrow< output-stream > contents : list< u8 > Return values result<_, stream-error > [method]output-stream.blocking-write-and-flush: func Perform a write of up to 4096 bytes, and then flush the stream. Block until all of these operations are complete, or an error occurs. This is a convenience wrapper around the use of check-write , subscribe , write , and flush , and is implemented with the following pseudo-code: let pollable = this.subscribe(); while !contents.is_empty() { // Wait for the stream to become writable poll-one(pollable); let Ok(n) = this.check-write(); // eliding error handling let len = min(n, contents.len()); let (chunk, rest) = contents.split_at(len); this.write(chunk ); // eliding error handling contents = rest; } this.flush(); // Wait for completion of `flush` poll-one(pollable); // Check for any errors that arose during `flush` let _ = this.check-write(); // eliding error handling Params self : borrow< output-stream > contents : list< u8 > Return values result<_, stream-error > [method]output-stream.flush: func Request to flush buffered output. This function never blocks. This tells the output-stream that the caller intends any buffered output to be flushed. the output which is expected to be flushed is all that has been passed to write prior to this call. Upon calling this function, the output-stream will not accept any writes ( check-write will return ok(0) ) until the flush has completed. The subscribe pollable will become ready when the flush has completed and the stream can accept more writes. Params self : borrow< output-stream > Return values result<_, stream-error > [method]output-stream.blocking-flush: func Request to flush buffered output, and block until flush completes and stream is ready for writing again. Params self : borrow< output-stream > Return values result<_, stream-error > [method]output-stream.write-zeroes: func /// Create a pollable which will resolve once the output-stream /// is ready for more writing, or an error has occured. When this /// pollable is ready, check-write will return ok(n) with n>0, or an /// error. /// /// If the stream is closed, this pollable is always ready immediately. /// /// The created pollable is a child resource of the output-stream . /// Implementations may trap if the output-stream is dropped before /// all derived pollable s created with this function are dropped. subscribe: func() -> pollable; */ Write zeroes to a stream. this should be used precisely like write with the exact same preconditions (must use check-write first), but instead of passing a list of bytes, you simply pass the number of zero-bytes that should be written. Params self : borrow< output-stream > len : u64 Return values result<_, stream-error > [method]output-stream.blocking-write-zeroes-and-flush: func Perform a write of up to 4096 zeroes, and then flush the stream. Block until all of these operations are complete, or an error occurs. This is a convenience wrapper around the use of check-write , subscribe , write-zeroes , and flush , and is implemented with the following pseudo-code: let pollable = this.subscribe(); while num_zeroes != 0 { // Wait for the stream to become writable poll-one(pollable); let Ok(n) = this.check-write(); // eliding error handling let len = min(n, num_zeroes); this.write-zeroes(len); // eliding error handling num_zeroes -= len; } this.flush(); // Wait for completion of `flush` poll-one(pollable); // Check for any errors that arose during `flush` let _ = this.check-write(); // eliding error handling Params self : borrow< output-stream > len : u64 Return values result<_, stream-error > [method]output-stream.splice: func Read from one stream and write to another. The behavior of splice is equivelant to: calling check-write on the output-stream calling read on the input-stream with the smaller of the check-write permitted length and the len provided to splice calling write on the output-stream with that read data. Any error reported by the call to check-write , read , or write ends the splice and reports that error. This function returns the number of bytes transferred; it may be less than len . Params self : borrow< output-stream > src : borrow< input-stream > len : u64 Return values result< u64 , stream-error > [method]output-stream.blocking-splice: func Read from one stream and write to another, with blocking. This is similar to splice , except that it blocks until the output-stream is ready for writing, and the input-stream is ready for reading, before performing the splice . Params self : borrow< output-stream > src : borrow< input-stream > len : u64 Return values result< u64 , stream-error >","title":"Io"},{"location":"api/wasi-hermes/wasi/random/","text":"World imports Imports: interface wasi:random/random@0.2.0 interface wasi:random/insecure@0.2.0 interface wasi:random/insecure-seed@0.2.0 Import interface wasi:random/random@0.2.0 WASI Random is a random data API. It is intended to be portable at least between Unix-family platforms and Windows. Functions get-random-bytes: func Return len cryptographically-secure random or pseudo-random bytes. This function must produce data at least as cryptographically secure and fast as an adequately seeded cryptographically-secure pseudo-random number generator (CSPRNG). It must not block, from the perspective of the calling program, under any circumstances, including on the first request and on requests for numbers of bytes. The returned data must always be unpredictable. This function must always return fresh data. Deterministic environments must omit this function, rather than implementing it with deterministic data. Params len : u64 Return values list< u8 > get-random-u64: func Return a cryptographically-secure random or pseudo-random u64 value. This function returns the same type of data as get-random-bytes , represented as a u64 . Return values u64 Import interface wasi:random/insecure@0.2.0 The insecure interface for insecure pseudo-random numbers. It is intended to be portable at least between Unix-family platforms and Windows. Functions get-insecure-random-bytes: func Return len insecure pseudo-random bytes. This function is not cryptographically secure. Do not use it for anything related to security. There are no requirements on the values of the returned bytes, however implementations are encouraged to return evenly distributed values with a long period. Params len : u64 Return values list< u8 > get-insecure-random-u64: func Return an insecure pseudo-random u64 value. This function returns the same type of pseudo-random data as get-insecure-random-bytes , represented as a u64 . Return values u64 Import interface wasi:random/insecure-seed@0.2.0 The insecure-seed interface for seeding hash-map DoS resistance. It is intended to be portable at least between Unix-family platforms and Windows. Functions insecure-seed: func Return a 128-bit value that may contain a pseudo-random value. The returned value is not required to be computed from a CSPRNG, and may even be entirely deterministic. Host implementations are encouraged to provide pseudo-random values to any program exposed to attacker-controlled content, to enable DoS protection built into many languages' hash-map implementations. This function is intended to only be called once, by a source language to initialize Denial Of Service (DoS) protection in its hash-map implementation. Expected future evolution This will likely be changed to a value import, to prevent it from being called multiple times and potentially used for purposes other than DoS protection. Return values ( u64 , u64 )","title":"Random"},{"location":"appendix/","text":"Appendix \u00b6 The appendix contains collections of extra information and examples relevant to Hermes.","title":"Appendix"},{"location":"appendix/#appendix","text":"The appendix contains collections of extra information and examples relevant to Hermes.","title":"Appendix"},{"location":"appendix/tags/","text":"Tag Index \u00b6 ADR \u00b6 0002 Architecture Decision Records arc42 \u00b6 Index 0001 Architecture Documentation Standard 0002 Architecture Decision Records","title":"Tag Index"},{"location":"appendix/tags/#tag-index","text":"","title":"Tag Index"},{"location":"appendix/tags/#adr","text":"0002 Architecture Decision Records","title":"ADR"},{"location":"appendix/tags/#arc42","text":"Index 0001 Architecture Documentation Standard 0002 Architecture Decision Records","title":"arc42"},{"location":"appendix/important/","text":"Important \u00b6","title":"Important"},{"location":"appendix/important/#important","text":"","title":"Important"},{"location":"appendix/important/coc/","text":"Contributor Covenant Code of Conduct \u00b6 Our Pledge \u00b6 We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community. Our Standards \u00b6 Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Enforcement Responsibilities \u00b6 Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate. Scope \u00b6 This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Enforcement \u00b6 Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at conduct@iohk.io . All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident. Enforcement Guidelines \u00b6 Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct: 1. Correction \u00b6 Community Impact : Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence : A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested. 2. Warning \u00b6 Community Impact : A violation through a single incident or series of actions. Consequence : A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban. 3. Temporary Ban \u00b6 Community Impact : A serious violation of community standards, including sustained inappropriate behavior. Consequence : A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban. 4. Permanent Ban \u00b6 Community Impact : Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence : A permanent ban from any sort of public interaction within the community. Attribution \u00b6 This Code of Conduct is adapted from the Contributor Covenant , version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html . Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder . For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq . Translations are available at https://www.contributor-covenant.org/translations .","title":"Coc"},{"location":"appendix/important/coc/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"appendix/important/coc/#our-pledge","text":"We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.","title":"Our Pledge"},{"location":"appendix/important/coc/#our-standards","text":"Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"appendix/important/coc/#enforcement-responsibilities","text":"Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.","title":"Enforcement Responsibilities"},{"location":"appendix/important/coc/#scope","text":"This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.","title":"Scope"},{"location":"appendix/important/coc/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at conduct@iohk.io . All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident.","title":"Enforcement"},{"location":"appendix/important/coc/#enforcement-guidelines","text":"Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:","title":"Enforcement Guidelines"},{"location":"appendix/important/coc/#1-correction","text":"Community Impact : Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence : A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.","title":"1. Correction"},{"location":"appendix/important/coc/#2-warning","text":"Community Impact : A violation through a single incident or series of actions. Consequence : A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.","title":"2. Warning"},{"location":"appendix/important/coc/#3-temporary-ban","text":"Community Impact : A serious violation of community standards, including sustained inappropriate behavior. Consequence : A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.","title":"3. Temporary Ban"},{"location":"appendix/important/coc/#4-permanent-ban","text":"Community Impact : Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence : A permanent ban from any sort of public interaction within the community.","title":"4. Permanent Ban"},{"location":"appendix/important/coc/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html . Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder . For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq . Translations are available at https://www.contributor-covenant.org/translations .","title":"Attribution"},{"location":"appendix/important/contributing/","text":"Contributing to Hermes \u00b6 First off, thanks for taking the time to contribute! \u2764\ufe0f Contributing to Hermes Code of Conduct I Have a Question I Want To Contribute Reporting Bugs Before Submitting a Bug Report How Do I Submit a Good Bug Report? Suggesting Enhancements Before Submitting an Enhancement How Do I Submit a Good Enhancement Suggestion? Your First Code Contribution Improving The Documentation Style guides Rust Dart Flutter Commit Messages All types of contributions are encouraged and valued. Please make sure to read the relevant section before making your contribution. It will make it a lot easier for us maintainers and smooth out the experience for all involved. The community looks forward to your contributions. \ud83c\udf89 Code of Conduct \u00b6 This project and everyone participating in it is governed by the Hermes Code of Conduct . By participating, you are expected to uphold this code. Please report unacceptable behavior to code-of-conduct@iohk.io . I Have a Question \u00b6 If you want to ask a question, we assume that you have read the available Documentation . Before you ask a question, it is best to search for existing Issues that might help you. In case you have found a suitable issue and still need clarification, you can write your question here . It is also advisable to search the internet for answers first. If you then still feel the need to ask a question and need clarification, we recommend the following: Open an Issue . Provide as much context as you can about what you're running into. Provide project and platform versions ( rustc --version --verbose , flutter doctor -v , etc), depending on what seems relevant. We will then take care of the issue as soon as possible. I Want To Contribute \u00b6 Reporting Bugs \u00b6 Before Submitting a Bug Report \u00b6 A good bug report shouldn't leave others needing to chase you up for more information. Therefore, we ask you to investigate carefully, collect information and describe the issue in detail in your report. Please complete the following steps in advance to help us fix any potential bug as fast as possible. Make sure that you are using the latest version. Determine if your bug is really a bug and not an error on your side. e.g. using incompatible environment components/versions (Make sure that you have read the documentation . If you are looking for support, you might want to check this section . To see if other users have experienced (and potentially already solved) the same issue you are having. Check if there is not already a bug report existing for your bug or error in the bug tracker . Also make sure to search the internet (including Stack Overflow) to see if users outside the GitHub community have discussed the issue. Collect information about the bug: Stack trace (Traceback) OS, Platform and Version (Windows, Linux, macOS, x86, ARM) Version of the interpreter, compiler, SDK, runtime environment, package manager, depending on what seems relevant. Possibly your input and the output Can you reliably reproduce the issue? And can you also reproduce it with older versions? How Do I Submit a Good Bug Report? \u00b6 You must never report security related issues, vulnerabilities or bugs including sensitive information to the issue tracker, or elsewhere in public. Instead sensitive bugs must be sent by email to security@iohk.io . We use GitHub issues to track bugs and errors. If you run into an issue with the project: Open an Issue . (Since we can't be sure at this point whether it is a bug or not, we ask you not to talk about a bug yet and not to label the issue.) Explain the behavior you would expect and the actual behavior. Please provide as much context as possible. Describe the reproduction steps that someone else can follow to recreate the issue on their own. This usually includes your code. For good bug reports you should isolate the problem and create a reduced test case. Provide the information you collected in the previous section. Once it's filed: The project team will label the issue accordingly. A team member will try to reproduce the issue with your provided steps. If there are no reproduction steps or no obvious way to reproduce the issue, the team will ask you for those steps. The issue would then be marked as needs-repro . Bugs with the needs-repro tag will not be addressed until they are reproduced. If the team is able to reproduce the issue, it will be marked bug . It may possibly be marked with other tags (such as critical ). The issue will then be left to be implemented by someone . Suggesting Enhancements \u00b6 This section guides you through submitting an enhancement suggestion for Hermes, including completely new features and minor improvements to existing functionality . Following these guidelines will help maintainers and the community to understand your suggestion and find related suggestions. Before Submitting an Enhancement \u00b6 Make sure that you are using the latest version. Read the documentation carefully. Find out if the functionality is already covered, maybe by an individual configuration. Perform a search to see if the enhancement has already been suggested. If it has, add a comment to the existing issue instead of opening a new one. Find out whether your idea fits with the scope and aims of the project. It's up to you to make a strong case to convince the project's developers of the merits of this feature. Keep in mind that we want features that will be useful to the majority of our users and not just a small subset. If you're just targeting a minority of users, consider writing an add-on/plugin library. How Do I Submit a Good Enhancement Suggestion? \u00b6 Enhancement suggestions are tracked as GitHub issues . Use a clear and descriptive title for the issue to identify the suggestion. Provide a step-by-step description of the suggested enhancement in as many details as possible. Describe the current behavior and explain which behavior you expected to see instead and why. At this point you can also tell which alternatives do not work for you. You may want to include screenshots and animated GIFs . This can help you demonstrate the steps or point out the part which the suggestion is related to. You can use this tool to record GIFs on macOS and Windows, and this tool or this tool on Linux. Explain why this enhancement would be useful to most Hermes users. You may also want to point out the other projects that solved it better and which could serve as inspiration. Your First Code Contribution \u00b6 Embarking on your first code contribution can be an exhilarating yet intimidating endeavor. Here at Hermes, we foster a welcoming and supportive environment to ensure that everyone can contribute to the codebase irrespective of their experience level. Below is a step-by-step guide to making your first code contribution to our repository: Set Up Your Environment : Fork the repository to your GitHub account. Clone your fork locally on your machine. Set up the development environment following the instructions in the README. Pick an Issue : Browse through the open issues in the GitHub repository. Pick an issue that interests you and aligns with your skills. Beginners might look for issues tagged as good first issue or beginner-friendly . Understand the Issue : Thoroughly read through the issue to understand the problem. Ask clarifying questions in the issue thread if necessary. Branch Out : Create a new branch on your local machine to work on the issue. It's a good practice to name your branch descriptively, e.g., fix-button-bug. Work on the Issue : Work on the issue in your local development environment. Adhere to the coding standards and guidelines provided in the Style guides section. Test Your Changes : Ensure that your changes are well-tested. Verify that your changes don't break any existing functionality. Commit Your Changes : Write a clear and concise commit message following the Style guides -> Commit Messages section guidelines. Push Your Changes : Push your changes to your fork on GitHub. Open a Pull Request : Open a pull request from your fork to the main repository. Provide a detailed description of your changes, the issue it addresses, and any additional information that might help maintainers review your contribution. Review and Revision : Respond to any feedback from the maintainers. Make necessary revisions to your code. Merge and Celebrate : Once your pull request is approved, it will be merged into the main codebase. Celebrate your contribution and share it with the community! Remember, every contributor was new at some point, and we are thrilled to welcome new members to our community. The journey of becoming an adept open-source contributor is rewarding and educational. Your contribution, no matter how small, can make a significant impact. Happy coding! Improving The Documentation \u00b6 Documentation is a cornerstone of any successful open-source project. It aids developers in understanding the purpose, structure, and functioning of the code, making the project accessible to all, irrespective of their level of expertise. Our project thrives on the contributions from the community, and improving the documentation is one of the significant ways you can contribute. Here are some ways you could help improve our documentation: Clarification : If you find any ambiguous or unclear documentation, feel free to clarify the wording or suggest improvements through a pull request. Expansion : If areas of the documentation are lacking in detail or missing altogether, contributing expanded explanations or new sections is highly encouraged. Correction : Spot a mistake? Whether it's a spelling error, grammatical error, or incorrect information, your corrections are welcome. Examples : Adding examples to the documentation can significantly enhance utility. If you have examples that illustrate the use of our code, we'd love to include them. Consistency : Ensure the documentation maintains a consistent style and tone. Adhering to the style guidelines specified in our Style guides section is crucial. Technical Accuracy : Ensure that the documentation reflects the current state of the codebase and is technically accurate. Your contributions should follow the guidelines specified in our Style guides section to maintain high quality and consistency. Before making a substantial change, it's a good practice to open an issue to discuss the proposed changes or find an existing issue to work on. Together, we can ensure that our documentation is a valuable resource for all new and experienced developers. Style guides \u00b6 Rust \u00b6 For Rust, we follow the Rust Style Guide . Dart \u00b6 For Dart, we follow the Effective Dart style guide. Flutter \u00b6 For Flutter, we follow the Flutter Style Guide . Commit Messages \u00b6 Clear and consistent commit messages are crucial for maintaining a readable history in our collaborative environment. Adhering to a structured commit message format also enables us to generate changelogs and navigate through the project's history more efficiently. We follow the Conventional Commits standard for all commit messages in this repository. Here's a brief overview of the Conventional Commits standard: Type : The type of change being made (e.g., feat, fix, chore, docs, style, refactor, perf, test). Scope (Optional) : The scope of the change, denoting what part of the codebase is being altered. Description : A short, descriptive message of the change, written in the imperative mood. Format: <type>(<scope>): <description> Example: feat(button): add a 'submit' button to form component fix(modal): resolve issue with modal overlay not closing chore(tests): update unit tests for utilities module Breaking Changes : If your commit introduces a breaking change, it should be flagged with a ! after the type. Include BREAKING CHANGE: in the body or footer of the commit message to describe what changed and its implications. Example: feat!(dropdown): change the behavior of dropdown component BREAKING CHANGE: alters dropdown trigger to be activated on hover instead of on click. Footer (Optional) : Any additional metadata regarding your commit, such as related issue trackers or BREAKING CHANGE annotations. Following this format makes the version control history readable and reflects professionalism and foresight in maintaining a clean, well-documented codebase.","title":"Contributing"},{"location":"appendix/important/contributing/#contributing-to-hermes","text":"First off, thanks for taking the time to contribute! \u2764\ufe0f Contributing to Hermes Code of Conduct I Have a Question I Want To Contribute Reporting Bugs Before Submitting a Bug Report How Do I Submit a Good Bug Report? Suggesting Enhancements Before Submitting an Enhancement How Do I Submit a Good Enhancement Suggestion? Your First Code Contribution Improving The Documentation Style guides Rust Dart Flutter Commit Messages All types of contributions are encouraged and valued. Please make sure to read the relevant section before making your contribution. It will make it a lot easier for us maintainers and smooth out the experience for all involved. The community looks forward to your contributions. \ud83c\udf89","title":"Contributing to Hermes"},{"location":"appendix/important/contributing/#code-of-conduct","text":"This project and everyone participating in it is governed by the Hermes Code of Conduct . By participating, you are expected to uphold this code. Please report unacceptable behavior to code-of-conduct@iohk.io .","title":"Code of Conduct"},{"location":"appendix/important/contributing/#i-have-a-question","text":"If you want to ask a question, we assume that you have read the available Documentation . Before you ask a question, it is best to search for existing Issues that might help you. In case you have found a suitable issue and still need clarification, you can write your question here . It is also advisable to search the internet for answers first. If you then still feel the need to ask a question and need clarification, we recommend the following: Open an Issue . Provide as much context as you can about what you're running into. Provide project and platform versions ( rustc --version --verbose , flutter doctor -v , etc), depending on what seems relevant. We will then take care of the issue as soon as possible.","title":"I Have a Question"},{"location":"appendix/important/contributing/#i-want-to-contribute","text":"","title":"I Want To Contribute"},{"location":"appendix/important/contributing/#reporting-bugs","text":"","title":"Reporting Bugs"},{"location":"appendix/important/contributing/#before-submitting-a-bug-report","text":"A good bug report shouldn't leave others needing to chase you up for more information. Therefore, we ask you to investigate carefully, collect information and describe the issue in detail in your report. Please complete the following steps in advance to help us fix any potential bug as fast as possible. Make sure that you are using the latest version. Determine if your bug is really a bug and not an error on your side. e.g. using incompatible environment components/versions (Make sure that you have read the documentation . If you are looking for support, you might want to check this section . To see if other users have experienced (and potentially already solved) the same issue you are having. Check if there is not already a bug report existing for your bug or error in the bug tracker . Also make sure to search the internet (including Stack Overflow) to see if users outside the GitHub community have discussed the issue. Collect information about the bug: Stack trace (Traceback) OS, Platform and Version (Windows, Linux, macOS, x86, ARM) Version of the interpreter, compiler, SDK, runtime environment, package manager, depending on what seems relevant. Possibly your input and the output Can you reliably reproduce the issue? And can you also reproduce it with older versions?","title":"Before Submitting a Bug Report"},{"location":"appendix/important/contributing/#how-do-i-submit-a-good-bug-report","text":"You must never report security related issues, vulnerabilities or bugs including sensitive information to the issue tracker, or elsewhere in public. Instead sensitive bugs must be sent by email to security@iohk.io . We use GitHub issues to track bugs and errors. If you run into an issue with the project: Open an Issue . (Since we can't be sure at this point whether it is a bug or not, we ask you not to talk about a bug yet and not to label the issue.) Explain the behavior you would expect and the actual behavior. Please provide as much context as possible. Describe the reproduction steps that someone else can follow to recreate the issue on their own. This usually includes your code. For good bug reports you should isolate the problem and create a reduced test case. Provide the information you collected in the previous section. Once it's filed: The project team will label the issue accordingly. A team member will try to reproduce the issue with your provided steps. If there are no reproduction steps or no obvious way to reproduce the issue, the team will ask you for those steps. The issue would then be marked as needs-repro . Bugs with the needs-repro tag will not be addressed until they are reproduced. If the team is able to reproduce the issue, it will be marked bug . It may possibly be marked with other tags (such as critical ). The issue will then be left to be implemented by someone .","title":"How Do I Submit a Good Bug Report?"},{"location":"appendix/important/contributing/#suggesting-enhancements","text":"This section guides you through submitting an enhancement suggestion for Hermes, including completely new features and minor improvements to existing functionality . Following these guidelines will help maintainers and the community to understand your suggestion and find related suggestions.","title":"Suggesting Enhancements"},{"location":"appendix/important/contributing/#before-submitting-an-enhancement","text":"Make sure that you are using the latest version. Read the documentation carefully. Find out if the functionality is already covered, maybe by an individual configuration. Perform a search to see if the enhancement has already been suggested. If it has, add a comment to the existing issue instead of opening a new one. Find out whether your idea fits with the scope and aims of the project. It's up to you to make a strong case to convince the project's developers of the merits of this feature. Keep in mind that we want features that will be useful to the majority of our users and not just a small subset. If you're just targeting a minority of users, consider writing an add-on/plugin library.","title":"Before Submitting an Enhancement"},{"location":"appendix/important/contributing/#how-do-i-submit-a-good-enhancement-suggestion","text":"Enhancement suggestions are tracked as GitHub issues . Use a clear and descriptive title for the issue to identify the suggestion. Provide a step-by-step description of the suggested enhancement in as many details as possible. Describe the current behavior and explain which behavior you expected to see instead and why. At this point you can also tell which alternatives do not work for you. You may want to include screenshots and animated GIFs . This can help you demonstrate the steps or point out the part which the suggestion is related to. You can use this tool to record GIFs on macOS and Windows, and this tool or this tool on Linux. Explain why this enhancement would be useful to most Hermes users. You may also want to point out the other projects that solved it better and which could serve as inspiration.","title":"How Do I Submit a Good Enhancement Suggestion?"},{"location":"appendix/important/contributing/#your-first-code-contribution","text":"Embarking on your first code contribution can be an exhilarating yet intimidating endeavor. Here at Hermes, we foster a welcoming and supportive environment to ensure that everyone can contribute to the codebase irrespective of their experience level. Below is a step-by-step guide to making your first code contribution to our repository: Set Up Your Environment : Fork the repository to your GitHub account. Clone your fork locally on your machine. Set up the development environment following the instructions in the README. Pick an Issue : Browse through the open issues in the GitHub repository. Pick an issue that interests you and aligns with your skills. Beginners might look for issues tagged as good first issue or beginner-friendly . Understand the Issue : Thoroughly read through the issue to understand the problem. Ask clarifying questions in the issue thread if necessary. Branch Out : Create a new branch on your local machine to work on the issue. It's a good practice to name your branch descriptively, e.g., fix-button-bug. Work on the Issue : Work on the issue in your local development environment. Adhere to the coding standards and guidelines provided in the Style guides section. Test Your Changes : Ensure that your changes are well-tested. Verify that your changes don't break any existing functionality. Commit Your Changes : Write a clear and concise commit message following the Style guides -> Commit Messages section guidelines. Push Your Changes : Push your changes to your fork on GitHub. Open a Pull Request : Open a pull request from your fork to the main repository. Provide a detailed description of your changes, the issue it addresses, and any additional information that might help maintainers review your contribution. Review and Revision : Respond to any feedback from the maintainers. Make necessary revisions to your code. Merge and Celebrate : Once your pull request is approved, it will be merged into the main codebase. Celebrate your contribution and share it with the community! Remember, every contributor was new at some point, and we are thrilled to welcome new members to our community. The journey of becoming an adept open-source contributor is rewarding and educational. Your contribution, no matter how small, can make a significant impact. Happy coding!","title":"Your First Code Contribution"},{"location":"appendix/important/contributing/#improving-the-documentation","text":"Documentation is a cornerstone of any successful open-source project. It aids developers in understanding the purpose, structure, and functioning of the code, making the project accessible to all, irrespective of their level of expertise. Our project thrives on the contributions from the community, and improving the documentation is one of the significant ways you can contribute. Here are some ways you could help improve our documentation: Clarification : If you find any ambiguous or unclear documentation, feel free to clarify the wording or suggest improvements through a pull request. Expansion : If areas of the documentation are lacking in detail or missing altogether, contributing expanded explanations or new sections is highly encouraged. Correction : Spot a mistake? Whether it's a spelling error, grammatical error, or incorrect information, your corrections are welcome. Examples : Adding examples to the documentation can significantly enhance utility. If you have examples that illustrate the use of our code, we'd love to include them. Consistency : Ensure the documentation maintains a consistent style and tone. Adhering to the style guidelines specified in our Style guides section is crucial. Technical Accuracy : Ensure that the documentation reflects the current state of the codebase and is technically accurate. Your contributions should follow the guidelines specified in our Style guides section to maintain high quality and consistency. Before making a substantial change, it's a good practice to open an issue to discuss the proposed changes or find an existing issue to work on. Together, we can ensure that our documentation is a valuable resource for all new and experienced developers.","title":"Improving The Documentation"},{"location":"appendix/important/contributing/#style-guides","text":"","title":"Style guides"},{"location":"appendix/important/contributing/#rust","text":"For Rust, we follow the Rust Style Guide .","title":"Rust"},{"location":"appendix/important/contributing/#dart","text":"For Dart, we follow the Effective Dart style guide.","title":"Dart"},{"location":"appendix/important/contributing/#flutter","text":"For Flutter, we follow the Flutter Style Guide .","title":"Flutter"},{"location":"appendix/important/contributing/#commit-messages","text":"Clear and consistent commit messages are crucial for maintaining a readable history in our collaborative environment. Adhering to a structured commit message format also enables us to generate changelogs and navigate through the project's history more efficiently. We follow the Conventional Commits standard for all commit messages in this repository. Here's a brief overview of the Conventional Commits standard: Type : The type of change being made (e.g., feat, fix, chore, docs, style, refactor, perf, test). Scope (Optional) : The scope of the change, denoting what part of the codebase is being altered. Description : A short, descriptive message of the change, written in the imperative mood. Format: <type>(<scope>): <description> Example: feat(button): add a 'submit' button to form component fix(modal): resolve issue with modal overlay not closing chore(tests): update unit tests for utilities module Breaking Changes : If your commit introduces a breaking change, it should be flagged with a ! after the type. Include BREAKING CHANGE: in the body or footer of the commit message to describe what changed and its implications. Example: feat!(dropdown): change the behavior of dropdown component BREAKING CHANGE: alters dropdown trigger to be activated on hover instead of on click. Footer (Optional) : Any additional metadata regarding your commit, such as related issue trackers or BREAKING CHANGE annotations. Following this format makes the version control history readable and reflects professionalism and foresight in maintaining a clean, well-documented codebase.","title":"Commit Messages"},{"location":"appendix/important/license/","text":"License \u00b6 Apache 2 License Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright (c) 2023 Input Output (IOG). Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and MIT License Copyright (c) 2023 Input Output (IOG). Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER","title":"License"},{"location":"appendix/important/license/#license","text":"Apache 2 License Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright (c) 2023 Input Output (IOG). Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and MIT License Copyright (c) 2023 Input Output (IOG). Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER","title":"License"},{"location":"appendix/important/security/","text":"Security \u00b6 Reporting a Vulnerability \u00b6 Please report (suspected) security vulnerabilities to security@iohk.io . You will receive a response from us within 48 hours. If the issue is confirmed, we will release a patch as soon as possible. Please provide a clear and concise description of the vulnerability, including: the affected version(s), steps that can be followed to exercise the vulnerability, any workarounds or mitigations. If you have developed any code or utilities that can help demonstrate the suspected vulnerability, please mention them in your email but DO NOT attempt to include them as attachments as this may cause your Email to be blocked by spam filters.","title":"Security"},{"location":"appendix/important/security/#security","text":"","title":"Security"},{"location":"appendix/important/security/#reporting-a-vulnerability","text":"Please report (suspected) security vulnerabilities to security@iohk.io . You will receive a response from us within 48 hours. If the issue is confirmed, we will release a patch as soon as possible. Please provide a clear and concise description of the vulnerability, including: the affected version(s), steps that can be followed to exercise the vulnerability, any workarounds or mitigations. If you have developed any code or utilities that can help demonstrate the suspected vulnerability, please mention them in your email but DO NOT attempt to include them as attachments as this may cause your Email to be blocked by spam filters.","title":"Reporting a Vulnerability"},{"location":"architecture/","text":"Architecture \u00b6 About arc42 \u00b6 The architecture documentation is based upon the Arc42 documentation standard . arc42, the template for documentation of software and system architecture. Template Version 8.2 EN. (based upon AsciiDoc version), January 2023 Created, maintained and \u00a9 by Dr. Peter Hruschka, Dr. Gernot Starke and contributors. See https://arc42.org .","title":"Index"},{"location":"architecture/#architecture","text":"","title":"Architecture"},{"location":"architecture/#about-arc42","text":"The architecture documentation is based upon the Arc42 documentation standard . arc42, the template for documentation of software and system architecture. Template Version 8.2 EN. (based upon AsciiDoc version), January 2023 Created, maintained and \u00a9 by Dr. Peter Hruschka, Dr. Gernot Starke and contributors. See https://arc42.org .","title":"About arc42"},{"location":"architecture/01_introduction_and_goals/","text":"Introduction and Goals \u00b6 Requirements Overview \u00b6 Quality Goals \u00b6 Stakeholders \u00b6 Role/Name Contact Expectations Role-1 Contact-1 Expectation-1 Role-2 Contact-2 Expectation-2","title":"Introduction and Goals"},{"location":"architecture/01_introduction_and_goals/#introduction-and-goals","text":"","title":"Introduction and Goals"},{"location":"architecture/01_introduction_and_goals/#requirements-overview","text":"","title":"Requirements Overview"},{"location":"architecture/01_introduction_and_goals/#quality-goals","text":"","title":"Quality Goals"},{"location":"architecture/01_introduction_and_goals/#stakeholders","text":"Role/Name Contact Expectations Role-1 Contact-1 Expectation-1 Role-2 Contact-2 Expectation-2","title":"Stakeholders"},{"location":"architecture/02_architecture_constraints/","text":"Architecture Constraints \u00b6","title":"Architecture Constraints"},{"location":"architecture/02_architecture_constraints/#architecture-constraints","text":"","title":"Architecture Constraints"},{"location":"architecture/03_system_scope_and_context/","text":"System Scope and Context \u00b6 Business Context \u00b6 ... ~Diagram or Table~ ... ~optionally: Explanation of external domain interfaces~ Technical Context \u00b6 ... ~Diagram or Table~ ... ~optionally: Explanation of technical interfaces~ ... ~Mapping Input/Output to Channels~","title":"System Scope and Context"},{"location":"architecture/03_system_scope_and_context/#system-scope-and-context","text":"","title":"System Scope and Context"},{"location":"architecture/03_system_scope_and_context/#business-context","text":"... ~Diagram or Table~ ... ~optionally: Explanation of external domain interfaces~","title":"Business Context"},{"location":"architecture/03_system_scope_and_context/#technical-context","text":"... ~Diagram or Table~ ... ~optionally: Explanation of technical interfaces~ ... ~Mapping Input/Output to Channels~","title":"Technical Context"},{"location":"architecture/04_solution_strategy/","text":"Solution Strategy \u00b6 Goal/Requirement Solution Details Flexible and modular backend engine to run decentralized applications The event-driven system is built on the WASM runtime using the WASM component model approach link WASM application packaging Use HDF5 framework to bundle source code and some other metadata into one file lint","title":"Solution Strategy"},{"location":"architecture/04_solution_strategy/#solution-strategy","text":"Goal/Requirement Solution Details Flexible and modular backend engine to run decentralized applications The event-driven system is built on the WASM runtime using the WASM component model approach link WASM application packaging Use HDF5 framework to bundle source code and some other metadata into one file lint","title":"Solution Strategy"},{"location":"architecture/06_runtime_view/","text":"Runtime View \u00b6 ~Runtime Scenario 1~ \u00b6 ~insert runtime diagram or textual description of the scenario~ ~insert description of the notable aspects of the interactions between the building block instances depicted in this diagram.~ ~Runtime Scenario 2~ \u00b6 \u2026 \u00b6 ~Runtime Scenario n~ \u00b6","title":"Runtime View"},{"location":"architecture/06_runtime_view/#runtime-view","text":"","title":"Runtime View"},{"location":"architecture/06_runtime_view/#runtime-scenario-1","text":"~insert runtime diagram or textual description of the scenario~ ~insert description of the notable aspects of the interactions between the building block instances depicted in this diagram.~","title":"~Runtime Scenario 1~"},{"location":"architecture/06_runtime_view/#runtime-scenario-2","text":"","title":"~Runtime Scenario 2~"},{"location":"architecture/06_runtime_view/#_1","text":"","title":"\u2026"},{"location":"architecture/06_runtime_view/#runtime-scenario-n","text":"","title":"~Runtime Scenario n~"},{"location":"architecture/07_deployment_view/","text":"Deployment View \u00b6 Infrastructure Level 1 \u00b6 ... ~Overview Diagram~ Motivation ... ~explanation in text form~ Quality and/or Performance Features ... ~explanation in text form~ Mapping of Building Blocks to Infrastructure ... ~description of the mapping~ Infrastructure Level 2 \u00b6 ~Infrastructure Element 1~ \u00b6 ... ~diagram + explanation~ ~Infrastructure Element 2~ \u00b6 ... ~diagram + explanation~ \u2026 ~Infrastructure Element n~ \u00b6 ... ~diagram + explanation~","title":"Deployment View"},{"location":"architecture/07_deployment_view/#deployment-view","text":"","title":"Deployment View"},{"location":"architecture/07_deployment_view/#infrastructure-level-1","text":"... ~Overview Diagram~ Motivation ... ~explanation in text form~ Quality and/or Performance Features ... ~explanation in text form~ Mapping of Building Blocks to Infrastructure ... ~description of the mapping~","title":"Infrastructure Level 1"},{"location":"architecture/07_deployment_view/#infrastructure-level-2","text":"","title":"Infrastructure Level 2"},{"location":"architecture/07_deployment_view/#infrastructure-element-1","text":"... ~diagram + explanation~","title":"~Infrastructure Element 1~"},{"location":"architecture/07_deployment_view/#infrastructure-element-2","text":"... ~diagram + explanation~ \u2026","title":"~Infrastructure Element 2~"},{"location":"architecture/07_deployment_view/#infrastructure-element-n","text":"... ~diagram + explanation~","title":"~Infrastructure Element n~"},{"location":"architecture/10_quality_requirements/","text":"Quality Requirements \u00b6 Quality Tree \u00b6 Quality Scenarios \u00b6","title":"Quality Requirements"},{"location":"architecture/10_quality_requirements/#quality-requirements","text":"","title":"Quality Requirements"},{"location":"architecture/10_quality_requirements/#quality-tree","text":"","title":"Quality Tree"},{"location":"architecture/10_quality_requirements/#quality-scenarios","text":"","title":"Quality Scenarios"},{"location":"architecture/11_technical_risks/","text":"Risks and Technical Debts \u00b6","title":"Risks and Technical Debts"},{"location":"architecture/11_technical_risks/#risks-and-technical-debts","text":"","title":"Risks and Technical Debts"},{"location":"architecture/12_glossary/","text":"Glossary \u00b6 Term Definition Term-1 definition-1 Term-2 definition-2","title":"Glossary"},{"location":"architecture/12_glossary/#glossary","text":"Term Definition Term-1 definition-1 Term-2 definition-2","title":"Glossary"},{"location":"architecture/05_building_block_view/","text":"Building Blocks View \u00b6 White box Overall System \u00b6 ... ~Overview Diagram~ Motivation ... ~text explanation~ Contained Building Blocks ... ~Description of contained building block (black boxes)~ Important Interfaces ... ~Description of important interfaces~ ~Name black box 1~ \u00b6 ... Purpose/Responsibility ... Interface(s) ... ~(Optional) Quality/Performance Characteristics~ ... ~(Optional) Directory/File Location~ ... ~(Optional) Fulfilled Requirements~ ... ~(optional) Open Issues/Problems/Risks~ ~Name black box 2~ \u00b6 ... ~black box template~ ~Name black box n~ \u00b6 ... ~black box template~ ~Name interface 1~ \u00b6 \u2026 ~Name interface m~ \u00b6 Level 2 \u00b6 White Box ~building block 1~ \u00b6 ... ~white box template~ White Box ~building block 2~ \u00b6 ... ~white box template~ \u2026 White Box ~building block m~ \u00b6 ... ~white box template~ Level 3 \u00b6 White Box ~_building block x.1_~ \u00b6 ... ~white box template~ White Box ~_building block x.2_~ \u00b6 ... ~white box template~ White Box ~_building block y.1_~ \u00b6 ... ~white box template~","title":"Building Blocks View"},{"location":"architecture/05_building_block_view/#building-blocks-view","text":"","title":"Building Blocks View"},{"location":"architecture/05_building_block_view/#white-box-overall-system","text":"... ~Overview Diagram~ Motivation ... ~text explanation~ Contained Building Blocks ... ~Description of contained building block (black boxes)~ Important Interfaces ... ~Description of important interfaces~","title":"White box Overall System"},{"location":"architecture/05_building_block_view/#name-black-box-1","text":"... Purpose/Responsibility ... Interface(s) ... ~(Optional) Quality/Performance Characteristics~ ... ~(Optional) Directory/File Location~ ... ~(Optional) Fulfilled Requirements~ ... ~(optional) Open Issues/Problems/Risks~","title":"~Name black box 1~"},{"location":"architecture/05_building_block_view/#name-black-box-2","text":"... ~black box template~","title":"~Name black box 2~"},{"location":"architecture/05_building_block_view/#name-black-box-n","text":"... ~black box template~","title":"~Name black box n~"},{"location":"architecture/05_building_block_view/#name-interface-1","text":"\u2026","title":"~Name interface 1~"},{"location":"architecture/05_building_block_view/#name-interface-m","text":"","title":"~Name interface m~"},{"location":"architecture/05_building_block_view/#level-2","text":"","title":"Level 2"},{"location":"architecture/05_building_block_view/#white-box-building-block-1","text":"... ~white box template~","title":"White Box ~building block 1~"},{"location":"architecture/05_building_block_view/#white-box-building-block-2","text":"... ~white box template~ \u2026","title":"White Box ~building block 2~"},{"location":"architecture/05_building_block_view/#white-box-building-block-m","text":"... ~white box template~","title":"White Box ~building block m~"},{"location":"architecture/05_building_block_view/#level-3","text":"","title":"Level 3"},{"location":"architecture/05_building_block_view/#white-box-_building-block-x1_","text":"... ~white box template~","title":"White Box ~_building block x.1_~"},{"location":"architecture/05_building_block_view/#white-box-_building-block-x2_","text":"... ~white box template~","title":"White Box ~_building block x.2_~"},{"location":"architecture/05_building_block_view/#white-box-_building-block-y1_","text":"... ~white box template~","title":"White Box ~_building block y.1_~"},{"location":"architecture/05_building_block_view/hermes_core/","text":"Hermes core \u00b6 Hermes core represents an event-driven system running on top of the WASM runtime utilizing WASM component model approach. Every user's application is expected to be compiled as a WASM module, which means that it could be developed on any language with the WASM support e.g. Java, C, Rust, Go etc. Hermes runtime extension (HRE) \u00b6 Hermes runtime extension (HRE) - a Hermes module which will provides an additional functionality to the Hermes application and stands as a library. It could produce a Hermes events , which can then be placed into the Hermes events queue for further processing by the Hermes application . Each HRE defines a specific WIT file, with the described interface of HRE calls (directly by the Hermes application ) and specification of produced events. Hermes event \u00b6 Hermes event - an event produced by HRE that encapsulates all the necessary data needed to process it. After successful delivery, each event can be executed by the Hermes application , depending on whether that specific Hermes application has subscribed to such events or not. Hermes events queue \u00b6 Hermes events queue - a queue-like data structure. Events are added to one end, one by one, by the HRE . The Hermes application then executes/consumes these events from the other end of the queue. The queue preserves the order of event execution based on how they were added in it. Hermes application \u00b6 Hermes application - a collection of WASM components, which are packed together and executes a specific business logic. It mainly serves as an event handler for the of the Hermes Events . Each Hermes application can interact with the HRE through HRE calls based on corresponding WIT definitions.","title":"Hermes core"},{"location":"architecture/05_building_block_view/hermes_core/#hermes-core","text":"Hermes core represents an event-driven system running on top of the WASM runtime utilizing WASM component model approach. Every user's application is expected to be compiled as a WASM module, which means that it could be developed on any language with the WASM support e.g. Java, C, Rust, Go etc.","title":"Hermes core"},{"location":"architecture/05_building_block_view/hermes_core/#hermes-runtime-extension-hre","text":"Hermes runtime extension (HRE) - a Hermes module which will provides an additional functionality to the Hermes application and stands as a library. It could produce a Hermes events , which can then be placed into the Hermes events queue for further processing by the Hermes application . Each HRE defines a specific WIT file, with the described interface of HRE calls (directly by the Hermes application ) and specification of produced events.","title":"Hermes runtime extension (HRE)"},{"location":"architecture/05_building_block_view/hermes_core/#hermes-event","text":"Hermes event - an event produced by HRE that encapsulates all the necessary data needed to process it. After successful delivery, each event can be executed by the Hermes application , depending on whether that specific Hermes application has subscribed to such events or not.","title":"Hermes event"},{"location":"architecture/05_building_block_view/hermes_core/#hermes-events-queue","text":"Hermes events queue - a queue-like data structure. Events are added to one end, one by one, by the HRE . The Hermes application then executes/consumes these events from the other end of the queue. The queue preserves the order of event execution based on how they were added in it.","title":"Hermes events queue"},{"location":"architecture/05_building_block_view/hermes_core/#hermes-application","text":"Hermes application - a collection of WASM components, which are packed together and executes a specific business logic. It mainly serves as an event handler for the of the Hermes Events . Each Hermes application can interact with the HRE through HRE calls based on corresponding WIT definitions.","title":"Hermes application"},{"location":"architecture/08_concepts/","text":"Cross-cutting Concepts \u00b6","title":"Cross-cutting Concepts"},{"location":"architecture/08_concepts/#cross-cutting-concepts","text":"","title":"Cross-cutting Concepts"},{"location":"architecture/08_concepts/hermes_runtime_engine/h_app_exec/","text":"Hermes application execution \u00b6 Basically, the Hermes application is a set of Hermes event handler functions and nothing more. The source code could be split into different WASM components, but they will have the same state specified for this Hermes application . Application's state initializes during the application initializing process and mainly based on the configuration of the Hermes runtime extensions config files. For each event handling execution, the application's state remains consistent and immutable . It means that before any event processing, it is made a copy of the initial application's state, this copy used during the execution and removed after it. So the overall application state remains the same.","title":"Hermes application execution"},{"location":"architecture/08_concepts/hermes_runtime_engine/h_app_exec/#hermes-application-execution","text":"Basically, the Hermes application is a set of Hermes event handler functions and nothing more. The source code could be split into different WASM components, but they will have the same state specified for this Hermes application . Application's state initializes during the application initializing process and mainly based on the configuration of the Hermes runtime extensions config files. For each event handling execution, the application's state remains consistent and immutable . It means that before any event processing, it is made a copy of the initial application's state, this copy used during the execution and removed after it. So the overall application state remains the same.","title":"Hermes application execution"},{"location":"architecture/08_concepts/hermes_runtime_engine/h_app_struct/","text":"Hermes application structure \u00b6 Hermes application it is a collection of compiled WASM components , HRE config files and some metadata bundled in hdf5 package. Each WASM component it is the event handlers implementation of export functions from the WIT file, specified by the Hermes runtime extension . Package structure \u251c\u2500\u2500 module1.wasm \u251c\u2500\u2500 module2.wasm \u251c\u2500\u2500 config.json \u2514\u2500\u2500 METADATA","title":"Hermes application structure"},{"location":"architecture/08_concepts/hermes_runtime_engine/h_app_struct/#hermes-application-structure","text":"Hermes application it is a collection of compiled WASM components , HRE config files and some metadata bundled in hdf5 package. Each WASM component it is the event handlers implementation of export functions from the WIT file, specified by the Hermes runtime extension . Package structure \u251c\u2500\u2500 module1.wasm \u251c\u2500\u2500 module2.wasm \u251c\u2500\u2500 config.json \u2514\u2500\u2500 METADATA","title":"Hermes application structure"},{"location":"architecture/08_concepts/hermes_runtime_engine/h_events_queue/","text":"Hermes events queue implementation \u00b6 Hermes events queue it is a simple multi-producers single-consumer (MPSC) queue data structure. It receives Hermes events from different Hermes runtime extensions and responsible to transport them in corresponding order to the Hermes application .","title":"Hermes events queue implementation"},{"location":"architecture/08_concepts/hermes_runtime_engine/h_events_queue/#hermes-events-queue-implementation","text":"Hermes events queue it is a simple multi-producers single-consumer (MPSC) queue data structure. It receives Hermes events from different Hermes runtime extensions and responsible to transport them in corresponding order to the Hermes application .","title":"Hermes events queue implementation"},{"location":"architecture/08_concepts/hermes_runtime_engine/hre_init_setup/","text":"HRE initial setup \u00b6 To properly setup a Hermes runtime extension (HRE) module a specific configuration file should be provided by the Hermes application . This configuration file is loaded during the HRE initialization process and provides a necessary data to start a specific HRE for a specific Hermes application . Each HRE defines a JSON schema of the desired configuration for it. For example for some kind of networking HRE module a json schema could look like: { \"host\" : { \"type\" : \"string\" }, \"port\" : { \"type\" : \"integer\" }, \"timeout\" : { \"type\" : \"integer\" , \"minimum\" : 0 }, \"maxConnections\" : { \"type\" : \"integer\" , \"minimum\" : 1 }, }","title":"HRE initial setup"},{"location":"architecture/08_concepts/hermes_runtime_engine/hre_init_setup/#hre-initial-setup","text":"To properly setup a Hermes runtime extension (HRE) module a specific configuration file should be provided by the Hermes application . This configuration file is loaded during the HRE initialization process and provides a necessary data to start a specific HRE for a specific Hermes application . Each HRE defines a JSON schema of the desired configuration for it. For example for some kind of networking HRE module a json schema could look like: { \"host\" : { \"type\" : \"string\" }, \"port\" : { \"type\" : \"integer\" }, \"timeout\" : { \"type\" : \"integer\" , \"minimum\" : 0 }, \"maxConnections\" : { \"type\" : \"integer\" , \"minimum\" : 1 }, }","title":"HRE initial setup"},{"location":"architecture/08_concepts/hermes_runtime_engine/hre_interface/","text":"HRE interface \u00b6 Each Hermes Runtime Extension ( HRE ) defines a WIT file. It is a 1 on 1 match, so every HRE has to have a corresponding WIT file. It specifies the following important parts: Hermes events signature, which produced by the corresponding HRE . HRE calls which could invoked by the Hermes application . Example of the WIT file for the cron HRE : package hermes:cron; interface cron-types { record cron-tagged { /// The crontab entry in standard cron format. /// The Time is ALWAYS relative to UTC and does not account for local time. /// If Localtime adjustment is required it must be handled by the module. when: string, /// The tag associated with the crontab entry. tag: string } } interface cron-events { use cron-types.{cron-tagged}; /// Triggered when a cron event fires. /// /// This event is only ever generated for the application that added /// the cron job. on-cron: func(event: cron-tagged, last: bool) -> bool; } interface cron-calls { use cron-types.{cron-tagged}; /// # Schedule Recurrent CRON event /// /// Cron events will be delivered to the `on-cron` event handler. add: func(entry: cron-tagged, retrigger: bool) -> bool; /// # Remove the requested crontab. /// /// Allows for management of scheduled cron events. rm: func(entry: cron-tagged) -> bool; } world cron { import cron-calls; export cron-events; } Hermes events : on-cron: func(event: cron-tagged, last: bool) -> bool HRE calls : add: func(entry: cron-tagged, retrigger: bool) -> bool rm: func(entry: cron-tagged) -> bool","title":"HRE interface"},{"location":"architecture/08_concepts/hermes_runtime_engine/hre_interface/#hre-interface","text":"Each Hermes Runtime Extension ( HRE ) defines a WIT file. It is a 1 on 1 match, so every HRE has to have a corresponding WIT file. It specifies the following important parts: Hermes events signature, which produced by the corresponding HRE . HRE calls which could invoked by the Hermes application . Example of the WIT file for the cron HRE : package hermes:cron; interface cron-types { record cron-tagged { /// The crontab entry in standard cron format. /// The Time is ALWAYS relative to UTC and does not account for local time. /// If Localtime adjustment is required it must be handled by the module. when: string, /// The tag associated with the crontab entry. tag: string } } interface cron-events { use cron-types.{cron-tagged}; /// Triggered when a cron event fires. /// /// This event is only ever generated for the application that added /// the cron job. on-cron: func(event: cron-tagged, last: bool) -> bool; } interface cron-calls { use cron-types.{cron-tagged}; /// # Schedule Recurrent CRON event /// /// Cron events will be delivered to the `on-cron` event handler. add: func(entry: cron-tagged, retrigger: bool) -> bool; /// # Remove the requested crontab. /// /// Allows for management of scheduled cron events. rm: func(entry: cron-tagged) -> bool; } world cron { import cron-calls; export cron-events; } Hermes events : on-cron: func(event: cron-tagged, last: bool) -> bool HRE calls : add: func(entry: cron-tagged, retrigger: bool) -> bool rm: func(entry: cron-tagged) -> bool","title":"HRE interface"},{"location":"architecture/08_concepts/hermes_runtime_engine/wasm_parallel/","text":"WASM execution parallelization \u00b6 Looking for potential optimization, an obvious solution to parallelize Hermes event's processing. One problem with this approach is the possibility of the queue order being disrupted. Desired properties: Any event source can ensure dependent events are fully processed before sending new events. Unrelated events are not blocked by another events sources dependencies We can have multiple WASM components running concurrently, 1 per CPU core. We keep the WASM execution as busy as possible. We do not block WASM execution because of dependencies. A general solution that can be used by any event source. Event sources do not need dependencies where their events do not require earlier complete execution. Generalized Dependency Tracking \u00b6 One of the potential solution","title":"WASM execution parallelization"},{"location":"architecture/08_concepts/hermes_runtime_engine/wasm_parallel/#wasm-execution-parallelization","text":"Looking for potential optimization, an obvious solution to parallelize Hermes event's processing. One problem with this approach is the possibility of the queue order being disrupted. Desired properties: Any event source can ensure dependent events are fully processed before sending new events. Unrelated events are not blocked by another events sources dependencies We can have multiple WASM components running concurrently, 1 per CPU core. We keep the WASM execution as busy as possible. We do not block WASM execution because of dependencies. A general solution that can be used by any event source. Event sources do not need dependencies where their events do not require earlier complete execution.","title":"WASM execution parallelization"},{"location":"architecture/08_concepts/hermes_runtime_engine/wasm_parallel/#generalized-dependency-tracking","text":"One of the potential solution","title":"Generalized Dependency Tracking"},{"location":"architecture/09_architecture_decisions/","text":"Architecture Decisions \u00b6 Index graph TD 0001-arch-std[0001 Architecture Documentation Standard] click 0001-arch-std \"/hermes/architecture/09_architecture_decisions/0001-arch-std/\" _blank 0001-arch-std:::mermaid-accepted 0001-arch-std:::mermaid-common 0002-adr[0002 Architecture Decision Records] click 0002-adr \"/hermes/architecture/09_architecture_decisions/0002-adr/\" _blank 0002-adr:::mermaid-accepted 0002-adr:::mermaid-common 0001-arch-std -- Extended --> 0002-adr classDef mermaid-draft fill:#a3a3a3; classDef mermaid-common color:#595959; classDef mermaid-proposed fill:#b6d8ff; classDef mermaid-common color:#595959; classDef mermaid-accepted fill:#b4eda0; classDef mermaid-common color:#595959; classDef mermaid-rejected fill:#ffd5d1; classDef mermaid-common color:#595959; classDef mermaid-superseded fill:#ffebb6; classDef mermaid-common color:#595959;","title":"Architecture Decisions"},{"location":"architecture/09_architecture_decisions/#architecture-decisions","text":"Index graph TD 0001-arch-std[0001 Architecture Documentation Standard] click 0001-arch-std \"/hermes/architecture/09_architecture_decisions/0001-arch-std/\" _blank 0001-arch-std:::mermaid-accepted 0001-arch-std:::mermaid-common 0002-adr[0002 Architecture Decision Records] click 0002-adr \"/hermes/architecture/09_architecture_decisions/0002-adr/\" _blank 0002-adr:::mermaid-accepted 0002-adr:::mermaid-common 0001-arch-std -- Extended --> 0002-adr classDef mermaid-draft fill:#a3a3a3; classDef mermaid-common color:#595959; classDef mermaid-proposed fill:#b6d8ff; classDef mermaid-common color:#595959; classDef mermaid-accepted fill:#b4eda0; classDef mermaid-common color:#595959; classDef mermaid-rejected fill:#ffd5d1; classDef mermaid-common color:#595959; classDef mermaid-superseded fill:#ffebb6; classDef mermaid-common color:#595959;","title":"Architecture Decisions"},{"location":"architecture/09_architecture_decisions/0001-arch-std/","text":"Context \u00b6 There needs to be a commonly understood and well documented structure to Architecture Documentation. Architecture Documentation is the responsibility of the entire team. A standardized structure to that documentation helps with collaboration. Assumptions \u00b6 Architecture documentation is the collective responsibility of the development team. A well documented structure to that documentation will aid in collaboration and maintenance of the documentation. Decision \u00b6 We will be using the arc42 standard for organizing architecture documentation. Risks \u00b6 That arc42 becomes unmaintained upstream, or some flaw is found with its methodology. That the team does not understand the structure of the architecture documentation or necessity to maintain it. Consequences \u00b6 If we do: It is easier to maintain documentation when there is an agreed structure to it. It is easier to on-board new members of the team when there are resources to help understand the documentation and its structure. Architecture Documentation will be of higher quality and more meaningfully reviewed in the context of an agreed structure. If we don't: Architecture docs will be \"ad-hoc\". Difficult for the team to meaningfully collaborate on Architecture. Difficult to maintain. Difficult to ensure the necessary information is captured. Difficult to iterate and be agile. More Information \u00b6 arc42 Original Templates Main Documentation Books Examples","title":"0001 Architecture Documentation Standard"},{"location":"architecture/09_architecture_decisions/0001-arch-std/#context","text":"There needs to be a commonly understood and well documented structure to Architecture Documentation. Architecture Documentation is the responsibility of the entire team. A standardized structure to that documentation helps with collaboration.","title":"Context"},{"location":"architecture/09_architecture_decisions/0001-arch-std/#assumptions","text":"Architecture documentation is the collective responsibility of the development team. A well documented structure to that documentation will aid in collaboration and maintenance of the documentation.","title":"Assumptions"},{"location":"architecture/09_architecture_decisions/0001-arch-std/#decision","text":"We will be using the arc42 standard for organizing architecture documentation.","title":"Decision"},{"location":"architecture/09_architecture_decisions/0001-arch-std/#risks","text":"That arc42 becomes unmaintained upstream, or some flaw is found with its methodology. That the team does not understand the structure of the architecture documentation or necessity to maintain it.","title":"Risks"},{"location":"architecture/09_architecture_decisions/0001-arch-std/#consequences","text":"If we do: It is easier to maintain documentation when there is an agreed structure to it. It is easier to on-board new members of the team when there are resources to help understand the documentation and its structure. Architecture Documentation will be of higher quality and more meaningfully reviewed in the context of an agreed structure. If we don't: Architecture docs will be \"ad-hoc\". Difficult for the team to meaningfully collaborate on Architecture. Difficult to maintain. Difficult to ensure the necessary information is captured. Difficult to iterate and be agile.","title":"Consequences"},{"location":"architecture/09_architecture_decisions/0001-arch-std/#more-information","text":"arc42 Original Templates Main Documentation Books Examples","title":"More Information"},{"location":"architecture/09_architecture_decisions/0002-adr/","text":"Context \u00b6 Architecture Decision Records are part of arc42 . We need an efficient and automated way to manage them. The system needs to be easy for anyone to use as documenting Architecture Decisions is a team responsibility. Assumptions \u00b6 The team as a whole is responsible for creating and maintaining Architecture Decision Records. Decision \u00b6 We will use the MkDocs Material ADR Plugin to assist in ADR documentation and automation. Risks \u00b6 The plugin doesn't get maintained or has technical issues This risk can be mitigated because the plugin is simple, and it would be easy for us to fork and maintain it as required. Consequences \u00b6 ADR become easier for people to author. This should assist in making the team more pro-active in their creation and maintenance. More Information \u00b6 arc42 arc42 ADR Guide MkDocs Material ADR Plugin Fixed fork of MkDocs Material ADR Plugin","title":"0002 Architecture Decision Records"},{"location":"architecture/09_architecture_decisions/0002-adr/#context","text":"Architecture Decision Records are part of arc42 . We need an efficient and automated way to manage them. The system needs to be easy for anyone to use as documenting Architecture Decisions is a team responsibility.","title":"Context"},{"location":"architecture/09_architecture_decisions/0002-adr/#assumptions","text":"The team as a whole is responsible for creating and maintaining Architecture Decision Records.","title":"Assumptions"},{"location":"architecture/09_architecture_decisions/0002-adr/#decision","text":"We will use the MkDocs Material ADR Plugin to assist in ADR documentation and automation.","title":"Decision"},{"location":"architecture/09_architecture_decisions/0002-adr/#risks","text":"The plugin doesn't get maintained or has technical issues This risk can be mitigated because the plugin is simple, and it would be easy for us to fork and maintain it as required.","title":"Risks"},{"location":"architecture/09_architecture_decisions/0002-adr/#consequences","text":"ADR become easier for people to author. This should assist in making the team more pro-active in their creation and maintenance.","title":"Consequences"},{"location":"architecture/09_architecture_decisions/0002-adr/#more-information","text":"arc42 arc42 ADR Guide MkDocs Material ADR Plugin Fixed fork of MkDocs Material ADR Plugin","title":"More Information"},{"location":"getting-started/","text":"Getting Started \u00b6","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"getting-started/advanced/","text":"Advanced \u00b6","title":"Advanced"},{"location":"getting-started/advanced/#advanced","text":"","title":"Advanced"},{"location":"getting-started/development/","text":"Development \u00b6","title":"Development"},{"location":"getting-started/development/#development","text":"","title":"Development"},{"location":"getting-started/quick-start/","text":"Quick Start \u00b6","title":"Quick Start"},{"location":"getting-started/quick-start/#quick-start","text":"","title":"Quick Start"},{"location":"architecture/09_architecture_decisions/","text":"Architecture Decisions \u00b6 Index graph TD 0001-arch-std[0001 Architecture Documentation Standard] click 0001-arch-std \"/hermes/architecture/09_architecture_decisions/0001-arch-std/\" _blank 0001-arch-std:::mermaid-accepted 0001-arch-std:::mermaid-common 0002-adr[0002 Architecture Decision Records] click 0002-adr \"/hermes/architecture/09_architecture_decisions/0002-adr/\" _blank 0002-adr:::mermaid-accepted 0002-adr:::mermaid-common 0001-arch-std -- Extended --> 0002-adr classDef mermaid-draft fill:#a3a3a3; classDef mermaid-common color:#595959; classDef mermaid-proposed fill:#b6d8ff; classDef mermaid-common color:#595959; classDef mermaid-accepted fill:#b4eda0; classDef mermaid-common color:#595959; classDef mermaid-rejected fill:#ffd5d1; classDef mermaid-common color:#595959; classDef mermaid-superseded fill:#ffebb6; classDef mermaid-common color:#595959;","title":"Architecture Decisions"},{"location":"architecture/09_architecture_decisions/#architecture-decisions","text":"Index graph TD 0001-arch-std[0001 Architecture Documentation Standard] click 0001-arch-std \"/hermes/architecture/09_architecture_decisions/0001-arch-std/\" _blank 0001-arch-std:::mermaid-accepted 0001-arch-std:::mermaid-common 0002-adr[0002 Architecture Decision Records] click 0002-adr \"/hermes/architecture/09_architecture_decisions/0002-adr/\" _blank 0002-adr:::mermaid-accepted 0002-adr:::mermaid-common 0001-arch-std -- Extended --> 0002-adr classDef mermaid-draft fill:#a3a3a3; classDef mermaid-common color:#595959; classDef mermaid-proposed fill:#b6d8ff; classDef mermaid-common color:#595959; classDef mermaid-accepted fill:#b4eda0; classDef mermaid-common color:#595959; classDef mermaid-rejected fill:#ffd5d1; classDef mermaid-common color:#595959; classDef mermaid-superseded fill:#ffebb6; classDef mermaid-common color:#595959;","title":"Architecture Decisions"},{"location":"appendix/tags/","text":"Tag Index \u00b6 ADR \u00b6 0002 Architecture Decision Records arc42 \u00b6 Index 0001 Architecture Documentation Standard 0002 Architecture Decision Records","title":"Tag Index"},{"location":"appendix/tags/#tag-index","text":"","title":"Tag Index"},{"location":"appendix/tags/#adr","text":"0002 Architecture Decision Records","title":"ADR"},{"location":"appendix/tags/#arc42","text":"Index 0001 Architecture Documentation Standard 0002 Architecture Decision Records","title":"arc42"}]}