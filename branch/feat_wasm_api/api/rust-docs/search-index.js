var searchIndex = new Map(JSON.parse('[\
["cardano_chain_follower",{"doc":"Cardano chain follower.","t":"PPGPPPPGFPFFPPPFGPPGPGPPFIPPPPNNNNNNNNNNOOOONNNNNNNNNNNNNNNCOONNNNNNNNNNNNNNNNNNCOOONCNOONNNNNNNNNNNNNNNNNHNNNNNPGSFFFPNNNNNNNNNNNOOONNNNOOCNNNNNNNNNNNNNOONNNOONNNNNNNNNNNNNNNNFGGPPFNNNNNNNNOONNOONNNNNHNNNNNNNNOOHHHHONNNNNNNNNNNNNNNNNFFNNNNNNNNONNNNNNOONNNNNNNNNNNFNNONNNNONNNNNNNNN","n":["Block","Blockfetch","ChainUpdate","Chainsync","Client","Codec","Err","Error","Follower","FollowerBackgroundTaskNotRunning","FollowerConfig","FollowerConfigBuilder","FollowerStartPointNotFound","Mainnet","MithrilSnapshot","MultiEraBlockData","Network","Ok","Origin","Point","Point","PointOrTip","Preprod","Preview","Reader","Result","Rollback","Specific","Testnet","Tip","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain_update_buffer_size","chain_update_buffer_size","chain_update_rx","client","clone","clone_into","decode","decode","decode_fragment","encode","encode_fragment","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","follow","follow_from","follow_from","from","from","from","from","from","from","from_ref","hash","into","into","into","into","into","into_request","into_request","into_request","into_request","into_request","mithril_snapshot","mithril_snapshot","mithril_snapshot_path","mithril_snapshot_path","new","read","slot_or_default","task_join_handle","task_request_tx","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","validate_multiera_block","vzip","vzip","vzip","vzip","vzip","Block","ChainUpdate","DEFAULT_CHAIN_UPDATE_BUFFER_SIZE","Follower","FollowerConfig","FollowerConfigBuilder","Rollback","block_data","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","chain_update_buffer_size","chain_update_buffer_size","chain_update_buffer_size","chain_update_rx","close","connect","default","follow_from","follow_from","follow_from","follow_task","from","from","from","from","into","into","into","into","into_request","into_request","into_request","into_request","mithril_snapshot_path","mithril_snapshot_path","mithril_snapshot_path","next","send_request_and_wait","set_read_pointer","task_join_handle","task_request_tx","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","MithrilSnapshotState","Request","Response","SetReadPointer","SetReadPointer","TaskState","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain_update_tx","client","clone","clone_into","current_read_pointer","current_read_pointer_notify","from","from","from","from","from_ref","handle_request","into","into","into","into","into_request","into_request","into_request","into_request","iter","mithril_snapshot_state","next_from_client","run","send_next_chain_update","set_client_read_pointer","snapshot","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","MithrilSnapshot","MithrilSnapshotIterator","borrow","borrow","borrow_mut","borrow_mut","contains_point","from","from","from_path","inner","into","into","into_iter","into_request","into_request","next","path","tip","try_from","try_from","try_into","try_into","try_read_block","try_read_block_range","try_read_blocks_from_point","type_id","type_id","vzip","vzip","Reader","borrow","borrow_mut","client","connect","from","into","into_request","mithril_snapshot","read_block","read_block_from_network","read_block_range","read_block_range_from_network","resolve_tip","try_from","try_into","type_id","vzip"],"q":[[0,"cardano_chain_follower"],[112,"cardano_chain_follower::follow"],[176,"cardano_chain_follower::follow::follow_task"],[234,"cardano_chain_follower::mithril_snapshot"],[264,"cardano_chain_follower::read"],[282,"pallas_traverse"],[283,"minicbor::decode::decoder"],[284,"minicbor::decode::error"],[285,"core::result"],[286,"core::error"],[287,"alloc::boxed"],[288,"minicbor::encode::encoder"],[289,"minicbor::encode::error"],[290,"minicbor::encode::write"],[291,"alloc::vec"],[292,"core::fmt"],[293,"core::fmt"],[294,"tonic::request"],[295,"alloc::string"],[296,"core::any"],[297,"tokio::runtime::task::error"],[298,"core::convert"],[299,"std::path"],[300,"core::option"],[301,"tokio::sync::oneshot"],[302,"pallas_network::facades"],[303,"tokio::sync::mpsc::bounded"],[304,"tokio::sync::mpsc::bounded"]],"d":["New block inserted on chain.","Blockfetch protocol error.","Enum of chain updates received by the follower.","Chainsync protocol error.","Client connection error.","Data encoding/decoding error.","Contains the error value","Crate error type.","Cardano chain follower.","Follower background task has stopped.","Configuration for the Cardano chain follower.","Builder used to create <code>FollowerConfig</code>s.","Follower start point was not found.","Cardano mainnet network.","Mithril snapshot error.","CBOR encoded data of a multi-era block.","Enum of possible Cardano networks.","Contains the success value","","A point within a chain","Represents a specific point of the chain.","A point in the chain or the tip.","Cardano pre-production network.","Cardano preview network.","Cardano chain Reader.","Crate result type.","Chain rollback to the given block.","","Cardano testnet network.","Represents the tip of the chain.","","","","","","","","","","","Block buffer size option.","Configured chain update buffer size.","Chain update receiver.","Connection used by the reader to read blocks.","","","Decodes the data into a multi-era block.","","","","","","","","","","","","","Cardano chain follow module.","Where to start following from.","Where to start following from.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Internal Mithril snapshot functions.","Mithril snapshot, if configured.","Path to the Mithril snapshot the follower should use.","Path to the Mithril snapshot the follower should use.","","Cardano chain read module.","","Task thread join handle.","Task request sender.","","","","","","","","","","","","","","","","","","Validate a multi-era block.","","","","","","New block inserted on chain.","Enum of chain updates received by the follower.","Default <code>Follower</code> block buffer size.","Cardano chain follower.","Configuration for the Cardano chain follower.","Builder used to create <code>FollowerConfig</code>s.","Chain rollback to the given block.","Gets the chain update’s block data.","","","","","","","","","Builds a <code>FollowerConfig</code>.","Sets the size of the chain updates buffer used by the …","Block buffer size option.","Configured chain update buffer size.","Chain update receiver.","Closes the follower connection and stops its background …","Connects the follower to a producer using the node-to-node …","","Sets the point at which the follower will start following …","Where to start following from.","Where to start following from.","Contains functions related to the Follower’s background …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Sets the path of the Mithril snapshot the <code>Follower</code> will …","Path to the Mithril snapshot the follower should use.","Path to the Mithril snapshot the follower should use.","Receive the next chain update from the producer.","Sends a request to the background task and waits for its …","Set the follower’s chain read-pointer. Returns None if …","Task thread join handle.","Task request sender.","","","","","","","","","","","","","","","","","Holds the state of Mithril snapshot functions in the …","Follow task’s requests.","Follow task’s responses.","Request the follow task to set the read pointer to the …","Whether the read pointer was set correctly.","Holds the locks and channels used by the follow task.","","","","","","","","","Shared chain update channel.","Shared client.","","","Shared current read pointer.","Shared current read point notifier.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Handles a request.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Active snapshot iterator. None means we are not iterating …","Shared Mithril snapshot reading state.","Waits for the next update from the node the client is …","Runs a <code>Follower</code> background task.","Sends the next chain update to the follower. This can be …","Sets the N2N remote client’s read pointer.","Mithril snapshot handle.","","","","","","","","","","","","","","","","","","Holds information about a Mithril snapshot.","Wraps the iterator type returned by Pallas.","","","","","Naively checks if the snapshot contains a point.","Returns the argument unchanged.","Returns the argument unchanged.","Gets information about the snapshot at the given path.","Inner iterator.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Path to the Mithril snapshot.","Snapshot’s tip.","","","","","Tries reading a block from the Mithril snapshot. Returns …","Tries reading a range of blocks from the Mithril snapshot. …","Tries get an iterator that reads blocks from the Mithril …","","","","","Cardano chain Reader.","","","Connection used by the reader to read blocks.","Connects the Reader to a producer using the node-to-node …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Mithril snapshot, if configured.","Reads a single block from the chain.","Reads a block from the network using the N2N client.","Reads a range of blocks from the chain.","Reads a range of blocks from the network using the N2N …","Finds the tip point.","","","",""],"i":[28,18,0,18,18,18,5,0,0,18,0,0,18,35,18,0,0,5,1,0,22,0,35,35,0,0,28,1,35,22,22,3,35,18,1,22,3,35,18,1,29,30,32,50,1,1,3,1,1,1,1,1,1,1,1,1,18,18,1,0,29,30,22,22,3,35,18,1,1,1,22,3,35,18,1,22,3,35,18,1,0,50,29,30,1,0,1,32,32,1,18,22,3,35,18,1,22,3,35,18,1,22,3,35,18,1,0,22,3,35,18,1,28,0,0,0,0,0,28,28,28,29,30,32,28,29,30,32,29,29,29,30,32,32,32,29,29,29,30,0,28,29,30,32,28,29,30,32,28,29,30,32,29,29,30,32,32,32,32,32,28,29,30,32,28,29,30,32,28,29,30,32,28,29,30,32,0,0,0,38,39,0,38,39,51,41,38,39,51,41,41,41,41,41,41,41,38,39,51,41,41,0,38,39,51,41,38,39,51,41,51,41,0,0,0,0,51,41,38,39,51,41,38,39,51,41,38,39,51,41,38,39,51,41,0,0,49,44,49,44,44,49,44,44,49,49,44,49,49,44,49,44,44,49,44,49,44,44,44,44,49,44,49,44,0,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50],"f":"``````````````````````````````{ce{}{}}000000000````{bb}{{ce}d{}{}}{f{{j{h}}}}{{ld}{{A`{bn}}}}{{{Ad{Ab}}}{{A`{c{Ah{Af}}}}}{}}{{b{Aj{c}}d}{{A`{dAl}}}An}{c{{A`{{B`{Ab}}{Ah{Af}}}}}{}}{{bb}Bb}{{ce}Bb{}{}}000{{BdBf}Bh}0{{bBf}{{A`{dBj}}}}```{bBl}{cc{}}00000{{bc}dBn}>>>>>{c{{C`{e}}}{}{}}0000````{{Cb{B`{Ab}}}b}`{bCb}``{ce{}{}}{cCd{}}{c{{A`{e}}}{}{}}000000000{cCf{}}0000{hd}44444```````{Chf}55555555{CjCl}{{CjCn}Cj}```{D`{{A`{dDb}}}}{{DdDfCl}{{j{D`}}}}{{}Cj}{{Cjc}Cj{{Dh{Bl}}}}```{cc{}}000<<<<????{{CjDj}Cj}``{D`{{j{Ch}}}}{{D`Dl}{{j{Dn}}}}{{D`c}{{j{{E`{b}}}}}{{Dh{Bl}}}}``>>>>>>>>===={ce{}{}}000``````00000000``{EbEb}{{ce}d{}{}}``77777{{EbDl{Ed{Dn}}}d}3333{c{{C`{e}}}{}{}}000``{Eb{{j{{E`{Ch}}}}}}{{Ef{E`{Eh}}{El{{Ej{Dl{Ed{Dn}}}}}}{En{{j{Ch}}}}}d}{Eb{{A`{d{F`{{j{Ch}}}}}}}}{{EfBl}{{j{{E`{b}}}}}}`8{c{{A`{e}}}{}{}}0000000{cCf{}}000::::``::::{{Ehb}Bb}{cc{}}0{Dj{{j{Eh}}}}`===99{Fb{{E`{c}}}{}}``5555{{Ehb}{{j{{E`{f}}}}}}{{Ehbb}{{j{{E`{{Ej{b{B`{f}}}}}}}}}}{{Ehb}{{E`{Fb}}}}77{ce{}{}}0`00`{{DdDf{E`{Dj}}}{{j{Fd}}}}71?`{{Fdc}{{j{f}}}{{Dh{Bl}}}}{{Fdb}{{j{f}}}}{{Fdbc}{{j{{B`{f}}}}}{{Dh{Bl}}}}{{Fdbb}{{j{{B`{f}}}}}}{Fd{{j{b}}}}??>6","c":[],"p":[[6,"Point",0],[1,"unit"],[5,"MultiEraBlockData",0],[6,"MultiEraBlock",282],[8,"Result",0],[5,"Decoder",283],[5,"Error",284],[6,"Result",285],[1,"u8"],[1,"slice"],[10,"Error",286],[5,"Box",287],[5,"Encoder",288],[5,"Error",289],[10,"Write",290],[5,"Vec",291],[1,"bool"],[6,"Error",0],[5,"Formatter",292],[8,"Result",292],[5,"Error",292],[6,"PointOrTip",0],[10,"Hasher",293],[5,"Request",294],[1,"u64"],[5,"String",295],[5,"TypeId",296],[6,"ChainUpdate",112],[5,"FollowerConfigBuilder",112],[5,"FollowerConfig",112],[1,"usize"],[5,"Follower",112],[5,"JoinError",297],[1,"str"],[6,"Network",0],[10,"Into",298],[5,"PathBuf",299],[6,"Request",176],[6,"Response",176],[6,"Option",300],[5,"TaskState",176],[5,"Sender",301],[5,"PeerClient",302],[5,"MithrilSnapshot",234],[1,"tuple"],[5,"Receiver",303],[5,"Sender",303],[5,"SendError",304],[5,"MithrilSnapshotIterator",234],[5,"Reader",264],[5,"MithrilSnapshotState",176]],"b":[[56,"impl-Debug-for-Error"],[57,"impl-Display-for-Error"]]}],\
["follow_chain_updates",{"doc":"This example shows how to use the chain follower to follow …","t":"H","n":["main"],"q":[[0,"follow_chain_updates"],[1,"core::error"],[2,"alloc::boxed"],[3,"core::result"]],"d":[""],"i":[0],"f":"{{}{{h{b{f{d}}}}}}","c":[],"p":[[1,"unit"],[10,"Error",1],[5,"Box",2],[6,"Result",3]],"b":[]}],\
["follow_chain_updates_mithril",{"doc":"This example shows how to use the chain follower to follow …","t":"H","n":["main"],"q":[[0,"follow_chain_updates_mithril"],[1,"core::error"],[2,"alloc::boxed"],[3,"core::result"]],"d":[""],"i":[0],"f":"{{}{{h{b{f{d}}}}}}","c":[],"p":[[1,"unit"],[10,"Error",1],[5,"Box",2],[6,"Result",3]],"b":[]}],\
["hermes",{"doc":"The Hermes Node","t":"H","n":["main"],"q":[[0,"hermes"]],"d":[""],"i":[0],"f":"{{}b}","c":[],"p":[[1,"unit"]],"b":[]}],\
["read_block",{"doc":"This example shows how to use the chain reader to download …","t":"H","n":["main"],"q":[[0,"read_block"],[1,"core::error"],[2,"alloc::boxed"],[3,"core::result"]],"d":[""],"i":[0],"f":"{{}{{h{b{f{d}}}}}}","c":[],"p":[[1,"unit"],[10,"Error",1],[5,"Box",2],[6,"Result",3]],"b":[]}],\
["read_block_mithril",{"doc":"This example shows how to use the chain reader to read …","t":"H","n":["main"],"q":[[0,"read_block_mithril"],[1,"core::error"],[2,"alloc::boxed"],[3,"core::result"]],"d":[""],"i":[0],"f":"{{}{{h{b{f{d}}}}}}","c":[],"p":[[1,"unit"],[10,"Error",1],[5,"Box",2],[6,"Result",3]],"b":[]}],\
["read_block_range",{"doc":"This example shows how to use the chain reader to download …","t":"H","n":["main"],"q":[[0,"read_block_range"],[1,"core::error"],[2,"alloc::boxed"],[3,"core::result"]],"d":[""],"i":[0],"f":"{{}{{h{b{f{d}}}}}}","c":[],"p":[[1,"unit"],[10,"Error",1],[5,"Box",2],[6,"Result",3]],"b":[]}],\
["read_block_range_mithril",{"doc":"This example shows how to use the chain reader to read …","t":"H","n":["main"],"q":[[0,"read_block_range_mithril"],[1,"core::error"],[2,"alloc::boxed"],[3,"core::result"]],"d":[""],"i":[0],"f":"{{}{{h{b{f{d}}}}}}","c":[],"p":[[1,"unit"],[10,"Error",1],[5,"Box",2],[6,"Result",3]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
